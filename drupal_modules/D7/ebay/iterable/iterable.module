<?php

/**
 * @file
 *   Basic configuration and tools for iterable
 */

require 'autoload.php';

use IterableApi\IterableApi;

define('API_KEY', variable_get('iterable_api_key'));
define('LIST_ID', variable_get('iterable_list_id'));
define('INTERNATIONAL_LIST_ID', variable_get('international_list_id'));

/**
 * Implements hook_permission()
 */
function iterable_permission() {
  return array(
    'admin iterable access' => array(
      'title' => t('Iiterable Configuration'),
      'description' => t('Set configuration options for Iterable'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function iterable_menu() {
  $items = array();

  $items['admin/config/iterable'] = array(
    'title' => 'Iterable Configuration',
    'description' => 'Configuration for the Iterable module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iterable_form'),
    'access arguments' => array('access administration pages'),
  );

  $items['admin/config/iterable/forms'] = array(
    'title' => 'Webforms',
    'description' => 'Page to select forms and map their fields to Iterable Fields.',
    'file' => 'iterable.admin.inc',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('admin iterable access'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/iterable/lists'] = array(
    'title' => 'List Sizes',
    'description' => 'Page to view Ebay Iterable lists and their sizes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_iterable_list_sizes'),
    'access arguments' => array('admin iterable access'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Form for module configuration page
 */
function iterable_form($form, &$form_state) {

  $form['iterable_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Project API Key'),
    '#description' => t('The API Key associated with the Iterable project'),
    '#default_value' => variable_get('iterable_api_key'),
    '#required' => TRUE
  );

  $form['iterable_list_id'] = array(
    '#type' => 'textfield',
    '#title' => t('List Id'),
    '#description' => t('The List ID within the project that users will be entered into'),
    '#default_value' => variable_get('iterable_list_id'),
    '#required' => TRUE
  );

  $form['international_list_id'] = array(
    '#type' => 'textfield',
    '#title' => t('International List Id'),
    '#description' => t('International List ID'),
    '#default_value' => variable_get('international_list_id'),
    '#required' => FALSE
  );

  return system_settings_form($form);
}

function iterable_form_alter(&$form, &$form_state, $form_id) {
  if($form_id === '_ebay_custom_get_us_form'){
    // Establish connection with iterable
    $form['#submit'][] = '_iterable_submit_data';
  }
  else if($form_id === 'webform_client_form_130503'){
    // ebay celebrates small business form
    $form_state['values']['iterableListId'] = '108066';
    $form['#submit'][] = '_iterable_trigger_thank_you_email';
  }
  else if($form_id === 'webform_client_form_130244'){
    $form['#submit'][] = '_iterable_thought_leadership_thank_you';
  }
}

/**
 * Function to process form data before sending to Iterable.
 *
 * Function that submits to this function is in ebay_custom.module
 *  Line: 380 - _ebay_custom_get_us_form_submit()
 */
function _iterable_submit_data($mapping, $values){

  $processed_values = array();
  foreach ($values as $k => $v) {
    $match = array_key_exists($k, $mapping);
    if ($match && (!empty($v))) {
      if ($k == 'country') {
        $country = _ebay_custom_get_country_name($v);
        $processed_values[$mapping[$k]] = $country;
      }
      else {
        $processed_values[$mapping[$k]] = filter_xss(trim($v));
      }
    }
  }

  // CONDITIONAL LIST ID FOR EBAY ONLY
  //  Other list ID is for international submissions
  $listId = ($processed_values['country'] != 'United States') ? INTERNATIONAL_LIST_ID : LIST_ID;

  $iterable = new IterableApi(API_KEY, $listId);

  $result = $iterable->listSubscribe($processed_values);

  // Need to check that the result code was 200 indicating the request was successful
  if ($result->successCount >= 1) {
    watchdog('iterable', 'Added to list => <pre>' . print_r($result,true) . '</pre>');
    drupal_goto('thanks');
  }
  else {
    watchdog('iterable_error', 'Iterable Error => <pre>' . print_r($result,true) . '</pre>');
    drupal_set_message(t('We were unable to process the form. Please try again.'), 'error');
  }
}

function _iterable_list_subscribe($mapping, $values, $listId = '87818'){

  $processed_values = array();
  foreach ($values as $k => $v) {
    $match = array_key_exists($k, $mapping);
    if ($match && (!empty($v))) {
      $processed_values[$mapping[$k]] = filter_xss(trim($v));
    }
  }

  // CONDITIONAL LIST ID FOR EBAY ONLY
  //  Other list ID is for international submissions
  // $listId = ($processed_values['country'] != 'United States') ? INTERNATIONAL_LIST_ID : LIST_ID;

  // TEMPORARY LIST ID FOR CAMPAIGN RUNNING ON 3/12/18

  $iterable = new IterableApi(API_KEY, $listId);

  $result = $iterable->listSubscribe($processed_values);

  return $result;
}

/**
 * Function to update/insert user data
 *
 * Function that submits to this function is in bipac_campaigns.module
 *  Line: 930
 */
function _iterable_user_update($mapping, $data){
  $processed_values = array();
  foreach ($data as $k => $v) {
    $match = array_key_exists($k, $mapping);
    if ($match && (!empty($v))) {
      $processed_values[$mapping[$k]] = filter_xss(trim($v));
    }
  }

  // Organic list ID
  $iterable = new IterableApi(API_KEY, '87818');

  $userUpdate = $iterable->updateUser($processed_values);

  watchdog('iterable', "User Update Response  => <pre>" . print_r($userUpdate, true) . "</pre>");
}

/**
 * Function to unsubscribe user from channels in iterable
 *
 * Currently unused
 */
function _iterable_user_unsubscribe($email){
  $iterable = new IterableApi(API_KEY);

  $userUnsubscribe = $iterable->unsubscribeUserFromChannels($email);

  watchdog('iterable', "User Update Response  => <pre>" . print_r($userUnsubscribe, true) . "</pre>");
}

/**
 * Function to track user submission of the campaign form.
 *
 * @param array   $data
 *
 * Function that submits to this function is in bipac_campaigns.module
 *  Line: 931
 */
function _iterable_form_track($data){
  $iterable = new IterableApi(API_KEY);

  $trackUser = $iterable->trackUser($data, 'formSubmission');

  watchdog('iterable', "Tracked User Response  => <pre>" . print_r($trackUser, true) . "</pre>");
}

/**
 * Function to look-up details about a user to see if they already exist
 *
 * @param string      $email
 *
 * @return boolean    $userExists
 */
function _iterable_user_lookup($email){
  $iterable = new IterableApi(API_KEY);

  $userLookup = $iterable->userLookup($email);

  $userExists = ( isset($userLookup->user) ) ? true : false;
  return $userExists;
}

function _iterable_list_sizes(){
  // $iterable = new IterableApi(API_KEY);

  // $allLists = $iterable->getAllLists();
}

function _iterable_trigger_thank_you_email(&$form, &$form_state){
  $email = isset($form_state['values']['submitted_tree']['email']) ? $form_state['values']['submitted_tree']['email'] : '';
  if($email !== ''){
    $iterable = new IterableApi(API_KEY, '108066');

    $payload = array(
      'email' => $email,
      'firstName' => $form_state['values']['submitted_tree']['first_name'],
      'lastName' => $form_state['values']['submitted_tree']['last_name'],
      'company' => $form_state['values']['submitted_tree']['company_title']
    );

    $result = $iterable->listSubscribe($payload);
  }
}

function _iterable_thought_leadership_thank_you(&$form, &$form_state){
  $email = isset($form_state['values']['submitted_tree']['email_address2']) ? $form_state['values']['submitted_tree']['email_address2'] : '';
  if($email !== ''){
    $iterable = new IterableApi(API_KEY, '113461');

    $payload = array(
      'email' => $email,
      'firstName' => $form_state['values']['submitted_tree']['name'],
      'lastName' => $form_state['values']['submitted_tree']['last_name'],
      'company' => $form_state['values']['submitted_tree']['employer'],
      'position' => $form_state['values']['submitted_tree']['position'],
      'yourRole' => ($form_state['values']['submitted_tree']['check_box'] === 'other_one') ? $form_state['values']['submitted_tree']['other'] : $form_state['values']['submitted_tree']['check_box'],
    );

    $result = $iterable->listSubscribe($payload);
  }
}