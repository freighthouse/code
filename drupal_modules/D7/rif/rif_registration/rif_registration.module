<?php

	/* ****************************************
	 * 			Init Hooks
	 * **************************************** */
	/**
	 * Implements hook_permission()
	 */
	function rif_registration_permission() {
		return array(
			'view newsletter reports' => array(
				'title' => t('View Newsletter Reports'),
				'description' => t('Review Newsletter Reports'),
			)
		);
	}

	/**
	 * Implements hook_menu().
	 */
	function rif_registration_menu() {
		$items = array();

		$items['admin/config/people/multi-profile-settings'] = array (
			'title' => 'Multi Profile Settings',
			'description' => t('Configure Options for Multi-Profiles.'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array('multi_profile_form'),
			'access arguments' => array('administer users'),
			'file' => 'rif_registration.config.inc',
		);

		$items['literacy-network/sign-in'] = array(
			'title' => 'Sign In',
			'description' => 'LN Sign In Page',
			'page callback' => 'get_sign_in_page_ln',
			//'page callback' => 'drupal_get_form',
			//'page arguments' => array('user_login_block'),
			'access callback' => TRUE,//if User is logged in redirect them to the my-account page
			'type' => MENU_NORMAL_ITEM,
			'file' => 'rif_registration_sign_in_page.inc',
		);
		$items['literacy-central/sign-in'] = array(
			'title' => 'Sign In',
			'description' => 'LC Sign In Page',
			'page callback' => 'get_sign_in_page_lc',
			//'page callback' => 'drupal_get_form',
			//'page arguments' => array('user_login_block'),
			'access callback' => TRUE,//if User is logged in redirect them to the my-account page
			'type' => MENU_NORMAL_ITEM,
			'file' => 'rif_registration_sign_in_page.inc',
		);

		// Registration pages
		$items['literacy-network/register'] = array(
			'title' => 'LN Register',
			'description' => 'LN registration Page',
			'page callback' => 'get_registration_page_ln',
			'access callback' => TRUE,//if User is logged in redirect them to the my-account page
			'type' => MENU_NORMAL_ITEM,
			'file' => 'rif_registration_ln_reg_page.inc',
		);
		$items['literacy-central/register'] = array(
			'title' => 'LC Register',
			'description' => 'LC registration Page',
			'page callback' => 'get_registration_page_lc',
			'access callback' => TRUE,//if User is logged in redirect them to the my-account page
			'type' => MENU_NORMAL_ITEM,
			'file' => 'rif_registration_lc_reg_page.inc',
		);

		// Password Reset Pages
		$items['literacy-central/password'] = array(
			'title' => 'LC Password Reset',
			'description' => 'LC Password Reset Page',
			'page callback' => 'get_password_reset',
			'access callback' => TRUE,// TODO: if User is logged in redirect them to the my-account page
			'type' => MENU_NORMAL_ITEM,
			'file' => 'rif_registration_password_reset_page.inc',
		);
		$items['literacy-network/password'] = array(
			'title' => 'LN Password Reset',
			'description' => 'LN Password Reset Page',
			'page callback' => 'get_password_reset',
			'access callback' => TRUE,// TODO: if User is logged in redirect them to the my-account page
			'type' => MENU_NORMAL_ITEM,
			'file' => 'rif_registration_password_reset_page.inc',
		);

		// Password Login Pages
		$items['literacy-central/reset/%/%/%'] = array(
			'title' => 'Account settings',
			'access callback' => 'rif_registration_pass_reset_access',
			'access arguments' => array(2, 3, 4,'literacy-central'),
			'page callback' => 'rif_registration_pass_reset_page',
			'page arguments' => array(2, 3, 4),
			'type' => MENU_CALLBACK,
		);

		$items['literacy-network/reset/%/%/%'] = array(
			'title' => 'Account settings',
			'access callback' => 'rif_registration_pass_reset_access',
			'access arguments' => array(2, 3, 4,'literacy-network'),
			'page callback' => 'rif_registration_pass_reset_page',
			'page arguments' => array(2, 3, 4),
			'type' => MENU_CALLBACK,
		);

		// Account Pages
		$items['user/my-account'] = array(
			'title' => 'My Account',
			'description' => 'My Account Page',
			'page callback' => 'get_my_account_page',
			'access callback' => TRUE, //if User is logged in redirect them to the sign-in page
			'type' => MENU_LOCAL_TASK,
			'file' => 'rif_registration_profile2_literacy_central.inc',
		);
		$items['literacy-central/my-account'] = array(
			'title' => 'LC Account',
			'description' => 'My Account Page',
			'page callback' => 'get_my_account_page_lc',
			'access callback' => TRUE, //if User is logged in redirect them to the sign-in page
			'type' => MENU_LOCAL_TASK,
			'file' => 'rif_registration_profile2_literacy_central.inc',
		);
		$items['literacy-network/my-account'] = array(
			'title' => 'LN Account',
			'description' => 'My Account Page',
			'page callback' => 'get_my_account_page_ln',
			'access callback' => TRUE, //if User is logged in redirect them to the sign-in page
			'type' => MENU_LOCAL_TASK,
			'file' => 'rif_registration_profile2_literacy_central.inc',
		);

		// Newsletter Admin Report
		$items['newsletter-report'] = array(
			'title' => 'Newsletter Report',
			'description' => 'Report of current newsletter registrations.',
			'page callback' => 'get_basic_newsletter_report',
			'access arguments' => array('view newsletter reports'),
			'type' => MENU_CALLBACK,
			'file' => 'rif_registration_newsletter_reports.inc',
		);

		// TODO: (Post-go-live) Setting our own edit page causes an ajax error when trying to add an existing node
		/*$items['literacy-network/%node/multi-site-profile/edit'] = array(
			'title' => 'Edit',
			'page callback' => 'multi_site_profile_edit',
			'page arguments' => array(1),
			'access callback' => 'node_access',
			'access arguments' => array('update', 1),
			'weight' => 0,
			'type' => MENU_CONTEXT_NONE,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'rif_registration_multi_site.inc',
		);*/

		$items['literacy-network/site-profile/edit/%node'] = array(
			'title' => 'Edit',
			'page callback' => 'single_site_profile_edit',
			'page arguments' => array(3),
			'access callback' => 'node_access',
			'access arguments' => array('update', 3),
			'weight' => 0,
			'type' => MENU_CONTEXT_NONE,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'rif_registration_single_site.inc',
		);

		return $items;
	}

	/**
	 * Implements hook_menu_alter().
	 */
	function rif_registration_menu_alter(&$items) {
		// Drupal's default behavior is to show the user a log-in form before
		// their user profile.  We replace this item to skip the uneccesary step.

	}

	/* ****************************************
	 * 			Password Reset
	 * **************************************** */
	// Much of the password reset updates come from https://www.drupal.org/project/simple_pass_reset
	/**
	 * Access callback for use with Drupal's menu API.
	 */
	function rif_registration_pass_reset_access($uid, $timestamp, $hashed_pass, $site_url = 'user') {
		if (user_is_logged_in()) {
			return FALSE;
		}

		// This timeout check imitates core logic in user_pass_reset(). The timeout
		// number is expressed in seconds, with 86400 equal to one day. There is no
		// UI to adjust this number, but sites can customize it in their settings.php.
		$timeout = variable_get('user_password_reset_timeout', 86400);

		// Ensure the user is not blocked.
		$users = user_load_multiple(array($uid), array('status' => '1'));

		if ($timestamp <= REQUEST_TIME && $account = reset($users)) {
			// Bypass the timeout check if the user has not logged in before.
			if ($account->login && REQUEST_TIME - $timestamp > $timeout) {
				drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'), 'status', FALSE);
				drupal_goto($site_url . '/password');
			}
			elseif ($account->uid && $timestamp >= $account->login && $timestamp <= REQUEST_TIME && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid)) {
				return TRUE;
			}
		}

		return FALSE;
	}

	/**
	 * Page callback for use with Drupal's menu API.
	 *
	 * This page replaces core one-time login form provided by user_pass_reset().
	 */
	function rif_registration_pass_reset_page($uid, $timestamp, $hashed_pass, $option = NULL) {
		// Never cache this page.
		drupal_page_is_cacheable(FALSE);

		module_load_include('inc', 'user', 'user.pages');

		// When $option is original or login, preserve original behavior.
		if ($option == 'original') {
			return drupal_get_form('user_pass_reset', $uid, $timestamp, $hashed_pass);
		}
		elseif ($option == 'login') {
			return drupal_get_form('user_pass_reset', $uid, $timestamp, $hashed_pass, $option);
		}
		else {
			// Show the user edit form instead of silly one-time login form.
			$account = user_load($uid);
			$form = drupal_get_form('user_profile_form', $account);

			$jumbo_node_html = node_view(node_load(5087));

			$back_nav_block = module_invoke('content_bundles', 'block_view', 'rif_back_nav');
			$header_markup = render($back_nav_block['content']);
			$panel_separator = module_invoke('content_bundles', 'block_view', 'rif_panel_separator');
			$panel_markup = render($panel_separator['content']);

			$toReturn = $header_markup.'
				<div class="header">' .
					render($jumbo_node_html) .
				'</div>' .
				$panel_markup .
				'<div class="container panel-push-down form-horizontal">
					<div class="panel panel-default">
						<div class="panel-body">' .
							drupal_render($form) .
						'</div>
					</div>
				</div>';
			return $toReturn;
		}
	}

	/**
	 * Submit callback for Drupal form API.
	 */
	function rif_registration_pass_reset_submit($form, &$form_state) {
		if (!user_is_logged_in()) { // Sanity check.
			// Remove roles that were disabled in the form. Normally the User module
			// will array_filter() these out for us.  But remember_me and possibly other
			// modules have bugs that might prevent it from doing so.
			if (!empty($form_state['user']->roles)) {
				$form_state['user']->roles = array_filter($form_state['user']->roles);
			}

			// Load the user account afresh and finalize the login.
			// @see user_login_submit()
			global $user;
			$user = user_load($form_state['user']->uid);
			user_login_finalize();

			watchdog('user', 'User %name used one-time login link.', array('%name' => $user->name));

			if(empty($form_state['redirect'])) {
				$form_state['redirect'] = arg(0);
			}
		}
	}

	function rif_registration_form_user_pass_alter(&$form, &$form_state) {

		//http://rif.dev/user/password // Link to password

		$form['#attributes']['class'][] = 'form-horizontal';
		$form['#prefix'] = '<div class="container panel-push-down"><div class="panel panel-default"><div class="panel-body">';
		$form['#suffix'] = '</div></div></div>';
		$form['actions']['#prefix'] = '<div class="col-sm-offset-3 col-sm-9">';
		$form['actions']['#suffix'] = '</div>';
		$form['actions']['submit']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
		);
		$form['#submit'][] = 'rif_registration_user_pass_updated_submit';
//		dsm('In user pass form alter');
//		dsm($form);
//		dsm(arg(0));
	}

	/**
	 * Implements hook_token_info(). This hook will register rif_one_time_login_url
	 */
	function rif_registration_token_info() {
		$info['tokens']['user']['rif_one_time_login_url'] = array(
			'name' => t('Rif One Time Login URL'),
			'description' => t('The one time login url for a rif registrant.'),
		);
		return $info;
	}

	/**
	 * Implements hook_tokens(). This hook will operate the token and replace it with it's value.
	 */
	function rif_registration_tokens($type, $tokens, array $data = array(), array $options = array()) {
		$replacements = array();
		$sanitize = !empty($options['sanitize']);

		if ($type == 'user' && !empty($data['user'])) {
			$account = $data['user'];

			foreach ($tokens as $name => $original) {
				switch ($name) {
					case 'rif_one_time_login_url':
						$site = arg(0);
						$timestamp = REQUEST_TIME;
						if($site == 'api'){
							$site = 'literacy-central';
						}
						global $base_url;
						// Check for if the password reset is coming in from the api.
						$revised_url = str_replace('api.','www.',$base_url);
						$revised_url = str_replace('prod.','www.',$revised_url);
						$to_replace = url($revised_url . '/' . $site . '/reset/' . $account->uid . '/' . $timestamp . '/' . user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid), array('absolute' => TRUE)); //setthevalueofthecustomtokentoken();
						$replacements[$original] = $to_replace;

						break;
				}
			}
		}

		return $replacements;
	}

	function rif_registration_user_pass_updated_submit($form, &$form_state) {
		$form_state['redirect'] = arg(0).'/sign-in';
	}

	function rif_registration_user_pass_reset_redirect_submit($form, &$form_state) {
		$uid = $form_state['build_info']['args'][0];
		$user = user_load($uid);

		$lc_role = user_role_load_by_name('literacocy user');
		$has_lc_role = user_has_role($lc_role->rid, $user);

		$ln_role = user_role_load_by_name('Community Member');
		$has_ln_role = user_has_role($ln_role->rid, $user);

		// If user has the LC role direct them to lc account page
		if($has_lc_role) {
			$form_state['redirect'] = 'literacy-central/my-account';
		}
		// If user has the LN role direct them to ln account page (Overriding lc if need be)
		if($has_ln_role) {
			$form_state['redirect'] = 'literacy-network/my-account';
		}
	}

	/* ****************************************
	 * 			User Forms
	 * **************************************** */
	function rif_registration_form_alter(&$form, &$form_state, $form_id) {
		// Empty function for quick form checks
	}

	/**
	 * Implements hook_form_alter().
	 */
	function rif_registration_form_rif_registration_load_my_account_form_alter (&$form, &$form_state, $form_id) {
		$user = $form['#user'];

		$type = 'literacy_network';
		$profile = profile2_load_by_user($user->uid);

		$ln_role = user_role_load_by_name('Community Member');
		$has_ln_role = user_has_role($ln_role->rid);

		if(empty($profile[$type])) {
			//dsm("No LC Profile Found");
			$profile[$type] = profile_create(array('type' => $type, 'uid' => $user->uid));
		}

		//Change the pass and email description
		$form['account']['current_pass']['#description'] = 'Enter your current password to change the <em class="placeholder">E-mail address</em> or <em class="placeholder">Password</em>.';// Bring this back in if we want to reset our password even though we are logged in. <a href="/'.arg(0).'/password" title="Request new password via e-mail.">Request new password</a>.
		$form['account']['mail']['#description'] = 'Please provide a valid email address. Your email address will not be made public and will be used only if you choose to receive our email updates and newsletter.';
		unset($form['account']['pass']['#description']);

		// Check if a user has a Community Member Role
		if($has_ln_role) {

			if (!$profile[$type]->field_community_user_type) {
				dsm("The system encountered an unexpected error while accessing your account. Please contact your site administrator for more information.");
				watchdog('rif_registration', "A user (%email) has a LN profile but doesn't have a community_user_type set.", array('%email' => $user->mail), WATCHDOG_ERROR);
				return;
			}

			$form['program_tracking'] = array(
				'#type' => 'fieldset',
				'#title' => t('Profile'),
				'#collapsible' => FALSE,
				'#collapsed' => FALSE,
			);
			$myProfileData = _get_ln_my_profile_data();
			$form['program_tracking']['profile_information'] = array(
				'#markup' => drupal_render($myProfileData)
			);
		}
	}

	function rif_registration_form_user_profile_form_alter(&$form, &$form_state) {
		// Don't alter the normal profile edit form, but only the password reset form.
		if (arg(1) == 'reset' && !user_is_logged_in()) {
			// Our submit handler will log the user in after form submit.
			$form['#submit'][] = 'rif_registration_pass_reset_submit';

			$form['actions']['submit']['#value'] = t('Save and log in as !username', array('!username' => format_username($form['#user'])));
			$form['actions']['#prefix'] = '<div class="col-sm-offset-3 col-sm-9">';
			$form['actions']['#suffix'] = '</div>';
			$form['actions']['submit']['#attributes'] = array(
				'class' => array(
					'btn btn-yellow-rif blue-border'
				),
			);

			if (!isset($form['account']['#access']) || $form['account']['#access']) {
				// Require a new password.
				$form['account']['pass']['#required'] = TRUE;

				drupal_set_title(t('Choose a new password')); // Instead of "Reset password".

				// Hide "To change the current user password..."
				//unset($form['account']['pass']['#description']);
				$form['account']['pass']['#description'] = "Please update your password";

				// The user is most interested in getting a working password, don't show their picture, timezone, etc.
				foreach (element_children($form) as $key) {
					if (isset($form[$key]['#type']) && in_array($form[$key]['#type'], array('hidden', 'actions', 'captcha'))) {
						// Do not alter these elements.
					}
					else {
						// Hide other elements.
						$form[$key]['#access'] = FALSE;
					}
				}
				// Except don't hide these.
				$form['account']['#access'] = TRUE;
				$form['actions']['#access'] = TRUE;

				// But seriously do hide these.
				$form['account']['mail']['#access'] = FALSE;
			}

			// This is to avoid a PHP Notice in user_profile_form_submit().  https://www.drupal.org/node/2111293#comment-9262499
			if (empty($_SESSION)) {
				$_SESSION = array('rif_registration' => TRUE);
			}
		}
	}

	function rif_registration_form_user_login_block_alter(&$form, &$form_state, $form_id) {
		if(arg(0) == 'literacy-tracker' && arg(1) == 'student') {
			$form['#prefix'] = '<div class="panel panel-lt-sign-in"><div class="panel-body">';
			$form['#suffix'] = '</div></div>';

			$form['actions']['#prefix'] = '<div class="col-sm-12 text-center">';
			$form['actions']['#suffix'] = '</div>';
			$form['#submit'][] = '_rif_registration_user_login_form_submit';
		} else {
			$form['#attributes']['class'][] = 'panel-push-down';
			$form['#prefix'] = '<div class="container panel-push-down"><div class="panel panel-default"><div class="panel-body">';
			$form['#suffix'] = '</div></div></div>';

			$form['reset_link'] = array(
				'#markup' => '
					<div class="col-xs-12 text-right"><a href="/'.arg(0).'/password" title="Request new password via e-mail.">Request new password</a></div>
				'
			);

			$form['actions']['#prefix'] = '<div class="col-sm-offset-3 col-sm-9">';
			$form['actions']['#suffix'] = '</div>';
		}

		$form['#attributes']['class'][] = 'form-horizontal';
		unset($form['links']);

		$form['actions']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Sign In'),
			'#attributes' => array(
				'class' => array(
					'btn btn-yellow-rif blue-border'
				),
			),
		);
	}

	function _rif_registration_user_login_form_submit(&$form, &$form_state) {
		$form_state['redirect'] = 'literacy-tracker/student/dashboard';
	}

	function rif_registration_form_user_register_form_alter(&$form, &$form_state, $form_id) {
		//dsm("Entered user_registeration form alter");
		//dsm($form);
		global $user;
		global $theme;

		if(in_array('Rif Admin',$user->roles) && $theme == 'seven'){
			return;
		};

		$lc_id = 'literacy_central';
		$ln_id = 'literacy_network';
		$form['actions']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Create New Account'),
			'#attributes' => array(
				'class' => array(
					'btn btn-yellow-rif blue-border'
				),
			),
		);


		// Make the account wrapper a fieldset and set the appropriate options.
		$form['account']['#type'] = 'fieldset';
		$form['account']['#title'] = t('My Account');
		$form['account']['#collapsible'] = FALSE;
		$form['account']['#collapsed'] = FALSE;
		$form['account']['mail']['#description'] = 'Please provide a valid email address. Your email address will not be made public and will be used only if you choose to receive our email updates and newsletter.';
		unset($form['account']['pass']['#description']);

		// Prepend #pre_render callback to rearrange form fields
		if (!isset($form['#pre_render'])) {
			$form['#pre_render'] = array();
		}
		array_unshift($form['#pre_render'], 'rearrange_form_elements');

		// Get profile2 profile types from current path.
		$url = drupal_parse_url($form['#action']);
		$path = explode('/', str_replace('/register', '', $url['path']));
		$path_key = end($path);

		if($path_key == 'literacy-network') :
			/*$form['header'] = array(
				"#markup" => "Register a new Account",
				'#prefix' => '<h1>',
				'#suffix' => '</h1>',
				'#weight' => '-100',
			);

			$form['account_description'] = array(
				"#markup" => "Please register to become a part of the RIF Literacy Network, our community of local literacy champions.  Through our RIF Literacy Network, we will connect you with resources and tools to support your local efforts to ensure that all children are given the opportunity to learn to read and thrive.",
				'#prefix' => '<p>',
				'#suffix' => '</p>',
				'#weight' => '-90',
			);*/

			if (empty($form_state['profiles'][$ln_id])) {
				$form_state['profiles'][$ln_id] = profile2_create(array('type' => $ln_id));
			}
			profile2_attach_form($form, $form_state);
			// Wrap LN profile form in a fieldset.
			$form['profile_' . $ln_id] += array(
				'#type' => 'fieldset',
				'#title' => "Literacy Network",
			);

			$role = user_role_load_by_name("Community Member");
			$rid = $role->rid;
			if (!array_key_exists($rid, $form['account']['roles'])) {
				$form['account']['roles'][$rid] = array(
					'#type' => 'checkbox',
					'#title' => 'Community Member',
					'#default_value' => TRUE,
					'#disabled' => (user_access('administer users') ? FALSE : TRUE),
				);
			}
			$form_state['redirect'] = 'literacy-network';

		endif;

		if($path_key == 'literacy-central') :
			/*$form['header'] = array(
				"#markup" => "Register a new Literacy Central Account",
				'#prefix' => '<h1>',
				'#suffix' => '</h1>',
				'#weight' => '-100',
			);

			$form['account_description'] = array(
				"#markup" => "Registering for a Literacy Central account will give you access to a vast array of resources and materials. You will be provided with outstanding tools that will help you and your reading community succeed.",
				'#prefix' => '<p>',
				'#suffix' => '</p>',
				'#weight' => '-90',
			);*/

			if (empty($form_state['profiles'][$lc_id])) {
				$form_state['profiles'][$lc_id] = profile2_create(array('type' => $lc_id));
			}
			profile2_attach_form($form, $form_state);
			// Wrap LN profile form in a fieldset.
			$form['profile_' . $lc_id] += array(
				'#type' => 'fieldset',
				'#title' => "Literacy Central",
			);

			$role = user_role_load_by_name("literacy user");
			$rid = $role->rid;
			if (!array_key_exists($rid, $form['account']['roles'])) {
				$form['account']['roles'][$rid] = array(
					'#type' => 'checkbox',
					'#title' => 'literacy user',
					'#default_value' => TRUE,
					'#disabled' => (user_access('administer users') ? FALSE : TRUE),
				);
			}

			$form_state['redirect'] = 'literacy-central/parent';
		endif;

		$form['#submit'][] = 'rif_registration_sync_newsletter';
		//$form['#validate'][] = 'rif_registration_sync_newsletter_validate';

		$form['newsletter_preferences'] = array(
			'#type' => 'fieldset',
			'#title' => t('Newsletter Preferences'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
		);

		$form['newsletter_preferences']['field_get_rif_newsletter'] = array(
			'#type' => 'checkbox',
			'#title' => t('Get the RIF Newsletter'),
			'#attributes' => array('class' => array('newsletter-option')),
			'#options' => array(0 => t('Closed'), 1 => t('Active')),
			'#default_value' => TRUE,
		);
		/*$form['newsletter_preferences']['field_get_lc_newsletter'] = array(
			'#type' => 'checkbox',
			'#title' => t('Get the Literacy Central Newsletter'),
			'#attributes' => array('class' => array('newsletter-option')),
			'#options' => array(0 => t('Closed'), 1 => t('Active')),
			'#default_value' => FALSE,
		);
		$form['newsletter_preferences']['field_get_ln_newsletter'] = array(
			'#type' => 'checkbox',
			'#title' => t('Get the Literacy Network Newsletter'),
			'#attributes' => array('class' => array('newsletter-option')),
			'#options' => array(0 => t('Closed'), 1 => t('Active')),
			'#default_value' => FALSE,
		);*/
	}

	function rif_registration_form_profile2_edit_literacy_network_form_alter(&$form, &$form_state) {
		$rifID = _generate_rif_ID($form['#user']);
		$form['profile_literacy_network'] += array(
			'#type' => 'fieldset',
			'#title' => "Literacy Network",
		);
		$form['profile_literacy_network']['field_phone_number'] += array(
			'#states' => array(
				'visible' => array(
					':input[name="profile_literacy_network[field_community_user_type][und][959]"]' => array('checked' => TRUE),
				),
			),
		);
		$form['profile_literacy_network']['field_volunteer_interest'] += array(
			'#states' => array(
				'visible' => array(
					':input[name="profile_literacy_network[field_community_user_type][und][959]"]' => array('checked' => TRUE),
				),
				/*'required' => array(
					':input[name="profile_literacy_network[field_community_user_type][und][959]"]' => array('checked' => TRUE),
				),*/
			),
		);
		$form['profile_literacy_network']['field_volunteer_interest_other'] += array(
			'#states' => array(
				'visible' => array(
					':input[name="profile_literacy_network[field_volunteer_interest][und][982]"]' => array('checked' => TRUE),
				),
			),
		);
		if($rifID) {
			$form['profile_literacy_network']['field_current_rif_id'] = array(
				//'#type' => 'textfield', //Change to markup if we want.
				//'#disabled' => TRUE,
				//'#default_value' => $rifID,
				//'#title' => 'Current RIF ID',
				'#weight' => 7,
				'#markup' => '<div class="form-group"><label class="col-sm-3 control-label">Current RIF ID</label><div class="col-sm-9"><p class="rifid-account">'. $rifID . '</p></div></div>',
			);
		}
		$form['profile_literacy_network']['field_has_legacy_id']['und'] += array(
			'#title' => 'RIF ID'
		);
		$form['profile_literacy_network']['field_legacy_rif_id'] += array(
			'#states' => array(
				'visible' => array(
					':input[name="profile_literacy_network[field_has_legacy_id][und]"]' => array('checked' => true),
				),
			),
		);
		$form['profile_literacy_network']['rif_id_header']['#weight'] = 8;
		$form['profile_literacy_network']['field_has_legacy_id']['#weight'] = 9;
		$form['profile_literacy_network']['field_legacy_rif_id']['#weight'] = 10;
		// These are hardcoded titles because of know profile 2 glitch: https://www.drupal.org/node/1865996
		$form['profile_literacy_network']['field_community_user_type']['und']['#title'] = 'Community User Type <span class="form-required" title="This field is required.">*</span>';
		foreach($form['profile_literacy_network']['field_community_user_type']['und']['#options'] as $tid => &$option) {
			$term_entity = taxonomy_term_load($tid);
			$description = $term_entity->description;
			$option = '<span data-container="body" data-toggle="popover" data-trigger="hover focus" data-placement="right" data-content="'.$description.'">'.$option . '</span>';
		}

		// TODO: Note that we are just setting the display here. To actually make the field required we have to do so in the validation function.
		// Set required on the fields that need them
		// Note that we could have used the state array and set them to rquired; however, there is currently a bug that shows all child checkboxes as required and does not look correct.
		// Note that we could have also set the ['und']['#required'] field to be required but this would have to be dynamically updated in the actual form.
		// These are hardcoded titles because of know profile 2 glitch: https://www.drupal.org/node/1865996
		$form['profile_literacy_network']['field_volunteer_interest']['und']['#title'] = 'Volunteer Interest <span class="form-required" title="This field is required.">*</span>';
		$form['profile_literacy_network']['field_legacy_rif_id']['und'][0]['value']['#title'] = '<span class="form-required" title="This field is required.">*</span> '. $form['profile_literacy_network']['field_legacy_rif_id']['und'][0]['value']['#title'];

		$form['#validate'][] = 'validate_ln_required_fields';
	}

	function rif_registration_form_profile2_edit_literacy_central_form_alter(&$form, &$form_state) {
//		dsm("Entered lc form alter funciton");
		$form['profile_literacy_central'] += array(
			'#type' => 'fieldset',
			'#title' => "Literacy Central",
		);
		$form['profile_literacy_central']['field_areas_of_interest_other'] += array(
			'#states' => array(
				'visible' => array(
					':input[name="profile_literacy_central[field_areas_of_interest][und][976]"]' => array('checked' => TRUE),
				),
			),
		);

		// These are hardcoded titles because of know profile 2 glitch: https://www.drupal.org/node/1865996
		$form['profile_literacy_central']['field_user_type']['und']['#title'] = 'User Type <span class="form-required" title="This field is required.">*</span>';

		$form['#validate'][] = 'validate_lc_required_fields';
	}

	// Validation forms for register and my account forms
	function validate_lc_required_fields(&$form, &$form_state) {
		if(!empty($form_state['values'] && isset($form_state['values']['LC_opt_in']) && !$form_state['values']['LC_opt_in'])) {
			return;
		}
		if($form_state['values']['profile_literacy_central']['field_user_type']['und'][0]['tid'] == 0) {
			form_set_error('edit-profile-literacy-central-field-user-type', t("Please select a user type for Literacy Central"));
		}
	}

	function validate_ln_required_fields(&$form, &$form_state) {
		if(!empty($form_state['values'] && isset($form_state['values']['LN_opt_in']) && !$form_state['values']['LN_opt_in'])) {
			return;
		}
		$community_user_type_response = $form_state['values']['profile_literacy_network']['field_community_user_type']['und'];
		$selected_tids = [];
		foreach($community_user_type_response as $pos => $item) {
			$selected_tids[] = $item['tid'];
		}

		// Check that the required fields are set
		if(!array_filter($community_user_type_response[0])) { //Check if there are any user types in an array
			form_set_error('edit-profile-literacy-central-field-user-type', t("Please select a community user type for Literacy Network"));
		}

		if(in_array('959', $selected_tids)) { // Checks if Community user type has volunteer(id=959) selected
			if(!array_filter($form_state['values']['profile_literacy_network']['field_volunteer_interest']['und'][0])) { // Checks that a volunteer interest is selected.
				form_set_error('field_volunteer_interest', t("Please select a volunteer interest"));
			}
		}
		if($form_state['values']['profile_literacy_network']['field_has_legacy_id']['und'][0]['value'] == 1) {
			if(empty($form_state['values']['profile_literacy_network']['field_legacy_rif_id']['und'][0]['value'])) {
				form_set_error('field_legacy_rif_id', t("Please enter your legacy RIF ID"));
			}
		}

	}

	/* ****************************************
	 * 			Admin Content Page
	 * **************************************** */
	/**
	 * implements hook query alter to allow ordering by weight
	 * @param QueryAlterableInterface $query
	 */
	function rif_registration_query_node_admin_filter_alter(QueryAlterableInterface $query) {
		if(arg(0) == 'admin') {
			if(arg(1) == 'content') {
				if(arg(2) == '') {
					$node_types = array_keys(node_type_get_names());
					$filtered_node_types = array_filter($node_types, 'test_can_c_e_d');
					$query->condition('n.type',$filtered_node_types, 'IN');
				};
			}
		}
	}

	function test_can_c_e_d($var){
		//$can_create = node_access('create', $var);
		$can_update = node_access('update', $var);
		$can_delete = node_access('delete', $var);
		return ($can_update || $can_delete);
	}

	function rif_registration_form_node_admin_content_alter(&$form, &$form_state) {
		$node_types = node_type_get_names();
		$filtered_node_types = array_filter($node_types, 'test_can_c_e_d', ARRAY_FILTER_USE_KEY);
		$any_array = ['[any]' => t('any')];
		$type_options = array_merge($any_array, $filtered_node_types);
		$form['filter']['filters']['status']['filters']['type']['#options'] = $type_options;

		$bad_stati = ['promote-1' => '1', 'promote-0' => '2', 'sticky-1' => '3', 'sticky-0'=>'4'];
		$status_options = array_diff_key($form['filter']['filters']['status']['filters']['status']['#options'], $bad_stati);
		$form['filter']['filters']['status']['filters']['status']['#options'] = $status_options;
	}

	/* ****************************************
	 * 				Newsletter
	 * **************************************** */
	function rif_registration_sync_newsletter_validate(&$form, &$form_state) {
		$type = 'newsletter_signup';
		$query = new EntityFieldQuery;
		$result = $query
			->entityCondition('entity_type', 'node')
			->propertyCondition('status', 1)
			->propertyCondition('type', $type)
			->fieldCondition('field_email', 'value', $form_state['values']['field_email']['und'][0]['value'])
			->execute();

		if($result) {
				form_set_error('field_email', t("This email has already been used to sign up for the RIF newsletter."));
		}
	}

	function rif_registration_sync_newsletter(&$form, &$form_state) {
		$type = 'newsletter_signup';
		$query = new EntityFieldQuery;
		$result = $query
			->entityCondition('entity_type', 'node')
			->propertyCondition('status', 1)
			->propertyCondition('type', $type)
			->fieldCondition('field_email', 'value', $form_state['values']['mail'])
			->execute();

		if(sizeof($result) > 1) {
			watchdog('rif_registration', 'The email (%email) was found with %count occurrences.', array('%email' => $form_state['values']['mail'], '%count'=> sizeof($result)), WATCHDOG_ERROR);
		}

		if(sizeof($result) === 1) {
			//even if a user has more than one newsletter lets grab the first one.
			$newsletter_node_nid = array_values($result['node'])[0]->nid;
			$emw_node = entity_metadata_wrapper('node', $newsletter_node_nid);
		} else {
			// If no newsletter was found then:
			// Create an Entity.
			$node = entity_create('node', array('type' => 'newsletter_signup'));
			// Specify the author.
			$node->uid = $form_state['user']->uid;
			// Create a Entity Wrapper of that new Entity.
			$emw_node = entity_metadata_wrapper('node', $node);
			// Set a title
			$emw_node->title = 'newsletter_signup_from_registration';
			// And save it.
			$emw_node->save();

			$newsletter_node_nid = $emw_node->getIdentifier();
		}
		$emw_node->field_first_name->set($form_state['values']['field_first_name'][LANGUAGE_NONE][0]['value']);
		$emw_node->field_last_name->set($form_state['values']['field_last_name'][LANGUAGE_NONE][0]['value']);
		$emw_node->field_email->set($form_state['values']['mail']);
		$emw_node->field_get_rif_newsletter->set($form_state['values']['field_get_rif_newsletter']);
		/*$emw_node->field_get_lc_newsletter->set($form_state['values']['field_get_lc_newsletter']);
		$emw_node->field_get_ln_newsletter->set($form_state['values']['field_get_ln_newsletter']);*/
		$emw_node->save();
	}

	/* ****************************************
	 * 			LN User Type Forms
	 * **************************************** */

	function rif_registration_form_volunteer_entry_node_form_alter (&$form, &$form_state) {
		$form['add_volunteer_hours'] = array(
			'#type' => 'fieldset',
			'#title' => t('Add Volunteer Hours'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 18,
		);

		$form['add_volunteer_hours']['field_volunteer_date'] = $form['field_volunteer_date'];
		$form['add_volunteer_hours']['field_volunteer_description'] = $form['field_volunteer_description'];
		$form['add_volunteer_hours']['field_volunteer_location'] = $form['field_volunteer_location'];
		$form['add_volunteer_hours']['field_volunteer_hours'] = $form['field_volunteer_hours'];

		unset($form['field_volunteer_date']);
		unset($form['field_volunteer_description']);
		unset($form['field_volunteer_location']);
		unset($form['field_volunteer_hours']);

		$form['actions']['submit']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);
	}

	function rif_registration_form_rif_of_node_form_alter(&$form, &$form_state) {
		// Set the other type for Site Type
		$form['key_contact'] = array(
			'#type' => 'fieldset',
			'#title' => t('Key Contact Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 18,
		);
		$form['key_contact']['field_first_name'] = $form['field_first_name'];
		$form['key_contact']['field_last_name'] = $form['field_last_name'];
		$form['key_contact']['field_key_contact_phone_number'] = $form['field_key_contact_phone_number'];
		$form['key_contact']['field_key_contact_email'] = $form['field_key_contact_email'];

		$form['key_contact']['field_first_name']['#weight'] = 1;
		$form['key_contact']['field_last_name']['#weight'] = 2;
		$form['key_contact']['field_key_contact_phone_number']['#weight'] = 3;
		$form['key_contact']['field_key_contact_email']['#weight'] = 4;

		unset($form['field_first_name']);
		unset($form['field_last_name']);
		unset($form['field_key_contact_phone_number']);
		unset($form['field_key_contact_email']);

		$form['site_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Site Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 19,
		);
		$form['site_information']['field_site_name'] = $form['field_site_name'];
		$form['site_information']['field_site_phone_number'] = $form['field_site_phone_number'];
		$form['site_information']['field_site_email'] = $form['field_site_email'];
		$form['site_information']['field_address_line_1'] = $form['field_address_line_1'];
		$form['site_information']['field_address_line_2'] = $form['field_address_line_2'];
		$form['site_information']['field_city'] = $form['field_city'];
		$form['site_information']['field_state'] = $form['field_state'];
		$form['site_information']['field_zip'] = $form['field_zip'];
		$form['site_information']['field_multi_site_type'] = $form['field_multi_site_type'];
		$form['site_information']['field_site_type_other'] = $form['field_site_type_other'];
		$form['site_information']['field_site_type_other'] += array(
			'#states' => array(
				'visible' => array(
					array(
						':input[name="field_multi_site_type[und][Other]"]' => array('checked' => TRUE),
					),
				),
			),
		);
		$form['site_information']['field_multi_site_time_frame'] = $form['field_multi_site_time_frame'];
		$form['site_information']['field_multi_site_geographic'] = $form['field_multi_site_geographic'];
		$form['site_information']['field_title_one_school'] = $form['field_title_one_school'];

		$form['site_information']['field_site_name']['#weight'] = 1;
		$form['site_information']['field_site_phone_number']['#weight'] = 2;
		$form['site_information']['field_site_email']['#weight'] = 3;
		$form['site_information']['field_address_line_1']['#weight'] = 5;
		$form['site_information']['field_address_line_2']['#weight'] = 6;
		$form['site_information']['field_city']['#weight'] = 7;
		$form['site_information']['field_state']['#weight'] = 8;
		$form['site_information']['field_zip']['#weight'] = 9;
		$form['site_information']['field_site_type']['#weight'] = 12;
		$form['site_information']['field_site_type_other']['#weight'] = 13;
		$form['site_information']['field_multi_site_time_frame']['#weight'] = 14;
		$form['site_information']['field_multi_site_geographic']['#weight'] = 15;
		$form['site_information']['field_title_one_school']['#weight'] = 16;

		unset($form['field_site_name']);
		unset($form['field_address_line_1']);
		unset($form['field_address_line_2']);
		unset($form['field_city']);
		unset($form['field_state']);
		unset($form['field_zip']);
		unset($form['field_site_phone_number']);
		unset($form['field_site_email']);
		unset($form['field_multi_site_type']);
		unset($form['field_site_type_other']);
		unset($form['field_multi_site_time_frame']);
		unset($form['field_multi_site_geographic']);
		unset($form['field_title_one_school']);
		unset($form['field_associated_sites']);

		$form['childrens_demographics'] = array(
			'#type' => 'fieldset',
			'#title' => t('Demographic Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 20,
		);
		$form['childrens_demographics']['age_specs'] = array(
			'#type' => 'fieldset',
			'#title' => t('Age'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9">The total percentages should equal 100%.  If there is a category(s) that does not apply to your site, please enter a 0.</span>',
				'#weight' => 100,
			),
		);
		$form['childrens_demographics']['language_specs'] = array(
			'#type' => 'fieldset',
			'#title' => t('Language'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9">The total percentages should equal 100%.  If there is a category(s) that does not apply to your site, please enter a 0.</span>',
				'#weight' => 100,
			),
		);
		$form['childrens_demographics']['ethnicity_details'] = array(
			'#type' => 'fieldset',
			'#title' => t('Ethnicity'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9">The total percentages should equal 100%.  If there is a category(s) that does not apply to your site, please enter a 0.</span>',
				'#weight' => 100,
			),
		);
		$form['childrens_demographics']['grade'] = array(
			'#type' => 'fieldset',
			'#title' => t('Grade'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'#weight' => 10,
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9"></span>',
				'#weight' => 100,
			),
		);

		$form['childrens_demographics']['field_overall_number_of_children'] = $form['field_overall_number_of_children'];
		$form['childrens_demographics']['age_specs']['field_age_0_2'] = $form['field_age_0_2'];
		$form['childrens_demographics']['age_specs']['field_age_3_5'] = $form['field_age_3_5'];
		$form['childrens_demographics']['age_specs']['field_age_6_8'] = $form['field_age_6_8'];
		$form['childrens_demographics']['age_specs']['field_age_9_11'] = $form['field_age_9_11'];
		$form['childrens_demographics']['age_specs']['field_age_12_14'] = $form['field_age_12_14'];
		$form['childrens_demographics']['age_specs']['field_age_15_'] = $form['field_age_15_'];
		$form['childrens_demographics']['grade']['field_grades_served'] = $form['field_grades_served'];
		$form['childrens_demographics']['language_specs']['field_primary_language'] = $form['field_primary_language'];
		$form['childrens_demographics']['language_specs']['field_primary_language_percentag'] = $form['field_primary_language_percentag'];
		$form['childrens_demographics']['language_specs']['divider_line_1'] = array('#markup'=>'<div class="divider-line"></div>');
		$form['childrens_demographics']['language_specs']['field_secondary_language'] = $form['field_secondary_language'];
		$form['childrens_demographics']['language_specs']['field_secondary_language_percent'] = $form['field_secondary_language_percent'];
		$form['childrens_demographics']['language_specs']['divider_line_2'] = array('#markup'=>'<div class="divider-line"></div>');
		$form['childrens_demographics']['language_specs']['field_other_language_1'] = $form['field_other_language_1'];
		$form['childrens_demographics']['language_specs']['field_other_language_1_percentag'] = $form['field_other_language_1_percentag'];
		$form['childrens_demographics']['language_specs']['divider_line_3'] = array('#markup'=>'<div class="divider-line"></div>');
		$form['childrens_demographics']['language_specs']['field_other_language_2'] = $form['field_other_language_2'];
		$form['childrens_demographics']['language_specs']['field_other_language_2_percentag'] = $form['field_other_language_2_percentag'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_caucasian'] = $form['field_ethnicity_caucasian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_black'] = $form['field_ethnicity_black'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_hispanic'] = $form['field_ethnicity_hispanic'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_american_indian'] = $form['field_ethnicity_american_indian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_asian'] = $form['field_ethnicity_asian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_native_hawaiian'] = $form['field_ethnicity_native_hawaiian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_other'] = $form['field_ethnicity_other'];

		// Weights:
		$form['childrens_demographics']['field_overall_number_of_children']['#weight'] = 0;
		$form['childrens_demographics']['age_specs']['#weight'] = 2;
		$form['childrens_demographics']['grade']['#weight'] = 3;
		$form['childrens_demographics']['language_specs']['#weight'] = 4;
		$form['childrens_demographics']['ethnicity_details']['#weight'] = 5;

		$form['childrens_demographics']['language_specs']['field_primary_language']['#weight'] = 1;
		$form['childrens_demographics']['language_specs']['field_primary_language_percentag']['#weight'] = 2;
		$form['childrens_demographics']['language_specs']['divider_line_1']['#weight'] = 3;
		$form['childrens_demographics']['language_specs']['field_secondary_language']['#weight'] = 4;
		$form['childrens_demographics']['language_specs']['field_secondary_language_percent']['#weight'] = 5;
		$form['childrens_demographics']['language_specs']['divider_line_2']['#weight'] = 6;
		$form['childrens_demographics']['language_specs']['field_other_language_1']['#weight'] = 7;
		$form['childrens_demographics']['language_specs']['field_other_language_1_percentag']['#weight'] = 8;
		$form['childrens_demographics']['language_specs']['divider_line_3']['#weight'] = 9;
		$form['childrens_demographics']['language_specs']['field_other_language_2']['#weight'] = 10;
		$form['childrens_demographics']['language_specs']['field_other_language_2_percentag']['#weight'] = 11;

		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_caucasian']['#weight'] = 0;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_black']['#weight'] = 1;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_hispanic']['#weight'] = 2;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_american_indian']['#weight'] = 3;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_asian']['#weight'] = 4;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_native_hawaiian']['#weight'] = 5;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_other']['#weight'] = 6;

		unset($form['field_overall_number_of_children']);
		unset($form['field_age_0_2']);
		unset($form['field_age_3_5']);
		unset($form['field_age_6_8']);
		unset($form['field_age_9_11']);
		unset($form['field_age_12_14']);
		unset($form['field_age_15_']);
		unset($form['field_secondary_language_percent']);
		unset($form['field_grades_served']);
		unset($form['field_primary_language']);
		unset($form['field_primary_language_percentag']);
		unset($form['field_secondary_language']);
		unset($form['field_secondary_language_percent']);
		unset($form['field_other_language_1']);
		unset($form['field_other_language_1_percentag']);
		unset($form['field_other_language_2']);
		unset($form['field_other_language_2_percentag']);
		unset($form['field_ethnicity_caucasian']);
		unset($form['field_ethnicity_black']);
		unset($form['field_ethnicity_hispanic']);
		unset($form['field_ethnicity_american_indian']);
		unset($form['field_ethnicity_asian']);
		unset($form['field_ethnicity_native_hawaiian']);
		unset($form['field_ethnicity_other']);

		$form['additional_site_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Additional Site Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 21,
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9"></span>',
				'#weight' => 100,
			),
		);
		$form['additional_site_information']['field_special_needs'] = $form['field_special_needs'];
		$form['additional_site_information']['field_special_needs_other'] = $form['field_special_needs_other'];
		$form['additional_site_information']['field_special_needs_other']['#states'] = array(
			'visible' => array(
				array(
				':input[name="field_special_needs[und][Other]"]' => array('checked' => TRUE)),
			),
		);
		$form['additional_site_information']['field_children_ell'] = $form['field_children_ell'];
		$form['additional_site_information']['field_percentage_frp'] = $form['field_percentage_frp'];

		$form['additional_site_information']['field_risk_factors']['#weight'] = 1;
		$form['additional_site_information']['field_special_needs']['#weight'] = 2;
		$form['additional_site_information']['field_special_needs_other']['#weight'] = 3;
		$form['additional_site_information']['field_children_ell']['#weight'] = 4;
		$form['additional_site_information']['field_percentage_frp']['#weight'] = 5;

		unset($form['field_risk_factors']);
		unset($form['field_special_needs']);
		unset($form['field_special_needs_other']);
		unset($form['field_children_ell']);
		unset($form['field_percentage_frp']);

		$form['annual_fundraising'] = array(
			'#type' => 'fieldset',
			'#title' => t('Annual Funding Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 22,
		);
		$form['annual_fundraising']['field_local_fundraising'] = $form['field_local_fundraising'];
		$form['annual_fundraising']['field_funding_source'] = $form['field_funding_source'];
		$form['annual_fundraising']['field_literacy_supported_activit'] = $form['field_literacy_supported_activit'];

		$form['annual_fundraising']['field_local_fundraising']['#weight'] = 1;
		$form['annual_fundraising']['field_funding_source']['#weight'] = 2;
		$form['annual_fundraising']['field_literacy_supported_activit']['#weight'] = 4;

		unset($form['field_local_fundraising']);
		unset($form['field_funding_source']);
		unset($form['field_literacy_supported_activit']);

		$form['volunteer_support_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Volunteer and Support Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 23,
		);
		$form['volunteer_support_information']['field_local_partner_orgs'] = $form['field_local_partner_orgs'];
		$form['volunteer_support_information']['field_number_volunteers'] = $form['field_number_volunteers'];
		$form['volunteer_support_information']['field_volunteer_match'] = $form['field_volunteer_match'];
		$form['volunteer_support_information']['field_volunteers_needed'] = $form['field_volunteers_needed'];
		$form['volunteer_support_information']['field_type_of_support_needed'] = $form['field_type_of_support_needed'];
		$form['volunteer_support_information']['field_type_of_support_needed']['#states'] = array(
			'visible' => array(
				array(
					':input[name="field_volunteers_needed[und]"]' => array('value' => 1),
				),
			),
		);
		$form['volunteer_support_information']['field_type_of_support_other'] = $form['field_type_of_support_other'];
		$form['volunteer_support_information']['field_type_of_support_other']['#states'] = array(
			'visible' => array(
				array(
					':input[name="field_type_of_support_needed[und][Other]"]' => array('checked' => TRUE),
					':input[name="field_volunteers_needed[und]"]' => array('value' => 1),
				),
			),
		);

		$form['volunteer_support_information']['field_local_partner_orgs']['#weight'] = 1;
		$form['volunteer_support_information']['field_number_volunteers']['#weight'] = 2;
		$form['volunteer_support_information']['field_volunteer_match']['#weight'] = 3;
		$form['volunteer_support_information']['field_volunteers_needed']['#weight'] = 4;
		$form['volunteer_support_information']['field_type_of_support_needed']['#weight'] = 5;
		$form['volunteer_support_information']['field_type_of_support_other']['#weight'] = 6;

		unset($form['field_local_partner_orgs']);
		unset($form['field_number_volunteers']);
		unset($form['field_volunteers_needed']);
		unset($form['field_volunteer_match']);
		unset($form['field_type_of_support_needed']);
		unset($form['field_type_of_support_other']);

		$form['actions']['delete']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);
		$form['actions']['submit']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);

		wrap_container_around_form($form, $form_state);
	}

	function rif_registration_form_multi_site_profile_node_form_alter(&$form, &$form_state) {

		$form['key_contact'] = array(
			'#type' => 'fieldset',
			'#title' => t('Key Contact Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 18,
		);
		$form['key_contact']['field_first_name'] = $form['field_first_name'];
		$form['key_contact']['field_last_name'] = $form['field_last_name'];
		$form['key_contact']['field_key_contact_phone_number'] = $form['field_key_contact_phone_number'];
		$form['key_contact']['field_key_contact_email'] = $form['field_key_contact_email'];

		$form['key_contact']['field_first_name']['#weight'] = 1;
		$form['key_contact']['field_last_name']['#weight'] = 2;
		$form['key_contact']['field_key_contact_phone_number']['#weight'] = 3;
		$form['key_contact']['field_key_contact_email']['#weight'] = 4;

		unset($form['field_first_name']);
		unset($form['field_last_name']);
		unset($form['field_key_contact_phone_number']);
		unset($form['field_key_contact_email']);

		$form['site_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Site Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 19,
		);
		$form['site_information']['field_site_name'] = $form['field_site_name'];
		$form['site_information']['field_site_phone_number'] = $form['field_site_phone_number'];
		$form['site_information']['field_site_email'] = $form['field_site_email'];
		$form['site_information']['field_address_line_1'] = $form['field_address_line_1'];
		$form['site_information']['field_address_line_2'] = $form['field_address_line_2'];
		$form['site_information']['field_city'] = $form['field_city'];
		$form['site_information']['field_state'] = $form['field_state'];
		$form['site_information']['field_zip'] = $form['field_zip'];
		$form['site_information']['field_multi_site_type'] = $form['field_multi_site_type'];
		$form['site_information']['field_site_type_other'] = $form['field_site_type_other'];
		$form['site_information']['field_site_type_other'] += array(
			'#states' => array(
				'visible' => array(
					array(
						':input[name="field_multi_site_type[und][Other]"]' => array('checked' => TRUE),
					),
				),
			),
		);
		$form['site_information']['field_multi_site_time_frame'] = $form['field_multi_site_time_frame'];
		$form['site_information']['field_multi_site_geographic'] = $form['field_multi_site_geographic'];
		$form['site_information']['field_title_one_school'] = $form['field_title_one_school'];
		//$form['site_information']['field_associated_sites'] = $form['field_associated_sites'];

		$form['site_information']['field_site_name']['#weight'] = 1;
		$form['site_information']['field_site_phone_number']['#weight'] = 2;
		$form['site_information']['field_site_email']['#weight'] = 3;
		$form['site_information']['field_address_line_1']['#weight'] = 5;
		$form['site_information']['field_address_line_2']['#weight'] = 6;
		$form['site_information']['field_city']['#weight'] = 7;
		$form['site_information']['field_state']['#weight'] = 8;
		$form['site_information']['field_zip']['#weight'] = 9;
		$form['site_information']['field_site_type']['#weight'] = 12;
		$form['site_information']['field_site_type_other']['#weight'] = 13;
		$form['site_information']['field_multi_site_time_frame']['#weight'] = 14;
		$form['site_information']['field_multi_site_geographic']['#weight'] = 15;
		$form['site_information']['field_title_one_school']['#weight'] = 16;
		//$form['site_information']['field_associated_sites']['#weight'] = 17;

		unset($form['field_site_name']);
		unset($form['field_address_line_1']);
		unset($form['field_address_line_2']);
		unset($form['field_city']);
		unset($form['field_state']);
		unset($form['field_zip']);
		unset($form['field_site_phone_number']);
		unset($form['field_site_email']);
		unset($form['field_multi_site_type']);
		unset($form['field_site_type_other']);
		unset($form['field_multi_site_time_frame']);
		unset($form['field_multi_site_geographic']);
		unset($form['field_title_one_school']);
		unset($form['field_associated_sites']);

		$form['childrens_demographics'] = array(
			'#type' => 'fieldset',
			'#title' => t('Demographic Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 21,
		);
		$form['childrens_demographics']['age_specs'] = array(
			'#type' => 'fieldset',
			'#title' => t('Age'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9">The total percentages should equal 100%.  If there is a category(s) that does not apply to your site, please enter a 0.</span>',
				'#weight' => 100,
			),
		);
		$form['childrens_demographics']['language_specs'] = array(
			'#type' => 'fieldset',
			'#title' => t('Language'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9">The total percentages should equal 100%.  If there is a category(s) that does not apply to your site, please enter a 0.</span>',
				'#weight' => 100,
			),
		);
		$form['childrens_demographics']['ethnicity_details'] = array(
			'#type' => 'fieldset',
			'#title' => t('Ethnicity'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9">The total percentages should equal 100%.  If there is a category(s) that does not apply to your site, please enter a 0.</span>',
				'#weight' => 100,
			),
		);
		$form['childrens_demographics']['grade'] = array(
			'#type' => 'fieldset',
			'#title' => t('Grade'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'#weight' => 10,
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9"></span>',
				'#weight' => 100,
			),
		);

		$form['childrens_demographics']['field_overall_number_of_children'] = $form['field_overall_number_of_children'];
		$form['childrens_demographics']['age_specs']['field_age_0_2'] = $form['field_age_0_2'];
		$form['childrens_demographics']['age_specs']['field_age_3_5'] = $form['field_age_3_5'];
		$form['childrens_demographics']['age_specs']['field_age_6_8'] = $form['field_age_6_8'];
		$form['childrens_demographics']['age_specs']['field_age_9_11'] = $form['field_age_9_11'];
		$form['childrens_demographics']['age_specs']['field_age_12_14'] = $form['field_age_12_14'];
		$form['childrens_demographics']['age_specs']['field_age_15_'] = $form['field_age_15_'];
		$form['childrens_demographics']['grade']['field_grades_served'] = $form['field_grades_served'];
		$form['childrens_demographics']['language_specs']['field_primary_language'] = $form['field_primary_language'];
		$form['childrens_demographics']['language_specs']['field_primary_language_percentag'] = $form['field_primary_language_percentag'];
		$form['childrens_demographics']['language_specs']['divider_line_1'] = array('#markup'=>'<div class="divider-line"></div>');
		$form['childrens_demographics']['language_specs']['field_secondary_language'] = $form['field_secondary_language'];
		$form['childrens_demographics']['language_specs']['field_secondary_language_percent'] = $form['field_secondary_language_percent'];
		$form['childrens_demographics']['language_specs']['divider_line_2'] = array('#markup'=>'<div class="divider-line"></div>');
		$form['childrens_demographics']['language_specs']['field_other_language_1'] = $form['field_other_language_1'];
		$form['childrens_demographics']['language_specs']['field_other_language_1_percentag'] = $form['field_other_language_1_percentag'];
		$form['childrens_demographics']['language_specs']['divider_line_3'] = array('#markup'=>'<div class="divider-line"></div>');
		$form['childrens_demographics']['language_specs']['field_other_language_2'] = $form['field_other_language_2'];
		$form['childrens_demographics']['language_specs']['field_other_language_2_percentag'] = $form['field_other_language_2_percentag'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_caucasian'] = $form['field_ethnicity_caucasian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_black'] = $form['field_ethnicity_black'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_hispanic'] = $form['field_ethnicity_hispanic'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_american_indian'] = $form['field_ethnicity_american_indian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_asian'] = $form['field_ethnicity_asian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_native_hawaiian'] = $form['field_ethnicity_native_hawaiian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_other'] = $form['field_ethnicity_other'];

		// Weights:
		$form['childrens_demographics']['field_overall_number_of_children']['#weight'] = 0;
		$form['childrens_demographics']['age_specs']['#weight'] = 2;
		$form['childrens_demographics']['grade']['#weight'] = 3;
		$form['childrens_demographics']['language_specs']['#weight'] = 4;
		$form['childrens_demographics']['ethnicity_details']['#weight'] = 5;

		$form['childrens_demographics']['language_specs']['field_primary_language']['#weight'] = 1;
		$form['childrens_demographics']['language_specs']['field_primary_language_percentag']['#weight'] = 2;
		$form['childrens_demographics']['language_specs']['divider_line_1']['#weight'] = 3;
		$form['childrens_demographics']['language_specs']['field_secondary_language']['#weight'] = 4;
		$form['childrens_demographics']['language_specs']['field_secondary_language_percent']['#weight'] = 5;
		$form['childrens_demographics']['language_specs']['divider_line_2']['#weight'] = 6;
		$form['childrens_demographics']['language_specs']['field_other_language_1']['#weight'] = 7;
		$form['childrens_demographics']['language_specs']['field_other_language_1_percentag']['#weight'] = 8;
		$form['childrens_demographics']['language_specs']['divider_line_3']['#weight'] = 9;
		$form['childrens_demographics']['language_specs']['field_other_language_2']['#weight'] = 10;
		$form['childrens_demographics']['language_specs']['field_other_language_2_percentag']['#weight'] = 11;

		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_caucasian']['#weight'] = 0;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_black']['#weight'] = 1;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_hispanic']['#weight'] = 2;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_american_indian']['#weight'] = 3;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_asian']['#weight'] = 4;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_native_hawaiian']['#weight'] = 5;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_other']['#weight'] = 6;

		unset($form['field_overall_number_of_children']);
		unset($form['field_age_0_2']);
		unset($form['field_age_3_5']);
		unset($form['field_age_6_8']);
		unset($form['field_age_9_11']);
		unset($form['field_age_12_14']);
		unset($form['field_age_15_']);
		unset($form['field_secondary_language_percent']);
		unset($form['field_grades_served']);
		unset($form['field_primary_language']);
		unset($form['field_primary_language_percentag']);
		unset($form['field_secondary_language']);
		unset($form['field_secondary_language_percent']);
		unset($form['field_other_language_1']);
		unset($form['field_other_language_1_percentag']);
		unset($form['field_other_language_2']);
		unset($form['field_other_language_2_percentag']);
		unset($form['field_ethnicity_caucasian']);
		unset($form['field_ethnicity_black']);
		unset($form['field_ethnicity_hispanic']);
		unset($form['field_ethnicity_american_indian']);
		unset($form['field_ethnicity_asian']);
		unset($form['field_ethnicity_native_hawaiian']);
		unset($form['field_ethnicity_other']);

		$form['additional_site_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Additional Site Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 22,
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9"></span>',
				'#weight' => 100,
			),
		);
		$form['additional_site_information']['field_special_needs'] = $form['field_special_needs'];
		$form['additional_site_information']['field_special_needs_other'] = $form['field_special_needs_other'];
		$form['additional_site_information']['field_special_needs_other']['#states'] = array(
			'visible' => array(
				array(
				':input[name="field_special_needs[und][Other]"]' => array('checked' => TRUE)),
			),
		);
		$form['additional_site_information']['field_children_ell'] = $form['field_children_ell'];
		$form['additional_site_information']['field_percentage_frp'] = $form['field_percentage_frp'];

		$form['additional_site_information']['field_risk_factors']['#weight'] = 1;
		$form['additional_site_information']['field_special_needs']['#weight'] = 2;
		$form['additional_site_information']['field_special_needs_other']['#weight'] = 3;
		$form['additional_site_information']['field_children_ell']['#weight'] = 4;
		$form['additional_site_information']['field_percentage_frp']['#weight'] = 5;

		unset($form['field_risk_factors']);
		unset($form['field_special_needs']);
		unset($form['field_special_needs_other']);
		unset($form['field_children_ell']);
		unset($form['field_percentage_frp']);

		$form['annual_fundraising'] = array(
			'#type' => 'fieldset',
			'#title' => t('Annual Funding Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 23,
		);
		$form['annual_fundraising']['field_local_fundraising'] = $form['field_local_fundraising'];
		$form['annual_fundraising']['field_funding_source'] = $form['field_funding_source'];
		$form['annual_fundraising']['field_literacy_supported_activit'] = $form['field_literacy_supported_activit'];

		$form['annual_fundraising']['field_local_fundraising']['#weight'] = 1;
		$form['annual_fundraising']['field_funding_source']['#weight'] = 2;
		$form['annual_fundraising']['field_literacy_supported_activit']['#weight'] = 4;

		unset($form['field_local_fundraising']);
		unset($form['field_funding_source']);
		unset($form['field_literacy_supported_activit']);

		$form['volunteer_support_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Volunteer and Support Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 24,
		);
		$form['volunteer_support_information']['field_local_partner_orgs'] = $form['field_local_partner_orgs'];
		$form['volunteer_support_information']['field_number_volunteers'] = $form['field_number_volunteers'];
		$form['volunteer_support_information']['field_volunteer_match'] = $form['field_volunteer_match'];
		$form['volunteer_support_information']['field_volunteers_needed'] = $form['field_volunteers_needed'];
		$form['volunteer_support_information']['field_type_of_support_needed'] = $form['field_type_of_support_needed'];
		$form['volunteer_support_information']['field_type_of_support_needed']['#states'] = array(
			'visible' => array(
				array(
					':input[name="field_volunteers_needed[und]"]' => array('value' => 1),
				),
			),
		);
		$form['volunteer_support_information']['field_type_of_support_other'] = $form['field_type_of_support_other'];
		$form['volunteer_support_information']['field_type_of_support_other']['#states'] = array(
			'visible' => array(
				array(
					':input[name="field_type_of_support_needed[und][Other]"]' => array('checked' => TRUE),
					':input[name="field_volunteers_needed[und]"]' => array('value' => 1),
				),
			),
		);

		$form['volunteer_support_information']['field_local_partner_orgs']['#weight'] = 1;
		$form['volunteer_support_information']['field_number_volunteers']['#weight'] = 2;
		$form['volunteer_support_information']['field_volunteer_match']['#weight'] = 3;
		$form['volunteer_support_information']['field_volunteers_needed']['#weight'] = 4;
		$form['volunteer_support_information']['field_type_of_support_needed']['#weight'] = 5;
		$form['volunteer_support_information']['field_type_of_support_other']['#weight'] = 6;

		unset($form['field_local_partner_orgs']);
		unset($form['field_number_volunteers']);
		unset($form['field_volunteers_needed']);
		unset($form['field_volunteer_match']);
		unset($form['field_type_of_support_needed']);
		unset($form['field_type_of_support_other']);

		$form['actions']['delete']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);
		$form['actions']['submit']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);

		wrap_container_around_form($form, $form_state);
	}

	function rif_registration_form_partnership_profile_node_form_alter(&$form, &$form_state) {
		$form['key_contact'] = array(
			'#type' => 'fieldset',
			'#title' => t('Key Contact Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 18,
		);
		$form['key_contact']['field_first_name'] = $form['field_first_name'];
		$form['key_contact']['field_last_name'] = $form['field_last_name'];
		$form['key_contact']['field_key_contact_phone_number'] = $form['field_key_contact_phone_number'];
		$form['key_contact']['field_key_contact_email'] = $form['field_key_contact_email'];

		$form['key_contact']['field_first_name']['#weight'] = 1;
		$form['key_contact']['field_last_name']['#weight'] = 2;
		$form['key_contact']['field_key_contact_phone_number']['#weight'] = 3;
		$form['key_contact']['field_key_contact_email']['#weight'] = 4;

		unset($form['field_first_name']);
		unset($form['field_last_name']);
		unset($form['field_key_contact_phone_number']);
		unset($form['field_key_contact_email']);

		$form['organization_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Organization Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 19,
		);
		$form['organization_information']['field_organization_name'] = $form['field_organization_name'];
		$form['organization_information']['field_phone_number'] = $form['field_phone_number'];
		$form['organization_information']['field_email'] = $form['field_email'];
		$form['organization_information']['field_address_line_1'] = $form['field_address_line_1'];
		$form['organization_information']['field_address_line_2'] = $form['field_address_line_2'];
		$form['organization_information']['field_city'] = $form['field_city'];
		$form['organization_information']['field_state'] = $form['field_state'];
		$form['organization_information']['field_zip'] = $form['field_zip'];

		$form['organization_information']['field_organization_name']['#weight'] = 1;
		$form['organization_information']['field_phone_number']['#weight'] = 2;
		$form['organization_information']['field_email']['#weight'] = 3;
		$form['organization_information']['field_address_line_1']['#weight'] = 5;
		$form['organization_information']['field_address_line_2']['#weight'] = 6;
		$form['organization_information']['field_city']['#weight'] = 7;
		$form['organization_information']['field_state']['#weight'] = 8;
		$form['organization_information']['field_zip']['#weight'] = 9;

		unset($form['field_organization_name']);
		unset($form['field_address_line_1']);
		unset($form['field_address_line_2']);
		unset($form['field_city']);
		unset($form['field_state']);
		unset($form['field_zip']);
		unset($form['field_phone_number']);
		unset($form['field_email']);

		$form['literacy_related_activities'] = array(
			'#type' => 'fieldset',
			'#title' => t('Literacy-Related Activities'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 23,
		);
		$form['literacy_related_activities']['field_literacy_supported_activit'] = $form['field_literacy_supported_activit'];
		$form['literacy_related_activities']['field_local_partner_orgs'] = $form['field_local_partner_orgs'];
		$form['literacy_related_activities']['field_utilize_volunteers'] = $form['field_utilize_volunteers'];
		$form['literacy_related_activities']['field_number_volunteers'] = $form['field_number_volunteers'];
		$form['literacy_related_activities']['field_number_volunteers']['#states'] = array(
			'visible' => array(
				array(
					':input[name="field_utilize_volunteers[und]"]' => array('value' => 1),
				),
			),
		);

		$form['literacy_related_activities']['field_literacy_supported_activit']['#weight'] = 1;
		$form['literacy_related_activities']['field_local_partner_orgs']['#weight']  = 2;
		$form['literacy_related_activities']['field_utilize_volunteers']['#weight'] = 3;
		$form['literacy_related_activities']['field_number_volunteers']['#weight'] = 4;

		unset($form['field_literacy_supported_activit']);
		unset($form['field_local_partner_orgs']);
		unset($form['field_utilize_volunteers']);
		unset($form['field_number_volunteers']);

		$form['actions']['delete']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);
		$form['actions']['submit']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);

		wrap_container_around_form($form, $form_state);
	}

	function rif_registration_form_site_profile_node_form_alter(&$form, &$form_state) {

		global $user;
		$admin_role = user_role_load_by_name('RIF Admin');
		$has_admin_role = user_has_role($admin_role->rid);
		if(!$has_admin_role) {
			$form['field_grant_award_pdf']['#type'] = 'hidden';
			$form['field_bfo_tracking']['#type']    = 'hidden';
			$form['field_rfs_tracking']['#type']    = 'hidden';
		};

		// Set the other type for Site Type
		$form['key_contact'] = array(
			'#type' => 'fieldset',
			'#title' => t('Key Contact Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 18,
		);
		$form['key_contact']['field_first_name'] = $form['field_first_name'];
		$form['key_contact']['field_last_name'] = $form['field_last_name'];
		$form['key_contact']['field_key_contact_phone_number'] = $form['field_key_contact_phone_number'];
		$form['key_contact']['field_key_contact_email'] = $form['field_key_contact_email'];

		$form['key_contact']['field_first_name']['#weight'] = 1;
		$form['key_contact']['field_last_name']['#weight'] = 2;
		$form['key_contact']['field_key_contact_phone_number']['#weight'] = 3;
		$form['key_contact']['field_key_contact_email']['#weight'] = 4;

		unset($form['field_first_name']);
		unset($form['field_last_name']);
		unset($form['field_key_contact_phone_number']);
		unset($form['field_key_contact_email']);

		$form['site_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Site Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 19,
		);
		$form['site_information']['field_site_name'] = $form['field_site_name'];
		$form['site_information']['field_site_phone_number'] = $form['field_site_phone_number'];
		$form['site_information']['field_site_email'] = $form['field_site_email'];
		$form['site_information']['field_address_line_1'] = $form['field_address_line_1'];
		$form['site_information']['field_address_line_2'] = $form['field_address_line_2'];
		$form['site_information']['field_city'] = $form['field_city'];
		$form['site_information']['field_state'] = $form['field_state'];
		$form['site_information']['field_zip'] = $form['field_zip'];
		$form['site_information']['field_site_type'] = $form['field_site_type'];
		$form['site_information']['field_site_type_other'] = $form['field_site_type_other'];
		$form['site_information']['field_site_type_other'] += array(
			'#states' => array(
				'visible' => array(
					array(
						':input[name="field_site_type[und][4656]"]' => array('checked' => TRUE),
					),
				),
			),
		);
		$form['site_information']['field_time_frame'] = $form['field_time_frame'];
		$form['site_information']['field_geographic_classification'] = $form['field_geographic_classification'];
		$form['site_information']['field_title_one_school'] = $form['field_title_one_school'];

		$form['site_information']['field_site_name']['#weight'] = 1;
		$form['site_information']['field_site_phone_number']['#weight'] = 2;
		$form['site_information']['field_site_email']['#weight'] = 3;
		$form['site_information']['field_address_line_1']['#weight'] = 5;
		$form['site_information']['field_address_line_2']['#weight'] = 6;
		$form['site_information']['field_city']['#weight'] = 7;
		$form['site_information']['field_state']['#weight'] = 8;
		$form['site_information']['field_zip']['#weight'] = 9;
		$form['site_information']['field_site_type']['#weight'] = 12;
		$form['site_information']['field_site_type_other']['#weight'] = 13;
		$form['site_information']['field_time_frame']['#weight'] = 14;
		$form['site_information']['field_geographic_classification']['#weight'] = 15;
		$form['site_information']['field_title_one_school']['#weight'] = 16;

		unset($form['field_site_name']);
		unset($form['field_address_line_1']);
		unset($form['field_address_line_2']);
		unset($form['field_city']);
		unset($form['field_state']);
		unset($form['field_zip']);
		unset($form['field_site_phone_number']);
		unset($form['field_site_email']);
		unset($form['field_site_type']);
		unset($form['field_site_type_other']);
		unset($form['field_time_frame']);
		unset($form['field_geographic_classification']);
		unset($form['field_title_one_school']);

		$form['childrens_demographics'] = array(
			'#type' => 'fieldset',
			'#title' => t('Demographic Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 20,
		);
		$form['childrens_demographics']['age_specs'] = array(
			'#type' => 'fieldset',
			'#title' => t('Age'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9">The total percentages should equal 100%.  If there is a category(s) that does not apply to your site, please enter a 0.</span>',
				'#weight' => 100,
			),
		);
		$form['childrens_demographics']['language_specs'] = array(
			'#type' => 'fieldset',
			'#title' => t('Language'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9">The total percentages should equal 100%.  If there is a category(s) that does not apply to your site, please enter a 0.</span>',
				'#weight' => 100,
			),
		);
		$form['childrens_demographics']['ethnicity_details'] = array(
			'#type' => 'fieldset',
			'#title' => t('Ethnicity'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9">The total percentages should equal 100%.  If there is a category(s) that does not apply to your site, please enter a 0.</span>',
				'#weight' => 100,
			),
		);
		$form['childrens_demographics']['grade'] = array(
			'#type' => 'fieldset',
			'#title' => t('Grade'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#attributes' => array('class' => array('sub-heading')),
			'#weight' => 10,
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9"></span>',
				'#weight' => 100,
			),
		);

		$form['childrens_demographics']['field_overall_number_of_children'] = $form['field_overall_number_of_children'];
		$form['childrens_demographics']['age_specs']['field_age_0_2'] = $form['field_age_0_2'];
		$form['childrens_demographics']['age_specs']['field_age_3_5'] = $form['field_age_3_5'];
		$form['childrens_demographics']['age_specs']['field_age_6_8'] = $form['field_age_6_8'];
		$form['childrens_demographics']['age_specs']['field_age_9_11'] = $form['field_age_9_11'];
		$form['childrens_demographics']['age_specs']['field_age_12_14'] = $form['field_age_12_14'];
		$form['childrens_demographics']['age_specs']['field_age_15_'] = $form['field_age_15_'];
		$form['childrens_demographics']['grade']['field_grades_served'] = $form['field_grades_served'];
		$form['childrens_demographics']['language_specs']['field_primary_language'] = $form['field_primary_language'];
		$form['childrens_demographics']['language_specs']['field_primary_language_percentag'] = $form['field_primary_language_percentag'];
		$form['childrens_demographics']['language_specs']['divider_line_1'] = array('#markup'=>'<div class="divider-line"></div>');
		$form['childrens_demographics']['language_specs']['field_secondary_language'] = $form['field_secondary_language'];
		$form['childrens_demographics']['language_specs']['field_secondary_language_percent'] = $form['field_secondary_language_percent'];
		$form['childrens_demographics']['language_specs']['divider_line_2'] = array('#markup'=>'<div class="divider-line"></div>');
		$form['childrens_demographics']['language_specs']['field_other_language_1'] = $form['field_other_language_1'];
		$form['childrens_demographics']['language_specs']['field_other_language_1_percentag'] = $form['field_other_language_1_percentag'];
		$form['childrens_demographics']['language_specs']['divider_line_3'] = array('#markup'=>'<div class="divider-line"></div>');
		$form['childrens_demographics']['language_specs']['field_other_language_2'] = $form['field_other_language_2'];
		$form['childrens_demographics']['language_specs']['field_other_language_2_percentag'] = $form['field_other_language_2_percentag'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_caucasian'] = $form['field_ethnicity_caucasian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_black'] = $form['field_ethnicity_black'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_hispanic'] = $form['field_ethnicity_hispanic'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_american_indian'] = $form['field_ethnicity_american_indian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_asian'] = $form['field_ethnicity_asian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_native_hawaiian'] = $form['field_ethnicity_native_hawaiian'];
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_other'] = $form['field_ethnicity_other'];

		// Weights:
		$form['childrens_demographics']['field_overall_number_of_children']['#weight'] = 0;
		$form['childrens_demographics']['age_specs']['#weight'] = 2;
		$form['childrens_demographics']['grade']['#weight'] = 3;
		$form['childrens_demographics']['language_specs']['#weight'] = 4;
		$form['childrens_demographics']['ethnicity_details']['#weight'] = 5;

		$form['childrens_demographics']['language_specs']['field_primary_language']['#weight'] = 1;
		$form['childrens_demographics']['language_specs']['field_primary_language_percentag']['#weight'] = 2;
		$form['childrens_demographics']['language_specs']['divider_line_1']['#weight'] = 3;
		$form['childrens_demographics']['language_specs']['field_secondary_language']['#weight'] = 4;
		$form['childrens_demographics']['language_specs']['field_secondary_language_percent']['#weight'] = 5;
		$form['childrens_demographics']['language_specs']['divider_line_2']['#weight'] = 6;
		$form['childrens_demographics']['language_specs']['field_other_language_1']['#weight'] = 7;
		$form['childrens_demographics']['language_specs']['field_other_language_1_percentag']['#weight'] = 8;
		$form['childrens_demographics']['language_specs']['divider_line_3']['#weight'] = 9;
		$form['childrens_demographics']['language_specs']['field_other_language_2']['#weight'] = 10;
		$form['childrens_demographics']['language_specs']['field_other_language_2_percentag']['#weight'] = 11;

		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_caucasian']['#weight'] = 0;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_black']['#weight'] = 1;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_hispanic']['#weight'] = 2;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_american_indian']['#weight'] = 3;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_asian']['#weight'] = 4;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_native_hawaiian']['#weight'] = 5;
		$form['childrens_demographics']['ethnicity_details']['field_ethnicity_other']['#weight'] = 6;

		unset($form['field_overall_number_of_children']);
		unset($form['field_age_0_2']);
		unset($form['field_age_3_5']);
		unset($form['field_age_6_8']);
		unset($form['field_age_9_11']);
		unset($form['field_age_12_14']);
		unset($form['field_age_15_']);
		unset($form['field_secondary_language_percent']);
		unset($form['field_grades_served']);
		unset($form['field_primary_language']);
		unset($form['field_primary_language_percentag']);
		unset($form['field_secondary_language']);
		unset($form['field_secondary_language_percent']);
		unset($form['field_other_language_1']);
		unset($form['field_other_language_1_percentag']);
		unset($form['field_other_language_2']);
		unset($form['field_other_language_2_percentag']);
		unset($form['field_ethnicity_caucasian']);
		unset($form['field_ethnicity_black']);
		unset($form['field_ethnicity_hispanic']);
		unset($form['field_ethnicity_american_indian']);
		unset($form['field_ethnicity_asian']);
		unset($form['field_ethnicity_native_hawaiian']);
		unset($form['field_ethnicity_other']);

		$form['additional_site_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Additional Site Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 21,
			'descripton' => array(
				'#markup' => '<span class="help-block col-sm-offset-3 col-sm-9"></span>',
				'#weight' => 100,
			),
		);
		$form['additional_site_information']['field_special_needs'] = $form['field_special_needs'];
		$form['additional_site_information']['field_special_needs_other'] = $form['field_special_needs_other'];
		$form['additional_site_information']['field_special_needs_other']['#states'] = array(
			'visible' => array(
				array(
				':input[name="field_special_needs[und][Other]"]' => array('checked' => TRUE)),
			),
		);
		$form['additional_site_information']['field_children_ell'] = $form['field_children_ell'];
		$form['additional_site_information']['field_percentage_frp'] = $form['field_percentage_frp'];

		$form['additional_site_information']['field_risk_factors']['#weight'] = 1;
		$form['additional_site_information']['field_special_needs']['#weight'] = 2;
		$form['additional_site_information']['field_special_needs_other']['#weight'] = 3;
		$form['additional_site_information']['field_children_ell']['#weight'] = 4;
		$form['additional_site_information']['field_percentage_frp']['#weight'] = 5;

		unset($form['field_risk_factors']);
		unset($form['field_special_needs']);
		unset($form['field_special_needs_other']);
		unset($form['field_children_ell']);
		unset($form['field_percentage_frp']);

		$form['annual_fundraising'] = array(
			'#type' => 'fieldset',
			'#title' => t('Annual Funding Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 22,
		);
		$form['annual_fundraising']['field_local_fundraising'] = $form['field_local_fundraising'];
		$form['annual_fundraising']['field_funding_source'] = $form['field_funding_source'];
		$form['annual_fundraising']['field_literacy_supported_activit'] = $form['field_literacy_supported_activit'];

		$form['annual_fundraising']['field_local_fundraising']['#weight'] = 1;
		$form['annual_fundraising']['field_funding_source']['#weight'] = 2;
		$form['annual_fundraising']['field_literacy_supported_activit']['#weight'] = 4;

		unset($form['field_local_fundraising']);
		unset($form['field_funding_source']);
		unset($form['field_literacy_supported_activit']);

		$form['volunteer_support_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Volunteer and Support Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 23,
		);
		$form['volunteer_support_information']['field_local_partner_orgs'] = $form['field_local_partner_orgs'];
		$form['volunteer_support_information']['field_number_volunteers'] = $form['field_number_volunteers'];
		$form['volunteer_support_information']['field_volunteer_match'] = $form['field_volunteer_match'];
		$form['volunteer_support_information']['field_volunteers_needed'] = $form['field_volunteers_needed'];
		$form['volunteer_support_information']['field_type_of_support_needed'] = $form['field_type_of_support_needed'];
		$form['volunteer_support_information']['field_type_of_support_needed']['#states'] = array(
			'visible' => array(
				array(
					':input[name="field_volunteers_needed[und]"]' => array('value' => 1),
				),
			),
		);
		$form['volunteer_support_information']['field_type_of_support_other'] = $form['field_type_of_support_other'];
		$form['volunteer_support_information']['field_type_of_support_other']['#states'] = array(
			'visible' => array(
				array(
					':input[name="field_type_of_support_needed[und][Other]"]' => array('checked' => TRUE),
					':input[name="field_volunteers_needed[und]"]' => array('value' => 1),
				),
			),
		);

		$form['volunteer_support_information']['field_local_partner_orgs']['#weight'] = 1;
		$form['volunteer_support_information']['field_number_volunteers']['#weight'] = 2;
		$form['volunteer_support_information']['field_volunteer_match']['#weight'] = 3;
		$form['volunteer_support_information']['field_volunteers_needed']['#weight'] = 4;
		$form['volunteer_support_information']['field_type_of_support_needed']['#weight'] = 5;
		$form['volunteer_support_information']['field_type_of_support_other']['#weight'] = 6;

		unset($form['field_local_partner_orgs']);
		unset($form['field_number_volunteers']);
		unset($form['field_volunteers_needed']);
		unset($form['field_volunteer_match']);
		unset($form['field_type_of_support_needed']);
		unset($form['field_type_of_support_other']);

		$form['actions']['delete']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);
		$form['actions']['submit']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);

		wrap_container_around_form($form, $form_state);
	}

	function wrap_container_around_form(&$form, &$form_state) {
		$form['key_contact']['#prefix'] = '
			<div class="container panel-center-wrapper panel-panel">
				<div class="row">
					<div class="col-xs-12 col-md-8">
		';

		$form['right_sidebar_first'] = array(
			'#markup' => '
				</div>
				<div class="col-xs-12 col-md-4">',
			'#weight' => 999
		);

		//TODO: set this to pull the Profile Status block instead
		$form['right_sidebar_1'] = array(
			'#markup' => '
					<div class="panel-pane pane-block pane-rif-registration-profile-status-single-site">
						<div class="facet-main"></div>  
					  	<div class="pane-content">						
							<div class="panel panel-default panel-profile-status">
								<div class="panel-body">
									<h3>PROFILE STATUS</h3>
									<ul class="profile-list"><p><i class="fa fa-circle" aria-hidden="true"></i> Enter Profile Data</p></ul>
								</div>
							</div>
						</div>
					 </div>
        	',
			'#weight' => 1000
		);
		$form['actions'] += array(
			'#prefix' => '
					<div class="panel-pane pane-block pane-rif-registration-form-status-single-site">
					  	<div class="pane-content">						
							<div class="panel panel-default panel-profile-status">
								<div class="panel-body">
									<h3>FORM STATUS</h3>
									<div class="form-status-button-container">',
			'#suffix' => '	
									</div>
								</div>
							</div>
						</div>
					 </div>
        	',
			'#weight' => 1001
		);
		// Check if the form is being edited
		$is_draft = ($form['options']['status']['#default_value'] == 0 || $form['nid']['#value'] == NULL);
		if(!$is_draft){
			// If it is being edited then change the submit button to text
			$form['actions']['submit']['#value'] = 'Update Profile';
			if (!empty($form['nid']['#value'])) {
				$form['actions']['delete']['#limit_validation_errors'] = array(array('nid'));
			}
		} else {
			// If the form is not being edited then change the Submit button text
			$form['actions']['submit']['#value'] = 'Submit Profile';
			// and add the save draft button
			$form['actions']['draft'] = array(
				'#type' => 'submit',
				'#access' => true,
				'#value' => 'Save Draft',
				'#weight' => 0,
				'#attributes' => array('class' => array('btn','btn-yellow-rif', 'blue-border')),
				'#validate' => array('save_draft_validate'),
				'#submit' => array('save_draft_submit'),
			);
			if (!empty($form['nid']['#value'])) {
				unset($form['actions']['delete']);
			}
		}
		$form['actions']['submit']['#validate'][] = 'save_profile_validate'; // Validate function to set published status
		$form['right_sidebar_last'] = array(
			'#markup' => '</div></div>',
			'#weight' => 1002
		);

		// attach the JS
		$form['#attached']['js'][] = drupal_get_path('module', 'rif_registration') . '/form_status_slider.js';
		if($form_state['input']['op'] == "Submit Profile") {
			$form['#attributes']['class'][] = 'dirty';
		}
	}

	function save_profile_validate($form, &$form_state){
		form_set_value($form['options']['status'],1,$form_state);
	}

	function save_draft_validate($form, &$form_state) {
		// dsm(form_get_errors());
		form_set_value($form['options']['status'],0,$form_state);

		$errors = form_get_errors();
		if ($errors) {
			// Clear errors.
			form_clear_error();
			// Clear error messages.
			$error_messages = drupal_get_messages('error');
			// Initialize an array where removed error messages are stored.
			$removed_messages = array();

			// Remove all errors that have the
			foreach ($errors as $name => $error_message) {
				if (strpos($error_message, 'field is required.')) {
					$removed_messages[] = $error_message;
					unset($errors[$name]);
				}
			}

			// Reinstate remaining errors.
			foreach ($errors as $name => $error) {
				form_set_error($name, $error);
				// form_set_error() calls drupal_set_message(), so we have to filter out
				// these from the error messages as well.
				$removed_messages[] = $error;
			}

			// Reinstate remaining error messages (which, at this point, are messages that
			// were originated outside of the validation process).
			foreach (array_diff($error_messages['error'], $removed_messages) as $message) {
				drupal_set_message($message, 'error');
			}
		}

		switch ($form_state['values']['type']) {
			case 'site_profile':
			case 'multi_site_profile':
			case 'rif_of':
				if(!$form_state['values']['field_site_name']['und'][0]['value']) {
					form_set_error('field_site_name', 'Please enter the Site Name to save as a draft');
				}
				break;
			case 'partnership_profile' :
				if(!$form_state['values']['field_organization_name']['und'][0]['value']) {
					form_set_error('field_organization_name', 'Please enter the Organization Name to save as a draft');
				}
				break;
		}
	}

	function save_draft_submit($form, &$form_state) {
		node_form_submit($form, $form_state);

		$node_nid = $form_state['values']['nid'];
		switch($form_state['values']['type']) {
			case 'site_profile':
				$form_state['redirect'] = 'literacy-network/site-profile/edit/' . $node_nid;
				break;
			case 'multi_site_profile':
			case 'partnership_profile':
			case 'rif_of':
				$form_state['redirect'] = 'node/' . $node_nid . '/edit/';
				break;
			default:
				$form_state['redirect'] = NULL;
				break;
		}
	}

	function rearrange_form_elements($form) {

		// Put basic field information under the account fieldset
		$form['account']['field_first_name'] = $form['field_first_name'];
		$form['account']['field_last_name'] = $form['field_last_name'];
		$form['account']['field_address_line_1'] = $form['field_address_line_1'];
		$form['account']['field_address_line_2'] = $form['field_address_line_2'];
		$form['account']['field_city'] = $form['field_city'];
		$form['account']['field_state'] = $form['field_state'];
		$form['account']['field_zip'] = $form['field_zip'];

		// Unset those fields to avoid duplicates
		unset($form['field_first_name']);
		unset($form['field_last_name']);
		unset($form['field_address_line_1']);
		unset($form['field_address_line_2']);
		unset($form['field_city']);
		unset($form['field_state']);
		unset($form['field_zip']);

		// Provide Weights where necessary to move fields to desired location
		$form['account']['field_first_name']['#weight'] = -21;
		$form['account']['field_last_name']['#weight'] = -20;

		//dsm($form['account']);

		$form['account']['field_state']['und']['#options']['_none'] = 'State';
		//$form['account']['field_state']['und']['#title_display'] = 'invisible';

		return $form;
	}

	/* ****************************************
	 * 				Blocks
	 * **************************************** */

	/**
	 * Implements hook_block_info().
	 */
	function rif_registration_block_info() {
		$blocks['newsletter_signup_form'] = array(
			'info' => t('RIF newsletter Signup Form'), // The name that will appear in the block list.
			'cache' => DRUPAL_NO_CACHE,
		);
		$blocks['literacy_pledge'] = array(
			'info' => t('RIF Literacy Pledge Form'), // The name that will appear in the block list.
			'cache' => DRUPAL_NO_CACHE,
		);
		$blocks['rfs_program_data'] = array(
			'info' => t('RFS Program Data'), // The name that will appear in the block list.
			'cache' => DRUPAL_NO_CACHE,
		);
		$blocks['bfo_program_data'] = array(
			'info' => t('BFO Program Data'), // The name that will appear in the block list.
			'cache' => DRUPAL_NO_CACHE,
		);
		$blocks['ln_post_reg_partner_form'] = array(
			'info' => t('LN Post Reg Community Partner Form'), // The name that will appear in the block list.
			'cache' => DRUPAL_CACHE_GLOBAL,
		);

		$blocks['volunteer_hours'] = array(
			'info' => t('LN View Current User Volunteer Hours'), // The name that will appear in the block list.
			'cache' => DRUPAL_CACHE_PER_USER,
		);

		$blocks['profile_status_single_site'] = array(
			'info' => t('LN Site Profile Status'), // The name that will appear in the block list.
			'cache' => DRUPAL_CACHE_PER_USER,
		);
		$blocks['sa_bfo'] = array(
			'info' => t('Service Agreements - Books For Ownership'), // The name that will appear in the block list.
			'cache' => DRUPAL_CACHE_PER_USER,
		);
		$blocks['sa_rfs'] = array(
			'info' => t('Service Agreements - Read for Success'), // The name that will appear in the block list.
			'cache' => DRUPAL_CACHE_PER_USER,
		);
		$blocks['sa_bd'] = array(
			'info' => t('Service Agreements - Book Discount'), // The name that will appear in the block list.
			'cache' => DRUPAL_CACHE_PER_USER,
		);
		return $blocks;
	}

	/**
	 * Implements hook_block_view().
	 *
	 * This hook generates the contents of the blocks themselves.
	 */
	function rif_registration_block_view($delta = '') {
		switch($delta) {
			case 'newsletter_signup_form' :
				$block['subject'] = t('Newsletter Signup');
				$block['content'] = _get_new_newsletter();
				break;
			case 'literacy_pledge' :
				$block['subject'] = t('Literacy Pledge');
				$block['content'] = _get_new_literacy_pledge();
				break;
			case 'bfo_program_data' :
				$block['subject'] = t('BFO Program Data');
				$block['content'] = _get_new_bfo_program_data();
				break;
			case 'rfs_program_data' :
				$block['subject'] = t('RFS Program Data');
				$block['content'] = _get_new_rfs_program_data();
				break;
			case 'volunteer_hours' :
				$block['subject'] = t('LN View Current User Volunteer Hours');
				$block['content'] = _get_user_volunteer_hours();
				break;
			case 'profile_status_single_site';
				$block['subject'] = t('LN Site Profile Status');
				$block['content'] = _get_profile_status_single_site();
				break;
			case 'sa_bfo':
				$block['subject'] = t('Service Agreements - Books for Ownership');
				$block['content'] = _get_sa_books_for_ownership();
				break;
			case 'sa_rfs':
				$block['subject'] = t('Service Agreements - Read for Success');
				$block['content'] = _get_sa_read_for_success();
				break;
			case 'sa_bd':
				$block['subject'] = t('Service Agreements - Book Discount');
				$block['content'] = _get_sa_book_discount();
				break;
		}
		return $block;
	}

	function _get_profile_status_single_site() {
		// This shows the profile status block
		$profile_status_list = '';

		// Find

		global $user;
		$type = array('site_profile','multi_site_profile','partnership_profile');
		$result = FALSE;
		$query = new EntityFieldQuery;
		$result = $query
			->entityCondition('entity_type', 'node')
			->propertyCondition('status', 1)
			->propertyCondition('type', $type, 'IN')
			->propertyCondition('uid', $user->uid)
			->execute();

		// If there is no node found then show enter profile data
		if(!$result){
			$profile_status_list .= '<p><i class="fa fa-circle" aria-hidden="true"></i> Enter Profile Data</p>';
		} else {
			$profile_status_list .= '<p><i class="fa fa-check-circle-o" aria-hidden="true"></i> Profile Data Complete</p>';

			$type = array('service_agreement_bfo', 'service_agreement_rfs', 'service_agreement_bd');
			$result = FALSE;
			$query = new EntityFieldQuery;
			$result = $query
				->entityCondition('entity_type', 'node')
				->propertyCondition('status', 1)
				->propertyCondition('type', $type, 'IN')
				->propertyCondition('uid', $user->uid)
				->execute();

			if ($result) {
				//$profile_status_list .= '<p><i class="fa fa-check-circle-o" aria-hidden="true"></i> Service Agreement Complete</p>';
			} else {
				//$profile_status_list .= '<p><i class="fa fa-circle" aria-hidden="true"></i> Sign Service Agreement (Coming Soon)</p>';
			}
		}

		return $toReturn = '
			<div class="panel panel-default panel-profile-status">
				<div class="panel-body">
					<h3>PROFILE STATUS</h3>
					<ul class="profile-list">'.
						$profile_status_list .
					'</ul>
				</div>
			</div>
		';
	}

	function _get_new_newsletter() {
		module_load_include('inc', 'node', 'node.pages');
		//Before rendering a new newsletter check if the current user already has a newsletter...
		global $user;
		$uid = $user->uid;
		$type = 'newsletter_signup';
		$result = FALSE;
		if($uid !== 0) {
			$query = new EntityFieldQuery;
			$result = $query
				->entityCondition('entity_type', 'node')
				->propertyCondition('status', 1)
				->propertyCondition('type', $type)
				->propertyCondition('uid', $uid)
				->execute();
		}

		if($result) {
			$edit_node_form = node_page_edit(node_load(array_values($result['node'])[0]->nid));
			$edit_node_form_html = drupal_render($edit_node_form);
			$toReturn = '<div class="container panel-push-down form-horizontal">'. $edit_node_form_html .'</div>';
		} else {
			$new_node_form = node_add('newsletter_signup');
			$new_node_form_html = drupal_render($new_node_form);
			$toReturn = '<div class="container form-horizontal"><div class="text">&nbsp</div>'. $new_node_form_html .'</div>';
		}

		return $toReturn;
		//TODO (Newsletter): Add a check when creating a new (or updating) a newsletter that a newsletter with that email doesn't already exist
	}

	function _get_new_literacy_pledge() {
		module_load_include('inc', 'node', 'node.pages');

		$new_node_form = node_add('literacy_pledge');
		$new_node_form_html = drupal_render($new_node_form);
		$toReturn = '<div class="container form-horizontal col-md-7 col-md-offset-2"><div class="text">&nbsp</div>'. $new_node_form_html .'</div>';

		return $toReturn;
	}

	function custom_drupal_mail($from = 'default_from', $to, $subject, $message) {
		$my_module = 'custom';
		$my_mail_token = microtime();
		if ($from == 'default_from') {
		  // Change this to your own default 'from' email address.
		  $from = variable_get('system_mail', 'no-reply@rif.org');
		}
		$message = array(
		  'id' => $my_module . '_' . $my_mail_token,
		  'to' => $to,
		  'subject' => $subject,
		  'body' => array($message),
		  'headers' => array(
			'From' => $from,
			'Sender' => $from,
			'Return-Path' => $from,
		  ),
		);
		$system = drupal_mail_system($my_module, $my_mail_token);
		$message = $system->format($message);
		if ($system->mail($message)) {
		  return TRUE;
		}
		else {
		  return FALSE;
		}
	  }

	function rif_registration_my_custom_submit_literacy_pledge(&$form, &$form_state) { //Literacy Pledge
		//Get current messages and clear them.
		$firstname = $form_state['values']['field_first_name']['und'][0]['value'];
		$subject ='Thank you for completing the RIF Literacy Pledge.';
		$body = '<p>Dear '.$firstname.',</p><p>Thank you for completing the literacy pledge. As a member of the RIF community, here are some activities you can do to help build a culture of reading in your community:</p>
			<ul>
			<li>Sign up for the RIF Newsletter to stay up to date on RIF activities (https://www.rif.org/newsletter-signup)</li>
			<li>Use and share resources available on the Literacy Central website (https://www.rif.org/litercy-central)</li>
			<li>If you haven’t already, sign up for a Literacy Network account (https://www.rif.org/literacy-network/register?destination=literacy-network)</li>
			</ul>
			<br>
			<p>The RIF Team</p>';
		$to = $form_state['values']['field_email']['und'][0]['value'];
		custom_drupal_mail('no-reply@rif.org', $to, $subject, $body);
		$messages = drupal_get_messages('status');

		// If the user checks to also receive the newsletter then make sure to create a newsletter record if needed

		if ($form_state['values']['field_get_rif_newsletter']['und'][0]['value'] == TRUE) {
			$type = 'newsletter_signup';
			$query = new EntityFieldQuery;
			$result = $query
				->entityCondition('entity_type', 'node')
				->propertyCondition('status', 1)
				->propertyCondition('type', $type)
				->fieldCondition('field_email', 'value', $form_state['values']['field_email']['und'][0]['value'])
				->execute();

			if(sizeof($result) > 1) {
				watchdog('rif_registration', 'The email (%email) was found with %count occurrences.', array('%email' => $form_state['values']['field_email']['und'][0]['value'], '%count'=> sizeof($result)), WATCHDOG_ERROR);
			}

			// If no newsletter information exists for this user then make one.
			if(sizeof($result) == 0) {
				// If no newsletter was found then:
				// Create an Entity.
				$node = entity_create('node', array('type' => 'newsletter_signup'));
				// Specify the author.
				$node->uid = $form_state['node']->uid;
				// Create a Entity Wrapper of that new Entity.
				$emw_node = entity_metadata_wrapper('node', $node);
				// Set a title
				$emw_node->title = 'newsletter_signup_from_registration';

				$emw_node->field_first_name->set($form_state['values']['field_first_name'][LANGUAGE_NONE][0]['value']);
				$emw_node->field_last_name->set($form_state['values']['field_last_name'][LANGUAGE_NONE][0]['value']);
				$emw_node->field_email->set($form_state['values']['field_email']['und'][0]['value']);
				$emw_node->field_get_rif_newsletter->set($form_state['values']['field_get_rif_newsletter']['und'][0]['value']);
				/*$emw_node->field_get_lc_newsletter->set($form_state['values']['field_get_lc_newsletter']);
				$emw_node->field_get_ln_newsletter->set($form_state['values']['field_get_ln_newsletter']);*/
				$emw_node->save();
			}
		}
		drupal_set_message(t('<p>Thank you for completing the literacy pledge. As a member of the RIF community, here are some activities you can do to help build a culture of reading in your community:</p>
		<ul>
		<li><a href="/newsletter-signup" target="_blank">Sign up</a> for the RIF Newsletter to stay up to date on RIF activities</li>
		<li>Use and share resources available on the <a href="/literacy-central" target="_blank">Literacy Central website</a></li>
		<li>If you haven’t already, <a href="/literacy-network/register?destination=literacy-network" target="_blank">sign up</a> for a Literacy Network account</li>
		</ul>
		<br>
		<p>The RIF Team</p>'));

		drupal_goto('literacy-network/volunteer');
	}

	function rif_registration_form_literacy_pledge_node_form_alter(&$form, &$form_state, $form_id) {
		$form['actions']['submit']['#prefix'] = '<div class="jumbotron-button-container">';
		$form['actions']['submit']['#suffix'] = '</div>';
		$form['actions']['submit']['#type'] = 'submit';
		$form['actions']['submit']['#value'] = t('Submit');
		$form['actions']['submit']['#attributes']['class'] = array(
				'btn btn-jumbotron btn-yellow-rif blue-border'
		);
		$form['actions']['submit']['#submit'][] = 'rif_registration_my_custom_submit_literacy_pledge';
	}

	/* ****************************************
	 * 			Tracking Program Data
	 * **************************************** */
	function _get_new_bfo_program_data() {

		global $user;
		$uid = $user->uid;
		$panelBodyText = '';
		$totalBooks = 0;
		$nameHTML = 'Books for Ownership Data';
		$site_name = '';
		$type = 'site_profile';
		$result = FALSE;
		$query = new EntityFieldQuery;
		$result = $query
			->entityCondition('entity_type', 'node')
			->propertyCondition('status', 1)
			->propertyCondition('type', $type)
			->propertyCondition('uid', $uid)
			->execute();

		if(!$result) {
			drupal_set_message(t('
			<p>You must be registered and signed in to your Literacy Network account and have completed a profile for your school/organization in order to report your RIF program activities. If you have not yet registered on Literacy Network, please <a href="literacy-network/register">click here to create an account.</a></p>
			<p>How do I sign in?</p>
			<p><a href="literacy-network/sign-in?destination=literacy-network/bfo-data-entry">Click here to sign in</a></p>
			<p>How do I ensure I have a profile?</p>
			<p>If you already have an account, <a href="literacy-network/my-profile">click here to complete a profile</a></p>
			<p>Why is a profile important?</p>
			<p>Profiles help us collect some initial information about your school/organization so that activity reporting is quick, easy, and automatically connected to your RIF account.</p>
			'), $type = 'error');
			drupal_goto('literacy-network');
		} else {
			$site_profile_nid = array_values($result['node'])[0]->nid;
			$emw_site_profile = entity_metadata_wrapper('node', $site_profile_nid);
			$site_name = $emw_site_profile->field_site_name->value();
			$site_url = $emw_site_profile->url->value();
			$type = 'bfo_program_data';
			$result = FALSE;
			$query = new EntityFieldQuery;
			$result = $query
				->entityCondition('entity_type', 'node')
				->propertyCondition('status', 1)
				->propertyCondition('type', $type)
				->propertyCondition('uid', $uid)
				->execute();

			if(!$result) {
				$panelBodyText .= '<table><tr><td>You do not have any Books for Ownership data submitted to display</td></tr></table>';
			} else {
				$panelBodyText .= '	<table>';
				$panelBodyText .= '		<tr>';
				$panelBodyText .= '			<th>Date</th>';
				$panelBodyText .= '			<th>Event Name</th>';
				$panelBodyText .= '			<th>Location</th>';
				$panelBodyText .= '			<th>Books Distributed</th>';
				$panelBodyText .= '		</tr>';
				foreach($result['node'] as $nid => $item) {
					$emw_bfo_program_data_node = entity_metadata_wrapper('node', $nid);
					$date_of_event = date('n/j/Y', $emw_bfo_program_data_node->field_date_of_event->value());
					$event_name = $emw_bfo_program_data_node->field_bfo_event_name->value();
					$location = $emw_bfo_program_data_node->field_location_of_event->value();
					$number_of_books = $emw_bfo_program_data_node->field_number_of_books->value();
					$panelBodyText .= '		<tr>';
					$panelBodyText .= '			<td>'.$date_of_event.'</td>';
					$panelBodyText .= '			<td><a href="/node/'.$nid.'/edit">'.$event_name.'</a></td>';
					$panelBodyText .= '			<td>'.$location.'</td>';
					$panelBodyText .= '			<td>'.$number_of_books.'</td>';
					$totalBooks += $number_of_books;
					$panelBodyText .= '		</tr>';
				}
				$panelBodyText .= ' </table>';
			}
		}

		$panelHeader = '<div class="row">';
		$panelHeader .= '	<div class="col-md-5">';
		$panelHeader .= '		'.$nameHTML;
		$panelHeader .= '	</div>';
		$panelHeader .= '	<div class="col-md-4">';
		$panelHeader .= '		'.$rifIDHtml;
		$panelHeader .= '	</div>';
		$panelHeader .= '	<div class="col-md-3">';
		$panelHeader .= '		Site: <a href="'.$site_url.'">'.$site_name.'</a>';
		$panelHeader .= '	</div>';
		$panelHeader .= '</div>';

		$toReturn = '
			<div class="panel panel-default panel-volunteer-table">
				<div class="panel-heading">
					'.$panelHeader.'
				</div>
				<div class="panel-body">
					'.$panelBodyText.'
				</div>
			</div>
			<div class="volunteer-table-button-container">';

		$toReturn .= '<a href="/node/add/bfo-program-data" class="btn btn-jumbotron btn-yellow-rif blue-border"><i class="fa fa-plus" aria-hidden="true"></i> Add Data</a>';

		$toReturn .= '</div>';

		return $toReturn;
	}

	function rif_registration_form_bfo_program_data_node_form_alter(&$form, &$form_state, $form_id) {

		$form['book_distribution_event'] = array(
			'#type' => 'fieldset',
			'#title' => t('Books for Ownership Activity Reporting'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 1,
		);
		$form['book_distribution_event']['field_bfo_event_name'] = $form['field_bfo_event_name'];
		$form['book_distribution_event']['field_date_of_event'] = $form['field_date_of_event'];
		//$form['book_distribution_event']['field_location_of_event'] = $form['field_location_of_event'];
		//$form['book_distribution_event']['field_number_of_children'] = $form['field_number_of_children'];
		$form['book_distribution_event']['field_children_receiving_books'] = $form['field_children_receiving_books'];
		$form['book_distribution_event']['field_number_of_books'] = $form['field_number_of_books'];
		$form['book_distribution_event']['field_motivational_activities'] = $form['field_motivational_activities'];
		//$form['book_distribution_event']['field_volunteers_needed'] = $form['field_volunteers_needed'];
		$form['book_distribution_event']['field_number_of_volunteers_suppo'] = $form['field_number_of_volunteers_suppo'];
		$form['book_distribution_event']['field_volunteer_information'] = $form['field_volunteer_information'];

		$form['book_distribution_event']['field_bfo_event_name']['#weight'] = 1;
		$form['book_distribution_event']['field_date_of_event']['#weight'] = 2;
		//$form['book_distribution_event']['field_location_of_event']['#weight'] = 3;
		//$form['book_distribution_event']['field_number_of_children']['#weight'] = 4;
		$form['book_distribution_event']['field_children_receiving_books']['#weight'] = 5;
		$form['book_distribution_event']['field_number_of_books']['#weight'] = 6;
		$form['book_distribution_event']['field_motivational_activities']['#weight'] = 7;
		//$form['book_distribution_event']['field_volunteers_needed']['#weight'] = 8;
		$form['book_distribution_event']['field_number_of_volunteers_suppo']['#weight'] = 8;
		$form['book_distribution_event']['field_volunteer_information']['#weight'] = 9;

		unset($form['field_bfo_event_name']);
		unset($form['field_date_of_event']);
		unset($form['field_location_of_event']);
		unset($form['field_number_of_children']);
		unset($form['field_children_receiving_books']);
		unset($form['field_number_of_books']);
		unset($form['field_motivational_activities']);
		unset($form['field_volunteers_needed']);
		unset($form['field_number_of_volunteers_suppo']);
		unset($form['field_volunteer_information']);

		$form['literacy_central'] = array(
			'#type' => 'fieldset',
			'#title' => t('Literacy Central'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 2,
		);
		$form['literacy_central']['field_incorporating_literacy_cen'] = $form['field_incorporating_literacy_cen'];
		//$form['literacy_central']['field_how_used'] = $form['field_how_used'];
		$form['literacy_central']['field_additional_resources'] = $form['field_additional_resources'];
		$form['literacy_central']['field_popular_book_titles'] = $form['field_popular_book_titles'];

		$form['literacy_central']['field_incorporating_literacy_cen']['#weight'] = 1;
		//$form['literacy_central']['field_how_used']['#weight'] = 2;
		$form['literacy_central']['field_additional_resources']['#weight'] = 3;
		$form['literacy_central']['field_popular_book_titles']['#weight'] = 4;

		unset($form['field_incorporating_literacy_cen']);
		unset($form['field_how_used']);
		unset($form['field_additional_resources']);
		unset($form['field_popular_book_titles']);

		$form['actions']['submit']['#prefix'] = '<div class="jumbotron-button-container">';
		$form['actions']['submit']['#suffix'] = '</div>';
		$form['actions']['submit']['#type'] = 'submit';
		$form['actions']['submit']['#value'] = t('Submit');
		$form['actions']['submit']['#attributes']['class'] = array(
				'btn btn-jumbotron btn-yellow-rif blue-border'
		);
		$form['actions']['submit']['#submit'][] = 'rif_registration_my_custom_submit_bfo';

		global $user;
		$uid = $user->uid;
		$type = 'site_profile';
		$result = FALSE;
		$query = new EntityFieldQuery;
		$result = $query
			->entityCondition('entity_type', 'node')
			->propertyCondition('status', 1)
			->propertyCondition('type', $type)
			->propertyCondition('uid', $uid)
			->execute();

		$site_profile_nid = array_values($result['node'])[0]->nid;
		$form['field_site_profile_nid']['und'][0]['target_id'] = array('#entity'=>node_load($site_profile_nid));
        //krumo($form);
	}
	function rif_registration_my_custom_submit_bfo($form, &$form_state) {
		//Get current messages and clear them.
		$messages = drupal_get_messages('status');
		drupal_set_message(t('Thank you for submitting your Books for Ownership Data.'));
		drupal_goto('literacy-network/bfo-data-entry');
	}
	function _get_new_rfs_program_data() {

		global $user;
		$uid = $user->uid;
		$panelBodyText = '';
		$totalChildren = 0;
		$site_name = '';
		$nameHTML = 'Read for Success Data';
		$type = 'site_profile';
		$result = FALSE;
		$query = new EntityFieldQuery;
		$result = $query
			->entityCondition('entity_type', 'node')
			->propertyCondition('status', 1)
			->propertyCondition('type', $type)
			->propertyCondition('uid', $uid)
			->execute();

		if(!$result) {
			drupal_set_message(t('
			<p>You must be registered and signed in to your Literacy Network account and have completed a profile for your school/organization in order to report your RIF program activities. If you have not yet registered on Literacy Network, please <a href="literacy-network/register">click here to create an account.</a></p>
			<p>How do I sign in?</p>
			<p><a href="literacy-network/sign-in?destination=literacy-network/rfs-data-entry">Click here to sign in</a></p>
			<p>How do I ensure I have a profile?</p>
			<p>If you already have an account, <a href="literacy-network/my-profile">click here to complete a profile</a></p>
			<p>Why is a profile important?</p>
			<p>Profiles help us collect some initial information about your school/organization so that activity reporting is quick, easy, and automatically connected to your RIF account.</p>
			'), $type = 'error');
			drupal_goto('literacy-network');
		} else {
			$site_profile_nid = array_values($result['node'])[0]->nid;
			$emw_site_profile = entity_metadata_wrapper('node', $site_profile_nid);
			$site_name = $emw_site_profile->field_site_name->value();
            $site_url = $emw_site_profile->url->value();
			$type = 'rfs_program_data';
			$result = FALSE;
			$query = new EntityFieldQuery;
			$result = $query
				->entityCondition('entity_type', 'node')
				->propertyCondition('status', 1)
				->propertyCondition('type', $type)
				->propertyCondition('uid', $uid)
				->execute();

			if(!$result) {
				$panelBodyText .= '<table><tr><td>You do not have any Reading for Success program data submitted to display</td></tr></table>';
			} else {
				$panelBodyText .= '	<table>';
				$panelBodyText .= '		<tr>';
				$panelBodyText .= '			<th>Date Started</th>';
				$panelBodyText .= '			<th>Type of Implementation</th>';
				$panelBodyText .= '			<th>Location</th>';
				$panelBodyText .= '			<th>Number of Children</th>';
				$panelBodyText .= '		</tr>';
				foreach($result['node'] as $nid => $item) {
					$emw_rfs_program_data_node = entity_metadata_wrapper('node', $nid);
					$date_implemented = date('n/j/Y', $emw_rfs_program_data_node->field_rfs_implemented->value());
					$implementation_type = $emw_rfs_program_data_node->field_implementation_type->value();
					$location = $emw_rfs_program_data_node->field_location_of_event->value();
					$number_children = $emw_rfs_program_data_node->field_number_of_children->value();
					$panelBodyText .= '		<tr>';
					$panelBodyText .= '			<td>'.$date_implemented.'</td>';
					$panelBodyText .= '			<td><a href="/node/'.$nid.'/edit">'.$implementation_type.'</a></td>';
					$panelBodyText .= '			<td>'.$location.'</td>';
					$panelBodyText .= '			<td>'.$number_children.'</td>';
					$totalChildren += $number_children;
					$panelBodyText .= '		</tr>';
				}
				$panelBodyText .= ' </table>';
			}
		}

		$panelHeader = '<div class="row">';
		$panelHeader .= '	<div class="col-md-5">';
		$panelHeader .= '		'.$nameHTML;
		$panelHeader .= '	</div>';
		$panelHeader .= '	<div class="col-md-4">';
		$panelHeader .= '		'.$rifIDHtml;
		$panelHeader .= '	</div>';
		$panelHeader .= '	<div class="col-md-3">';
		$panelHeader .= '		Site: <a href="'.$site_url.'">'.$site_name.'</a>';
		$panelHeader .= '	</div>';
		$panelHeader .= '</div>';

		$toReturn = '
			<div class="panel panel-default panel-volunteer-table">
				<div class="panel-heading">
					'.$panelHeader.'
				</div>
				<div class="panel-body">
					'.$panelBodyText.'
				</div>
			</div>
			<div class="volunteer-table-button-container">';

		$toReturn .= '<a href="/node/add/rfs-program-data" class="btn btn-jumbotron btn-yellow-rif blue-border"><i class="fa fa-plus" aria-hidden="true"></i> Add Data</a>';

		$toReturn .= '</div>';

		return $toReturn;
	}

	function rif_registration_form_rfs_program_data_node_form_alter(&$form, &$form_state, $form_id) {

	    $form['program_information'] = array(
			'#type' => 'fieldset',
			'#title' => t('Program Information'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 1,
		);
		$form['program_information']['field_program_name'] = $form['field_program_name'];
		$form['program_information']['field_rfs_implemented'] = $form['field_rfs_implemented'];
		// $form['program_information']['field_implementation_type'] = $form['field_implementation_type'];
		// $form['program_information']['field_type_implementation_other'] = $form['field_type_implementation_other'];
		// $form['program_information']['field_type_implementation_other']['#states'] = array(
		// 	'visible' => array(
		// 		array(
		// 		':input[name="field_implementation_type[und][Other]"]' => array('checked' => TRUE)),
		// 	),
		// );
		//$form['program_information']['field_location_of_event'] = $form['field_location_of_event'];
		$form['program_information']['field_number_of_children'] = $form['field_number_of_children'];
		// $form['program_information']['field_month_book_distribution'] = $form['field_month_book_distribution'];
		// $form['program_information']['field_student_performance_data'] = $form['field_student_performance_data'];
		$form['program_information']['field_number_of_volunteers_suppo'] = $form['field_number_of_volunteers_suppo'];
		$form['program_information']['field_how_were_volunteers_parent'] = $form['field_how_were_volunteers_parent'];
		$form['program_information']['field_describe_the_motivational_'] = $form['field_describe_the_motivational_'];

		$form['program_information']['field_program_name']['#weight'] = 1;
		$form['program_information']['field_rfs_implemented']['#weight'] = 2;
		//$form['program_information']['field_implementation_type']['#weight'] = 3;
		//$form['program_information']['field_type_implementation_other']['#weight']= 4;
		//$form['program_information']['field_location_of_event']['#weight'] = 5;
		$form['program_information']['field_number_of_children']['#weight'] = 6;
		//$form['program_information']['field_month_book_distribution']['#weight'] = 7;
		//$form['program_information']['field_student_performance_data']['#weight'] = 8;
		$form['program_information']['field_number_of_volunteers_suppo']['#weight'] = 7;
		$form['program_information']['field_how_were_volunteers_parent']['#weight'] = 8;
		$form['program_information']['field_describe_the_motivational_']['#weight'] = 9;

		unset($form['field_program_name']);
		unset($form['field_rfs_implemented']);
		unset($form['field_implementation_type']);
		unset($form['field_type_implementation_other']);
		unset($form['field_location_of_event']);
		unset($form['field_number_of_children']);
		unset($form['field_month_book_distribution']);
		unset($form['field_student_performance_data']);
		unset($form['field_number_of_volunteers_suppo']);
		unset($form['field_how_were_volunteers_parent']);
		unset($form['field_describe_the_motivational_']);

		$form['literacy_central'] = array(
			'#type' => 'fieldset',
			'#title' => t('Literacy Central'),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
			'#weight' => 2,
		);
		$form['literacy_central']['field_incorporating_literacy_cen'] = $form['field_incorporating_literacy_cen'];
		//$form['literacy_central']['field_general_description'] = $form['field_general_description'];
		$form['literacy_central']['field_additional_resources'] = $form['field_additional_resources'];
		$form['literacy_central']['field_popular_book_titles'] = $form['field_popular_book_titles'];
		$form['literacy_central']['field_did_you_find_the_professio'] = $form['field_did_you_find_the_professio'];
		$form['literacy_central']['field_please_share_what_impact_t'] = $form['field_please_share_what_impact_t'];

		$form['literacy_central']['field_incorporating_literacy_cen']['#weight'] = 1;
		//$form['literacy_central']['field_general_description']['#weight'] = 2;
		$form['literacy_central']['field_additional_resources']['#weight'] = 3;
		$form['literacy_central']['field_popular_book_titles']['#weight'] = 4;
		$form['literacy_central']['field_did_you_find_the_professio']['#weight'] = 5;
		$form['literacy_central']['field_please_share_what_impact_t']['#weight'] = 6;

		unset($form['field_incorporating_literacy_cen']);
		unset($form['field_general_description']);
		unset($form['field_additional_resources']);
		unset($form['field_popular_book_titles']);
		unset($form['field_did_you_find_the_professio']);
		unset($form['field_please_share_what_impact_t']);

		$form['actions']['submit']['#prefix'] = '<div class="jumbotron-button-container">';
		$form['actions']['submit']['#suffix'] = '</div>';
		$form['actions']['submit']['#type'] = 'submit';
		$form['actions']['submit']['#value'] = t('Submit');
		$form['actions']['submit']['#attributes']['class'] = array(
				'btn btn-jumbotron btn-yellow-rif blue-border'
		);
		$form['actions']['submit']['#submit'][] = 'rif_registration_my_custom_submit_rfs';

        global $user;
        $uid = $user->uid;
        $site_name = '';
        $type = 'site_profile';
        $result = FALSE;
        $query = new EntityFieldQuery;
        $result = $query
            ->entityCondition('entity_type', 'node')
            ->propertyCondition('status', 1)
            ->propertyCondition('type', $type)
            ->propertyCondition('uid', $uid)
            ->execute();

        $site_profile_nid = array_values($result['node'])[0]->nid;
        $form['field_site_profile_nid']['und'][0]['target_id'] = array('#entity'=>node_load($site_profile_nid));
        //krumo($form);
	}
	function rif_registration_my_custom_submit_rfs($form, &$form_state) {
		//Get current messages and clear them.
		$messages = drupal_get_messages('status');
		drupal_set_message(t('Thank you for submitting your Read for Success Data.'));
		drupal_goto('literacy-network/rfs-data-entry');
	}

	/* ****************************************
	 * 				Blocks
	 * **************************************** */
	function _get_user_volunteer_hours() {

		$notSignedInMessage = "<table><tr><td>To track volunteer hours you must first sign in and select (Volunteer) as a user type</td></tr></table>";
		$panelBodyText = '';
		$totalHoursWorked = 0;
		$nameHTML = 'Volunteer Hours';
		$rifIDHtml = '';

		global $user;
		$uid = $user->uid;

		if($uid === 0) {
			$panelBodyText .= $notSignedInMessage;
		} else {
			$type = 'volunteer_entry';
			$result = FALSE;
			if($uid !== 0) {
				$query = new EntityFieldQuery;
				$result = $query
					->entityCondition('entity_type', 'node')
					->propertyCondition('status', 1)
					->propertyCondition('type', $type)
					->propertyCondition('uid', $uid)
					->execute();
			}
			if(!$result) {
				$panelBodyText .= '<table><tr><td>You do not have any volunteer hours submitted to display</td></tr></table>';
			} else {
				$panelBodyText .= '	<table>';
				$panelBodyText .= '		<tr>';
				$panelBodyText .= '			<th>Date</th>';
				$panelBodyText .= '			<th>Description</th>';
				$panelBodyText .= '			<th>Location</th>';
				$panelBodyText .= '			<th>Hours</th>';
				$panelBodyText .= '		</tr>';
				foreach($result['node'] as $nid => $item) {
					$emw_volunteer_node = entity_metadata_wrapper('node', $nid);
					$date_worked = date('n/j/Y', $emw_volunteer_node->field_volunteer_date->value());
					$description = $emw_volunteer_node->field_volunteer_description->value();
					$location = $emw_volunteer_node->field_volunteer_location->value();
					$hours_worked = $emw_volunteer_node->field_volunteer_hours->value();
					$panelBodyText .= '		<tr>';
					$panelBodyText .= '			<td>'.$date_worked.'</td>';
					$panelBodyText .= '			<td><a href="/node/'.$nid.'/edit">'.$description.'</a></td>';
					$panelBodyText .= '			<td>'.$location.'</td>';
					$panelBodyText .= '			<td>'.$hours_worked.'</td>';
					$totalHoursWorked += $hours_worked;
					$panelBodyText .= '		</tr>';
				}
				$panelBodyText .= ' </table>';
			}

		}

		$panelHeader = '<div class="row">';
		$panelHeader .= '	<div class="col-md-5">';
		$panelHeader .= '		'.$nameHTML;
		$panelHeader .= '	</div>';
		$panelHeader .= '	<div class="col-md-4">';
		$panelHeader .= '		'.$rifIDHtml;
		$panelHeader .= '	</div>';
		$panelHeader .= '	<div class="col-md-3">';
		$panelHeader .= '		TOTAL HOURS: '.$totalHoursWorked;
		$panelHeader .= '	</div>';
		$panelHeader .= '</div>';

		$toReturn = '
			<div class="panel panel-default panel-volunteer-table">
				<div class="panel-heading">
					'.$panelHeader.'
				</div>
				<div class="panel-body">'.
			$panelBodyText.'
				</div>
			</div>
			<div class="volunteer-table-button-container">';

		// TODO: Also check that the current user is a volunteer instead of just being logged in.
		if($uid === 0) {
			$toReturn .= '<a href="/literacy-network/register" class="btn btn-jumbotron btn-yellow-rif blue-border">Sign In to use</a>';
		} else {
			$toReturn .= '<a href="/node/add/volunteer-entry" class="btn btn-jumbotron btn-yellow-rif blue-border"><i class="fa fa-plus" aria-hidden="true"></i> Add Hours</a>';
		}
		$toReturn .= '</div>';

		return $toReturn;
	}

	function rif_registration_my_custom_submit($form, &$form_state) {
		//Get current messages and clear them.
		$messages = drupal_get_messages('status');
		drupal_set_message(t('Thank you for signing up for the RIF newsletter.'));
		drupal_goto('newsletter-signup');
	}

	/* ****************************************
	 * 			Unused Service Agreements
	 * **************************************** */
	function _get_sa_books_for_ownership() {
		// Setup any vars I need
		global $user;
		$toReturn = '';

		// IF user is not logged in then just return a quick message saying they should login.
		if($user->uid === 0) {
			$panelBodyText = '<p>Please register an account for Literacy Network to fill out a service agreement.</p>';
		} else {
			// If a user is logged in but not opted-in to LN then give them the same message as if they are not logged in
			$ln_role = user_role_load_by_name('Community Member');
			$has_ln_role = user_has_role($ln_role->rid);
			if(!$has_ln_role) {
				$panelBodyText = '<p>Please opt-in to Literacy Network to fill out this service agreement.</p>';
			} else {
				// If user hasn't filled out a profile yet then they can't fill out the form
				$type = array('site_profile','multi_site_profile','partnership_profile');
				$result = FALSE;
				$query = new EntityFieldQuery;
				$result = $query
					->entityCondition('entity_type', 'node')
					->propertyCondition('status', 1)
					->propertyCondition('type', $type, 'IN')
					->propertyCondition('uid', $user->uid)
					->execute();

				if(!$result) {
					$panelBodyText = '<p>You must first fill out your profile to sign a service agreement</p>';
				} else {
					// If a user is logged in and opted in and they do not have a SA yet then show the node add form
					$type = 'service_agreement_bfo';
					$result = FALSE;
					$query = new EntityFieldQuery;
					$result = $query
						->entityCondition('entity_type', 'node')
						->propertyCondition('status', 1)
						->propertyCondition('type', $type)
						->propertyCondition('uid', $user->uid)
						->execute();

					if($result) {
						// If a user is logged in and opted in and they do have this SA then show it to them in a non-editable view
						if(sizeof($result['node']) > 1) {
							dsm("The system noticed something suspicious while accessing your service agreement. Please contact your site administrator for more information.");
							watchdog('rif_registration', "A user (%email) has a more than one type of an SA associated with them.", array('%email' => $user->mail), WATCHDOG_ERROR);
						}
						// If the user has results then show them their sa
						module_load_include('inc', 'node', 'node.pages');
						$form = node_page_edit(node_load(array_keys($result['node'])[0]));
						//$form = node_view(node_load(array_keys($result['node'])[0]));
						$panelBodyText = drupal_render($form);
						$toReturn .= '
							<div class="panel panel-default panel-service-agreement-header">
								<div class="panel-body">
									Thank you for filling out this service agreement. You can review your form below.		
								</div>
							</div>
						';
					} else {
						// However, if they don't have an sa... Show them the add page.
						module_load_include('inc', 'node', 'node.pages');
						$form = node_add($type);
						$panelBodyText = drupal_render($form);
					}
				}
			}
		}

		$toReturn .= '
			<div class="panel panel-default panel-service-agreement">
				<div class="panel-body">
					<div class="header-information">
						<div class="col-md-3">
							<img src="/sites/all/themes/rif/public/assets/images/rif-logo-letterhead.jpg" class="img-responsive">
						</div>
						<div class="col-md-5 col-md-offset-4 text-right">
							<p>Reading is Fundamental<br />
							750 First Street, NE Suite 920<br />
							Washington, DC 20002<br />
							Toll Free: 1-877-RIF-READ<br />
							Phone: 202-536-3400<br />
							</p>
						</div>
					</div>
					'.$panelBodyText.'
				</div>
			</div>';
		return $toReturn;
	}

	function _get_sa_read_for_success() {

		// Setup any vars I need
		global $user;

		// IF user is not logged in then just return a quick message saying they should login.
		if($user->uid === 0) {
			$panelBodyText = '<p>Please register an account for Literacy Network to fill out a service agreement.</p>';
		} else {
			// If a user is logged in but not opted-in to LN then give them the same message as if they are not logged in
			$ln_role = user_role_load_by_name('Community Member');
			$has_ln_role = user_has_role($ln_role->rid);
			if(!$has_ln_role) {
				$panelBodyText = '<p>Please opt-in to Literacy Network to fill out this service agreement.</p>';
			} else {
				$type = array('site_profile','multi_site_profile','partnership_profile');
				$result = FALSE;
				$query = new EntityFieldQuery;
				$result = $query
					->entityCondition('entity_type', 'node')
					->propertyCondition('status', 1)
					->propertyCondition('type', $type, 'IN')
					->propertyCondition('uid', $user->uid)
					->execute();

				if(!$result) {
					$panelBodyText = '<p>You must first fill out your profile to sign a service agreement</p>';
				} else {
					// If a user is logged in and opted in and they do not have a SA yet then show the node add form
					$type = 'service_agreement_rfs';
					$result = FALSE;
					$query = new EntityFieldQuery;
					$result = $query
						->entityCondition('entity_type', 'node')
						->propertyCondition('status', 1)
						->propertyCondition('type', $type)
						->propertyCondition('uid', $user->uid)
						->execute();

					if ($result) {
						if (sizeof($result['node']) > 1) {
							dsm("The system noticed something suspicious while accessing your service agreement. Please contact your site administrator for more information.");
							watchdog('rif_registration', "A user (%email) has a more than one type of an SA associated with them.", array('%email' => $user->mail), WATCHDOG_ERROR);
						}
						// If the user has results then show them their sa
						module_load_include('inc', 'node', 'node.pages');
						$form = node_page_edit(node_load(array_keys($result['node'])[0]));
						$panelBodyText = drupal_render($form);
					} else {
						// If a user is logged in and opted in and they do have this SA then show it to them.
						module_load_include('inc', 'node', 'node.pages');
						$form = node_add($type);
						$panelBodyText = drupal_render($form);
					}
				}
			}
		}

		$toReturn = '
			<div class="panel panel-default panel-service-agreement">
				<div class="panel-body">
					<div class="header-information">
						<div class="col-md-3">
							<img src="/sites/all/themes/rif/public/assets/images/rif-logo-letterhead.jpg" class="img-responsive">
						</div>
						<div class="col-md-5 col-md-offset-4 text-right">
							<p>Reading is Fundamental<br />
							750 First Street, NE Suite 920<br />
							Washington, DC 20002<br />
							Toll Free: 1-877-RIF-READ<br />
							Phone: 202-536-3400<br />
							</p>
						</div>
					</div>
					'.$panelBodyText.'
				</div>
			</div>';
		return $toReturn;
	}

	function _get_sa_book_discount() {

		// Setup any vars I need
		global $user;

		// IF user is not logged in then just return a quick message saying they should login.
		if($user->uid === 0) {
			$panelBodyText = '<p>Please register an account for Literacy Network to fill out a service agreement.</p>';
		} else {
			// If a user is logged in but not opted-in to LN then give them the same message as if they are not logged in
			$ln_role = user_role_load_by_name('Community Member');
			$has_ln_role = user_has_role($ln_role->rid);
			if(!$has_ln_role) {
				$panelBodyText = '<p>Please opt-in to Literacy Network to fill out this service agreement.</p>';
			} else {
				$type = array('site_profile','multi_site_profile','partnership_profile');
				$result = FALSE;
				$query = new EntityFieldQuery;
				$result = $query
					->entityCondition('entity_type', 'node')
					->propertyCondition('status', 1)
					->propertyCondition('type', $type, 'IN')
					->propertyCondition('uid', $user->uid)
					->execute();

				if(!$result) {
					$panelBodyText = '<p>You must first fill out your profile to sign a service agreement</p>';
				} else {
					// If a user is logged in and opted in and they do not have a SA yet then show the node add form
					$type = 'service_agreement_bd';
					$result = FALSE;
					$query = new EntityFieldQuery;
					$result = $query
						->entityCondition('entity_type', 'node')
						->propertyCondition('status', 1)
						->propertyCondition('type', $type)
						->propertyCondition('uid', $user->uid)
						->execute();

					if ($result) {
						if (sizeof($result['node']) > 1) {
							dsm("The system noticed something suspicious while accessing your service agreement. Please contact your site administrator for more information.");
							watchdog('rif_registration', "A user (%email) has a more than one type of an SA associated with them.", array('%email' => $user->mail), WATCHDOG_ERROR);
						}
						// If the user has results then show them their sa
						module_load_include('inc', 'node', 'node.pages');
						$form = node_page_edit(node_load(array_keys($result['node'])[0]));
						$panelBodyText = drupal_render($form);
					} else {
						// If a user is logged in and opted in and they do have this SA then show it to them.
						module_load_include('inc', 'node', 'node.pages');
						$form = node_add($type);
						$panelBodyText = drupal_render($form);
					}
				}
			}
		}

		$toReturn = '
			<div class="panel panel-default panel-service-agreement">
				<div class="panel-body">
					<div class="header-information">
						<div class="col-md-3">
							<img src="/sites/all/themes/custom/rif/public/assets/images/rif-logo-letterhead.jpg" class="img-responsive">
						</div>
						<div class="col-md-5 col-md-offset-4 text-right">
							<p>Reading is Fundamental<br />
							750 First Street, NE Suite 920<br />
							Washington, DC 20002<br />
							Toll Free: 1-877-RIF-READ<br />
							Phone: 202-536-3400<br />
							</p>
						</div>
					</div>
					'.$panelBodyText.'
				</div>
			</div>';
		return $toReturn;
	}

	function rif_registration_form_newsletter_signup_node_form_alter(&$form, &$form_state, $form_id) {
		//dsm('New Form Funciton');
//		$form['actions']['submit'] = array(
//			'#type' => 'submit',
//			'#value' => t('Submit'),
//			'#attributes' => array(
//				'class' => array(
//					'btn btn-yellow-rif blue-border'
//				),
//			),
//		);
		$form['actions']['submit']['#type'] = 'submit';
		$form['actions']['submit']['#value'] = t('Submit');
		$form['actions']['submit']['#attributes']['class'] = array(
				'btn btn-yellow-rif blue-border newsletter-submit'
		);
		$form['actions']['submit']['#submit'][] = 'rif_registration_my_custom_submit';
		$form['#validate'][] = 'rif_registration_newsletter_signup_form_validate';
		//rif_auto_placeholders($form);
	}

	function rif_registration_newsletter_signup_form_validate(&$form, &$form_state) {
		$type = 'newsletter_signup';
		$query = new EntityFieldQuery;
		$result = $query
			->entityCondition('entity_type', 'node')
			->propertyCondition('status', 1)
			->propertyCondition('type', $type)
			->fieldCondition('field_email', 'value', $form_state['values']['field_email']['und'][0]['value'])
			->execute();

		if($result) {
				form_set_error('field_email', t("This email has already been used to sign up for the RIF newsletter."));
		}
	}

	function rif_registration_form_service_agreement_bfo_node_form_alter(&$form, &$form_state, &$form_id) {
		$editing = !empty($form['nid']['#value']);

		global $user;
		$user = user_load($user->uid);
		$ln_id = 'literacy_network';
		$ln_role = user_role_load_by_name('Community Member');
		$has_ln_role = user_has_role($ln_role->rid);
		$profile[$ln_id] = profile2_load_by_user($user, $ln_id);
		$selected_type_names = [];
		foreach($profile[$ln_id]->field_community_user_type['und'] as $pos => $item) {
			$emw_term = entity_metadata_wrapper('taxonomy_term', $item['tid']);
			$selected_type_names[] = $emw_term->name->value();
		}

		// Setup Vars to be used throughout the form
		// ------------------------------------------
		// TODO - Use legacy ID if they have one
		if(!empty($user->field_state)) {
			$state_abbreviation = state_abbr($user->field_state['und'][0]['value']);
		}  else {
			$state_abbreviation = 'NA';
		}
		$rifID = $state_abbreviation.str_pad($user->uid, 9, '0', STR_PAD_LEFT);
		if(!$editing) {
			$saStartDate = date("F d, Y");
		} else {
			$saStartDate = date("F d, Y", $form['created']['#value']);
		}
		//TODO (Service Agreement) : Remove Hardcoded end date
		$saEndDate = 'October 1, 2018';
		/*$saEndYear = date('Y');
		if(strtotime('now') > strtotime('October 1, '.$saEndYear)) {
			$saEndYear++;
		}
		$saEndDate = 'October 1, '.$saEndYear;*/

		$profileData = _get_users_profile_information($user);

		// Form Header
		// ------------------------------------------
		$form['header'] = array(
			'#markup' => '<h3>Books for Ownership Service Agreement</h3>',
			'#weight' => 1,
		);

		// Form Top Section of auto-filled data
		// ------------------------------------------

		$form['account_number'] = array(
			'#markup' => '<p><strong>RIF ID: </strong><br />'.$rifID. '</p>',
			'#weight' => 2,
		);
		$form['start_date'] = array(
			'#markup' => '
			<h4><strong>Agreement Start Date:</strong></h4>
			<p>'.$saStartDate.'</p>
			',
			'#weight' => 3,
		);
		$form['end_date'] = array(
			'#markup' => '
			<h4><strong>Agreement End Date:</strong></h4>
			<p>'.$saEndDate.'</p>',
			'#weight' => 4,
		);

		$form['licensor'] = array(
			'#markup' => '<p>This Agreement is made between Reading Is Fundamental, Inc., a nonprofit organization whose address is 750 First Street, NE Suite 920 Washington, DC 20002 (herein, Licensor), and<br>'.$profileData['agreementInformation'].'</p>',
			'#weight' => 5,
		);
		$form['licensee'] = array(
			'#markup' => '<p>
			Washington County Schools RIF<br>
			65432 Railway Place<br>
			Hagerstown, MD 21755<br>
			(301) 797-2385<br>
			
			(Herein, Licensee).</p>',
			'#weight' => 6
		);

		$form['licensee'] = array(
			'#markup' => '
			<h4><strong>Agreement</strong></h4>
			
			<h4>Summary of Licensee Responsibilities</h4>
			
			<p>The Licensee agrees to operate a Books for Ownership service between '.$saStartDate.' and '.$saEndDate.' as specified. The service shall include book distributions to be conducted at '.$profileData['siteCount'].' site(s) serving a total of approximately '.$profileData['childrenServed'].' children.</p>
			
			<h4>The budget for Licensee’s service is as follows:</h4>',
			'#weight' => 7
		);

		// TABLE ... Shifting ...
		// ------------------------------------------
		/*$form['field_funds_licensors']['und'][0]['value']['#description'] = '';
		$form['field_funds_licensors']['und'][0]['value']['#title'] = '';*/
		$form['field_licensee_matching_funds']['und'][0]['value']['#description'] = '';
		$form['field_licensee_matching_funds']['und'][0]['value']['#title'] = '';
		$form['field_additional_funds']['und'][0]['value']['#description'] = '';
		$form['field_additional_funds']['und'][0]['value']['#title'] = '';
		$form['field_other_funds']['und'][0]['value']['#description'] = '';
		$form['field_other_funds']['und'][0]['value']['#title'] = '';

		$form['table'] = array(
			'#theme' => 'table',
			'#weight' => 8,
			'#tree' => FALSE,
			'text-field-1' => array(
				'textfield' => &$sname,
			),
		);
		// Add the rows to the tables
		/*$form['table']['#rows']['field_funds_licensors'] = array(
			array('data' => 'Funds from Licensor\'s'),
			array('data' => &$form['field_funds_licensors']),
		);*/
		$form['table']['#rows']['field_licensee_mathcing_funds'] = array(
			array('data' => 'Licensee Funds'),
			array('data' => &$form['field_licensee_matching_funds']),
		);
		$form['table']['#rows']['field_additional_funds'] = array(
			array('data' => 'Additional funds provided by Licensee'),
			array('data' => &$form['field_additional_funds']),
		);
		$form['table']['#rows']['field_other_funds'] = array(
			array('data' => 'Additional funds provided by Licensor'),
			array('data' => &$form['field_other_funds']),
		);
		// TODO: Have the total budget value created ajaxically with https://www.drupal.org/project/computed_field
		if($editing) {
			$total = 0;
			$total += $form['field_funds_licensors']['und'][0]['value']['#default_value'];
			$total += $form['field_licensee_matching_funds']['und'][0]['value']['#default_value'];
			$total += $form['field_additional_funds']['und'][0]['value']['#default_value'];
			$total += $form['field_other_funds']['und'][0]['value']['#default_value'];
			$form['table']['#rows'][] = array(
				array('data' => '<strong>Total Budget</strong>'),
				array('data' => '<strong>$  '.$total.'</strong>'),
			);
		}
		/*$form['table']['#rows'][] = array(
			array('data' => '<strong>Total Budget</strong>'),
			array('data' => '<strong>$0.00</strong>'),
		);*/

		// Add the fields to the table root so they won't dissipate.
		/*$form['table']['field_funds_licensors'] = &$form['field_funds_licensors'];*/
		$form['table']['field_licensee_matching_funds'] = &$form['field_licensee_matching_funds'];
		$form['table']['field_additional_funds'] = &$form['field_additional_funds'];
		$form['table']['field_other_funds'] = &$form['field_other_funds'];

		// Unset the old values as they are not stored safely in the table root
		unset($form['field_funds_licensors']);
		unset($form['field_licensee_matching_funds']);
		unset($form['field_additional_funds']);
		unset($form['field_other_funds']);

		// Provide a custom validation function
		$form['#validate'][] = 'validate_i_agree_forms';
		$form_state['redirect'] = array('literacy-network/grants/sa-bfo');
		$form['#redirect'] = array('literacy-network/grants/sa-bfo');

		// Form Bottom Section of auto-filled data
		// ------------------------------------------
		/*$form['temp_data_3'] = array(
			'#markup' => '<p>Auto-filled Form Data Bottom Half</p>',
			'#weight' => 40,
		);*/

		// Leagal Language
		$form['legal'] = array(
			'#markup' => '
			<p><strong>The Licensee will operate the service in accordance with Licensee’s proposal, the attached terms and conditions, and attached guidelines, 
			all of which are hereby incorporated and made part of this Agreement.</strong></p>
			
			<p>This Agreement shall become effective when it is electronically approved by the Licensee’s RIF Coordinator and the Licensee’s Authorizing Official. 
			The Agreement Start Date shall be the later date of electronic approval by either the Licensee’s RIF Coordinator 
			or Authorizing Official.</p>
			
			
			<h3><strong>Terms and Conditions</strong></h4>
			<ol> 
			
			<li><h4><strong>Nonprofit Organization</strong></h4>
			<p>Licensee hereby declares that it is either a public agency or a private nonprofit group or organization. For purposes of this Agreement, non-profit means a group or organization of which no part of the net earnings inure, or may lawfully inure, to the benefit of any private shareholder or individual.</p></li>
			
			<li><h4><strong>Scope of Work</strong></h4>
			<p>Licensee agrees to operate a Books for Ownership Program (Program) which has as its primary purpose the motivation of children to read. Licensee will perform the Program in accordance with Licensee’s proposal which is hereby incorporated and made part of this Agreement. When the terms and conditions in this Agreement and its attachments are in conflict with Licensee’s proposal, the terms of this Agreement shall take precedence.</p></li>
			
			<li><h4><strong>Guidelines</strong></h4>
			<p>Licensee agrees that Licensee will operate the Program according to guidelines promulgated by Licensor. Such guidelines may be revised from time to time by Licensor at its sole discretion.<p></li>
			
			<li><h4><strong>Term of Performance</strong></h4>
			<p>All program activities as outlined in the Licensee’s proposal must be conducted before the Termination Date. A Program performance report must be submitted no later than 30 days after the Licensee’s last book distribution.</p></li>
			
			<li><h4><strong>Recipient Eligibility</strong></h4>
			<p>The children served by Licensee’s Program must be eligible for enrollment in preschool, elementary, or secondary schools and all children in a classroom or group will be served equally regardless of race, creed, color, ethnic origin, religion, sex, economic background or level of academic achievement.</p></li>
			
			<li><h4><strong>Funds Provided by Licensee</strong></h4>
			<p>If the Licensee is required to provide Matching Funds, as indicated on the first page of the Agreement under Summary of Licensee Responsibilities, Licensee certifies that on the Agreement Start Date, it has on hand the total of funds to be provided by Licensee. Licensee will use funds to be provided by Licensee as shown on the first page of the Agreement solely for the purchase of books to be used in Licensee’s Program.</p></li>
			
			<li><h4><strong>Reports and Audits</strong></h4>
			<p>Licensor shall have the right to require periodic reports from Licensee. Such reports must be submitted within the time required. Licensor reserves the right to audit the financial records of Licensee as they pertain to this Agreement at any time.</p></li>
			
			<li><h4><strong>Termination</strong></h4>
			<p>Licensor may terminate this Agreement upon thirty (30) days written notice to Licensee without cause. Licensor may terminate this Agreement immediately upon material breach of the Agreement by Licensee (including without limitation any breach of section 3,6,7,9 or any other material performance related Section herein).</p></li>
			
			<li><h4><strong>Permission to Use Service Marks</strong></h4>
			<p>Reading Is Fundamental, Inc., organized for the express purpose of encouraging reading at an early age through the distribution of inexpensive books, is sole owner of the following registered service marks (the “Marks”).
			<ul>
					<li>Reading Is Fundamental</li>
					<li>RIF</li>
					<li>The Reading Is Fundamental logo is a modern formation of an open book t and the words “Reading Is Fundamental” underneath.</li>
			</ul>
			<h4>Reading Is Fundamental hereby grants Licensee the right to use any of the “Marks” listed above under the following terms and conditions.</h4>
			
			<p>A.        In connection with reading programs designed to motivate children to read (the “Services”), Licensee must use the Marks only in connection with a place name indicating the city, town or other geographic area or school or community center in which Licensee is providing the services, such as:
			<ul>
					  <li>Reading Is Fundamental of Any Town U.S.A.</li>
					  <li>The Any Town RIF Project.</li>
					  <li>The Any Town Chamber of Commerce RIF Project.</li>
			</ul>					  
			</p>
			<p>B.       Notwithstanding anything to the contrary in paragraph 8.A, Licensee may use RIF’s logo without any additional words or phrases.</p>
			
			<p>C.      To ensure Licensee’s use of the Marks and Names meets Licensor’s high quality standards, Licensee shall provide to Licensor for prior approval, which shall not be unreasonably withheld, at least one representative sample of all written materials using the Marks and Names, including but not limited to labels, signs, stationery, promotional materials, informational materials, advertising and other materials. If Licensor does not send written notice of its disapproval to Licensee within ten (10) days after Licensor’s 
			receipt of samples of any such materials, these materials shall be deemed automatically approved.</p>
			
			<p>D.       Licensee shall have the right to use the service marks during the term of the Agreement provided that it adheres to the goals and purposes of Reading Is Fundamental. If at any time Licensee deviates from these principles, Reading Is Fundamental shall have sole right, at its discretion, to withdraw permission for use of the Marks.</p>
			
			<p>E.       Licensee shall not permit any other organization to use the service marks and shall immediately inform Reading Is Fundamental if it finds that these service marks are being used improperly or without permission.</p>
			
			<p>F.       On termination of this Agreement for any reason, Licensee shall immediately discontinue the use of all service marks owned by Reading Is Fundamental, Inc.</p></li>
			
			<li><h4><strong>Representations and Warranties</strong></h4>
			 
			<strong>By Each Party.</strong>
			<p>Each party to this Agreement represents and warrants to the other party that: (a) it has the full corporate right, power and authority to enter into this Agreement and to perform the acts required of it hereunder; and (b) its execution of this Agreement and performance of its obligations hereunder do not and will not violate any agreement or law to which it is a party or by which it is bound.</p>
			
			<strong>By Licensee.</strong>
			<p>Licensee hereby represents and warrants that its operation of the Program, and any materials it creates and/or distributes in connection with the operation of such Program, shall not violate any third party’s rights, cause any injury or bodily harm to person or property, or contain any material that is obscene, libelous or defamatory, or infringing of any third party’s copyrights, trademarks, patents, trade secrets, or other proprietary rights.</p></li>
			 
			<li><h4><strong>Indemnification</strong></h4>
			<p>Each party (the “Indemnifying Party”) will defend, indemnify and hold harmless the other party (the “Indemnified Party”), and the respective directors, officers, employees and agent of the Indemnified Party, from and against any and all claims, costs, losses, damages, judgments and expenses (including reasonable attorneys’ fees) arising out of or in connection 
			with any breach of this Agreement by the Indemnifying Party or any third-party claim alleging any breach of such party’s representations or warranties or covenants set forth in this Agreement. The Indemnified Party agrees that the Indemnifying Party shall have sole and exclusive control over the defense and settlement of any such third party claim. The Indemnified Party shall promptly notify the Indemnifying Party of any such claim of which it becomes aware and shall: (a) at the Indemnifying Party’s expense, provide reasonable cooperation to the Indemnifying Party in connection with the defense or settlement of any such claim; and (b) at the Indemnified Party’s expense, be entitled to participate in the defense of any such claim. The Indemnifying Party shall not acquiesce to any judgment or enter into any settlement that adversely affects the Indemnified Party’s rights or interests 
			without prior written consent of the Indemnified Party. To the extent (a) the Indemnifying Party may avail itself of the privilege of sovereign immunity or other privileges and immunities applicable to states, territories, municipalities, and subdivisions thereof; and (b) the Indemnifying Party cannot waive these privileges or immunities; the Indemnifying Party agrees to take the foregoing actions to the full extent allowable under the applicable law.</p></li>
			
			<li><h4><strong>Notices</strong></h4>
			<p>Except as otherwise set forth herein, any approval, consent, notice, request or other communication required or permitted to be given by either party to the other under this Agreement shall be in writing and shall be deemed to have been given (a) when delivered by hand or by courier; (b) when three (3) days have elapsed after its transmittal by registered or certified 
			mail, postage prepaid, return receipt requested; or (c) when two days have elapsed after its transmittal by overnight courier to the address set forth above. All notices provided to RIF hereunder shall be sent to the attention of RIF’s Vice President of Program Operations.</p></li>
			
			<li><h4><strong>Entire Agreement</strong></h4>
			<p>This Agreement, including the Exhibits referenced herein, constitutes the entire agreement of the parties relating to the subject matter hereof and supersedes all prior oral or written understandings or agreements relating thereto.</p></li>
			
			<li><h4><strong>Amendments</strong></h4>
			<p>This Agreement may not be amended, modified or canceled except by a written instrument executed by both parties.</p></li>
			
			<li><h4><strong>Binding Effect</strong></h4>
			<p>This Agreement shall be binding upon and shall inure to the benefit of Licensor and Licensee and each of their respective successors and permitted assigns.</p></li>
			
			<li><h4><strong>Assignment</strong></h4>
			<p>The rights granted by this Agreement are strictly personal to the parties, and may not be assigned without each other’s consent, which shall not be unreasonably withheld.</p></li>
			
			<li><h4><strong>Waiver</strong></h4>
			<p>No waiver of acquiescence in or consent to any breach of or default under this Agreement shall be deemed a waiver of acquiescence in or consent to any other breach or default occurring at any time, nor shall any waiver constitute a continuing waiver. No waiver shall be binding unless executed in writing by the party making the waiver.</p></li>
			
			<li><h4><strong>Severability</strong></h4>
			<p>If any provision is determined to be illegal, unenforceable or void, and if the remainder of this Agreement shall not be affected by such determination and is capable of substantial performance, then such void provision shall be deemed rescinded and each provision not so affected shall be enforced to the extent permitted by law.</p></li>
			
			<li><h4><strong>Governing Law</strong></h4>
			<p>This Agreement is governed by the laws of the District of Columbia, without regard to conflict of law principles.</p></li>
			
			<li><h4><strong>Counterparts</strong></h4>
			<p>This Agreement may be executed in several counterparts, each of which shall constitute an original, but all of which taken together shall constitute one and the same instrument.</p></li>
			
			<li><h4><strong>Headings</strong></h4>
			<p>The headings in this Agreement are for reference purposes only, do not constitute a part of this Agreement and shall not affect its meaning or interpretation.</p></li>
			
			<li><h4><strong>Deobligation and Modification</strong></h4>
			<p>Licensor shall have the right from time to time to review performance of the Licensee and unilaterally deobligate that portion of the RIF share which Licensor in its sole discretion feels will serve to benefit the objectives of Reading Is Fundamental, Inc. Licensor will notify Licensee of this action in writing and it shall become effective immediately upon receipt by Licensee. Licensor will be responsible for providing the RIF share for approved books ordered prior to the receipt of this deobligation notice.</p></li>
			
			</ol>

			<h4><strong>Privacy</strong></h4>
			<p>Licensee acknowledges that by agreeing to this RIF service, the program’s name, addresses of all location sites and number of participating children by site will be available on RIF’s online resources; which include a searchable map. To protect the privacy of RIF programs and it’s volunteers, the searchable map will include a ‘blind e-mail’ mechanism, which will allow volunteers and/or donors interested in supporting RIF to contact a local program without having access to specific e-mail addresses. Information included on the map will be limited to the program’s mailing address, the address of the sites it serves children and number of children served by site. RIF will not disclose individual names, e-mails, or telephone numbers online.</p>
			
			
			<h3><strong>General Guidelines</strong></h3>
			<ol>
			<li><p>With the support of my Proposing Organization’s Authorizing Official, I will take ownership of the RIF service, learn the fundamentals of effective service operation, maintain RIF records responsibly, and train a new RIF Coordinator should the need arise.</p></li>
			
			<li><p>I intend to spend all funds provided by RIF by the End Date of my organization’s Agreement with RIF meeting the terms of distribution outlined in the service agreement.</p></li>
			
			<li><p>I will submit all information required by RIF according to the following timeline:
			<ul>
			<li>Performance report – information concerning each book distribution will be entered onto the web-based performance report within 30 days of the distribution. Final performance report will be submitted within 30 days of the final book distribution.</li>
			
			<li>Renewal proposal – within 30 days of notice from RIF that my renewal proposal is due.</li>
			</ul></p></li>
			<li><p>I will use RIF’s Internet web-based automated systems to submit the information required by RIF, including distribution reports, book invoices and renewal proposal.</p></li>
			
			<li><p>I will not purchase books until I receive acknowledgement from RIF (generally via email) that my service is fully approved by RIF. I will purchase books and conduct book distributions only within my service’s Agreement contract, beginning with the start date and ending by the end date.</p></li>
			
			<li><p>I will appoint a minimum of three people to serve on the book selection committee. The committee will select new, high-quality, and affordable books that span a range of reading levels and interests. Activity books, and sticker books are considered unsuitable for RIF book distributions and cannot be purchased with RIF funding.</p></li>   
			</ol>
			
			<h4><strong>Books for Ownership</strong></h4>
			
			<strong>I agree to:</strong>
			<ol>
			<li><p>Order books from the RIF bookstore for your book distribution events. (Make sure you already are a registered member of the RIF Literacy Network and have your RIF ID readily available to log in).</p></li>

			<li><p>Hold at least two book events in your school or community over a 12-month period.</p></li>

			<li><p>Distribute a minimum of two books per child.</p></li>

			<li><p>Incorporate<a href="/literacy-central"> Literacy Central’s</a> digital resources in your book distribution events or supplementary classroom activities.</p></li>

			<li><p>Provide timely program data about your BFO events back to RIF National program tracking data.</p></li>

			<li><p>Purchase a 10% book cushion to be available at each book distribution. This required book cushion will ensure that each child has sufficient choice from a variety of titles.</p></li>

			<li><p>Hold all book distributions at least 30 days apart.</p></li>

			<li><p>Give children free books at no cost to them or their families.</p></li>

			<li><p>Ensure that no books will go to adults, siblings, classroom collections or school libraries.</p></li>

			<li><p>Have children choose their books free of adult interference.</p></li>

			<li><p>Provide motivational activities in conjunction with each book distribution.</p></li>

			<li><p>Ensure that any children that are absent during a book distribution will still have the opportunity to personally select a book from among several titles at another time. Adults and/or other children will not choose a book for them.</p></li>
			</ol>
			',
			'#weight' => 41,
		);

		$form['i_agree'] = array(
			'#type' => 'checkbox',
			'#title' => t('Check here to indicate that you have read and agree to the terms of the RIF Books for Ownership Service Agreement'),
			'#weight' => 42,
		);

		$form['actions']['submit']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);
		$form['actions']['submit']['#prefix'] = '<div class="col-xs-12">';
		$form['actions']['submit']['#suffix'] = '</div>';

		// For now disable the licensee funds no matter what
		$form['table']['field_other_funds']['#disabled'] = TRUE;

		// If this form is being edited then disable the fields
		if($editing) {
			$form['table']['field_funds_licensors']['#disabled'] = TRUE;
			$form['table']['field_licensee_matching_funds']['#disabled'] = TRUE;
			$form['table']['field_additional_funds']['#disabled'] = TRUE;
			$form['table']['field_other_funds']['#disabled'] = TRUE;
			$form['i_agree']['#default_value'] = TRUE;
			$form['i_agree']['#disabled'] = TRUE;
			unset($form['actions']['submit']);
		}
	}

	function rif_registration_form_service_agreement_rfs_node_form_alter(&$form, &$form_state, &$form_id) {
		$editing = !empty($form['nid']['#value']);

		global $user;
		$user = user_load($user->uid);
		$ln_id = 'literacy_network';
		$ln_role = user_role_load_by_name('Community Member');
		$has_ln_role = user_has_role($ln_role->rid);
		$profile[$ln_id] = profile2_load_by_user($user, $ln_id);
		$selected_type_names = [];
		foreach($profile[$ln_id]->field_community_user_type['und'] as $pos => $item) {
			$emw_term = entity_metadata_wrapper('taxonomy_term', $item['tid']);
			$selected_type_names[] = $emw_term->name->value();
		}
		//dsm($selected_type_names);
		/*dsm($user);
		dsm($profile[$ln_id]);
		dsm($form);*/

		// Setup Vars to be used throughout the form
		// ------------------------------------------
		// TODO - Use legacy ID if they have one
		if(!empty($user->field_state)) {
			$state_abbreviation = state_abbr($user->field_state['und'][0]['value']);
		}  else {
			$state_abbreviation = 'NA';
		}
		$rifID = $state_abbreviation.str_pad($user->uid, 9, '0', STR_PAD_LEFT);
		if(!$editing) {
			$saStartDate = date("F d, Y");
		} else {
			// TODO: Grab this date from the node creation date
			$saStartDate = date("F d, Y", $form['created']['#value']);

		}
		$saEndDate = 'October 1, 2018';

		$profileData = _get_users_profile_information($user);

		// Form Header
		// ------------------------------------------
		$form['header'] = array(
			'#markup' => '<h3>Read for Success Service Agreement</h3>',
			'#weight' => 1,
		);

		// Form Top Section of auto-filled data
		// ------------------------------------------

		$form['account_number'] = array(
			'#markup' => '<p><strong>RIF ID: </strong><br />'.$rifID. '</p>',
			'#weight' => 2,
		);
		$form['start_date'] = array(
			'#markup' => '
		<h4><strong>Agreement Start Date:</strong></h4>
		<p>'.$saStartDate.'</p>
		',
			'#weight' => 3,
		);
		//TODO variables needed for dates
		$form['end_date'] = array(
			'#markup' => '
		<h4><strong>Agreement End Date:</strong></h4>
		<p>'.$saEndDate.'</p>',
			'#weight' => 4,
		);

		$form['licensor'] = array(
			'#markup' => '<p>This Agreement is made between Reading Is Fundamental, Inc., a nonprofit organization whose address is 750 First Street, NE Suite 920 Washington, DC 20002 (herein, Licensor), and<br>'.$profileData['agreementInformation'].'</p>',
			'#weight' => 5,
		);

		$form['licensee'] = array(
			'#markup' => '
		<h4><strong>Agreement</strong></h4>
		
		<h4>Summary of Licensee Responsibilities</h4>
		
		<p>The Licensee agrees to operate a Books for Ownership service between '.$saStartDate.' and '.$saEndDate.' as specified. The service shall include book distributions to be conducted at '.$profileData['siteCount'].' site(s) serving a total of approximately '.$profileData['childrenServed'].' children.</p>
		
		<h4>The budget for Licensee’s service is as follows:</h4>',
			'#weight' => 7
		);

		// TABLE ... Shifting ...
		// ------------------------------------------
		/*$form['field_funds_licensors']['und'][0]['value']['#description'] = '';
		$form['field_funds_licensors']['und'][0]['value']['#title'] = '';*/
		$form['field_licensee_matching_funds']['und'][0]['value']['#description'] = '';
		$form['field_licensee_matching_funds']['und'][0]['value']['#title'] = '';
		$form['field_additional_funds']['und'][0]['value']['#description'] = '';
		$form['field_additional_funds']['und'][0]['value']['#title'] = '';
		$form['field_other_funds']['und'][0]['value']['#description'] = '';
		$form['field_other_funds']['und'][0]['value']['#title'] = '';

		$form['table'] = array(
			'#theme' => 'table',
			'#weight' => 8,
			'#tree' => FALSE,
			'text-field-1' => array(
				'textfield' => &$sname,
			),
		);
		// Add the rows to the tables
		/*$form['table']['#rows']['field_funds_licensors'] = array(
			array('data' => 'Funds from Licensor\'s'),
			array('data' => &$form['field_funds_licensors']),
		);*/
		$form['table']['#rows']['field_licensee_mathcing_funds'] = array(
			array('data' => 'Licensee Funds'),
			array('data' => &$form['field_licensee_matching_funds']),
		);
		$form['table']['#rows']['field_additional_funds'] = array(
			array('data' => 'Additional funds provided by Licensee'),
			array('data' => &$form['field_additional_funds']),
		);
		$form['table']['#rows']['field_other_funds'] = array(
			array('data' => 'Additional funds provided by Licensor'),
			array('data' => &$form['field_other_funds']),
		);
		// TODO: Have the total budget value created ajaxically with https://www.drupal.org/project/computed_field
		if($editing) {
			$total = 0;
			$total += $form['field_funds_licensors']['und'][0]['value']['#default_value'];
			$total += $form['field_licensee_matching_funds']['und'][0]['value']['#default_value'];
			$total += $form['field_additional_funds']['und'][0]['value']['#default_value'];
			$total += $form['field_other_funds']['und'][0]['value']['#default_value'];
			$form['table']['#rows'][] = array(
				array('data' => '<strong>Total Budget</strong>'),
				array('data' => '<strong>$  '.$total.'</strong>'),
			);
		}
		/*$form['table']['#rows'][] = array(
			array('data' => '<strong>Total Budget</strong>'),
			array('data' => '<strong>$0.00</strong>'),
		);*/

		// Add the fields to the table root so they won't dissipate.
		/*$form['table']['field_funds_licensors'] = &$form['field_funds_licensors'];*/
		$form['table']['field_licensee_matching_funds'] = &$form['field_licensee_matching_funds'];
		$form['table']['field_additional_funds'] = &$form['field_additional_funds'];
		$form['table']['field_other_funds'] = &$form['field_other_funds'];

		// Unset the old values as they are not stored safely in the table root
		unset($form['field_funds_licensors']);
		unset($form['field_licensee_matching_funds']);
		unset($form['field_additional_funds']);
		unset($form['field_other_funds']);

		// Provide a custom validation function
		$form['#validate'][] = 'validate_i_agree_forms';
		$form_state['redirect'] = array('literacy-network/grants/sa-bfo');
		$form['#redirect'] = array('literacy-network/grants/sa-bfo');

		// Form Bottom Section of auto-filled data
		// ------------------------------------------
		/*$form['temp_data_3'] = array(
			'#markup' => '<p>Auto-filled Form Data Bottom Half</p>',
			'#weight' => 40,
		);*/

		// Leagal Language
		$form['legal'] = array(
			'#markup' => '
		<p><strong>The Licensee will operate the service in accordance with Licensee’s proposal, the attached terms and conditions, and attached guidelines, 
		all of which are hereby incorporated and made part of this Agreement.</strong></p>
		
		<p>This Agreement shall become effective when it is electronically approved by the Licensee’s RIF Coordinator and the Licensee’s Authorizing Official. 
		The Agreement Start Date shall be the later date of electronic approval by either the Licensee’s RIF Coordinator 
		or Authorizing Official.</p>
		
		
		<h3><strong>Terms and Conditions</strong></h4>
		<ol> 
		
		<li><h4><strong>Nonprofit Organization</strong></h4>
		<p>Licensee hereby declares that it is either a public agency or a private nonprofit group or organization. For purposes of this Agreement, non-profit means a group or organization of which no part of the net earnings inure, or may lawfully inure, to the benefit of any private shareholder or individual.</p></li>
		
		<li><h4><strong>Scope of Work</strong></h4>
		<p>Licensee agrees to operate a Books for Ownership Program (Program) which has as its primary purpose the motivation of children to read. Licensee will perform the Program in accordance with Licensee’s proposal which is hereby incorporated and made part of this Agreement. When the terms and conditions in this Agreement and its attachments are in conflict with Licensee’s proposal, the terms of this Agreement shall take precedence.</p></li>
		
		<li><h4><strong>Guidelines</strong></h4>
		<p>Licensee agrees that Licensee will operate the Program according to guidelines promulgated by Licensor. Such guidelines may be revised from time to time by Licensor at its sole discretion.<p></li>
		
		<li><h4><strong>Term of Performance</strong></h4>
		<p>All program activities as outlined in the Licensee’s proposal must be conducted before the Termination Date. A Program performance report must be submitted no later than 30 days after the Licensee’s last book distribution.</p></li>
		
		<li><h4><strong>Recipient Eligibility</strong></h4>
		<p>The children served by Licensee’s Program must be eligible for enrollment in preschool, elementary, or secondary schools and all children in a classroom or group will be served equally regardless of race, creed, color, ethnic origin, religion, sex, economic background or level of academic achievement.</p></li>
		
		<li><h4><strong>Funds Provided by Licensee</strong></h4>
		<p>If the Licensee is required to provide Matching Funds, as indicated on the first page of the Agreement under Summary of Licensee Responsibilities, Licensee certifies that on the Agreement Start Date, it has on hand the total of funds to be provided by Licensee. Licensee will use funds to be provided by Licensee as shown on the first page of the Agreement solely for the purchase of books to be used in Licensee’s Program.</p></li>
		
		<li><h4><strong>Reports and Audits</strong></h4>
		<p>Licensor shall have the right to require periodic reports from Licensee. Such reports must be submitted within the time required. Licensor reserves the right to audit the financial records of Licensee as they pertain to this Agreement at any time.</p></li>
		
		<li><h4><strong>Termination</strong></h4>
		<p>Licensor may terminate this Agreement upon thirty (30) days written notice to Licensee without cause. Licensor may terminate this Agreement immediately upon material breach of the Agreement by Licensee (including without limitation any breach of section 3,6,7,9 or any other material performance related Section herein).</p></li>
		
		<li><h4><strong>Permission to Use Service Marks</strong></h4>
		<p>Reading Is Fundamental, Inc., organized for the express purpose of encouraging reading at an early age through the distribution of inexpensive books, is sole owner of the following registered service marks (the “Marks”).
		<ul>
				<li>Reading Is Fundamental</li>
				<li>RIF</li>
				<li>The Reading Is Fundamental logo is a modern formation of an open book t and the words “Reading Is Fundamental” underneath.</li>
		</ul>
		<h4>Reading Is Fundamental hereby grants Licensee the right to use any of the “Marks” listed above under the following terms and conditions.</h4>
		
		<p>A.        In connection with reading programs designed to motivate children to read (the “Services”), Licensee must use the Marks only in connection with a place name indicating the city, town or other geographic area or school or community center in which Licensee is providing the services, such as:
		<ul>
				  <li>Reading Is Fundamental of Any Town U.S.A.</li>
				  <li>The Any Town RIF Project.</li>
				  <li>The Any Town Chamber of Commerce RIF Project.</li>
		</ul>					  
		</p>
		<p>B.       Notwithstanding anything to the contrary in paragraph 8.A, Licensee may use RIF’s logo without any additional words or phrases.</p>
		
		<p>C.      To ensure Licensee’s use of the Marks and Names meets Licensor’s high quality standards, Licensee shall provide to Licensor for prior approval, which shall not be unreasonably withheld, at least one representative sample of all written materials using the Marks and Names, including but not limited to labels, signs, stationery, promotional materials, informational materials, advertising and other materials. If Licensor does not send written notice of its disapproval to Licensee within ten (10) days after Licensor’s 
		receipt of samples of any such materials, these materials shall be deemed automatically approved.</p>
		
		<p>D.       Licensee shall have the right to use the service marks during the term of the Agreement provided that it adheres to the goals and purposes of Reading Is Fundamental. If at any time Licensee deviates from these principles, Reading Is Fundamental shall have sole right, at its discretion, to withdraw permission for use of the Marks.</p>
		
		<p>E.       Licensee shall not permit any other organization to use the service marks and shall immediately inform Reading Is Fundamental if it finds that these service marks are being used improperly or without permission.</p>
		
		<p>F.       On termination of this Agreement for any reason, Licensee shall immediately discontinue the use of all service marks owned by Reading Is Fundamental, Inc.</p></li>
		
		<li><h4><strong>Representations and Warranties</strong></h4>
		 
		<strong>By Each Party.</strong>
		<p>Each party to this Agreement represents and warrants to the other party that: (a) it has the full corporate right, power and authority to enter into this Agreement and to perform the acts required of it hereunder; and (b) its execution of this Agreement and performance of its obligations hereunder do not and will not violate any agreement or law to which it is a party or by which it is bound.</p>
		
		<strong>By Licensee.</strong>
		<p>Licensee hereby represents and warrants that its operation of the Program, and any materials it creates and/or distributes in connection with the operation of such Program, shall not violate any third party’s rights, cause any injury or bodily harm to person or property, or contain any material that is obscene, libelous or defamatory, or infringing of any third party’s copyrights, trademarks, patents, trade secrets, or other proprietary rights.</p></li>
		 
		<li><h4><strong>Indemnification</strong></h4>
		<p>Each party (the “Indemnifying Party”) will defend, indemnify and hold harmless the other party (the “Indemnified Party”), and the respective directors, officers, employees and agent of the Indemnified Party, from and against any and all claims, costs, losses, damages, judgments and expenses (including reasonable attorneys’ fees) arising out of or in connection 
		with any breach of this Agreement by the Indemnifying Party or any third-party claim alleging any breach of such party’s representations or warranties or covenants set forth in this Agreement. The Indemnified Party agrees that the Indemnifying Party shall have sole and exclusive control over the defense and settlement of any such third party claim. The Indemnified Party shall promptly notify the Indemnifying Party of any such claim of which it becomes aware and shall: (a) at the Indemnifying Party’s expense, provide reasonable cooperation to the Indemnifying Party in connection with the defense or settlement of any such claim; and (b) at the Indemnified Party’s expense, be entitled to participate in the defense of any such claim. The Indemnifying Party shall not acquiesce to any judgment or enter into any settlement that adversely affects the Indemnified Party’s rights or interests 
		without prior written consent of the Indemnified Party. To the extent (a) the Indemnifying Party may avail itself of the privilege of sovereign immunity or other privileges and immunities applicable to states, territories, municipalities, and subdivisions thereof; and (b) the Indemnifying Party cannot waive these privileges or immunities; the Indemnifying Party agrees to take the foregoing actions to the full extent allowable under the applicable law.</p></li>
		
		<li><h4><strong>Notices</strong></h4>
		<p>Except as otherwise set forth herein, any approval, consent, notice, request or other communication required or permitted to be given by either party to the other under this Agreement shall be in writing and shall be deemed to have been given (a) when delivered by hand or by courier; (b) when three (3) days have elapsed after its transmittal by registered or certified 
		mail, postage prepaid, return receipt requested; or (c) when two days have elapsed after its transmittal by overnight courier to the address set forth above. All notices provided to RIF hereunder shall be sent to the attention of RIF’s Vice President of Program Operations.</p></li>
		
		<li><h4><strong>Entire Agreement</strong></h4>
		<p>This Agreement, including the Exhibits referenced herein, constitutes the entire agreement of the parties relating to the subject matter hereof and supersedes all prior oral or written understandings or agreements relating thereto.</p></li>
		
		<li><h4><strong>Amendments</strong></h4>
		<p>This Agreement may not be amended, modified or canceled except by a written instrument executed by both parties.</p></li>
		
		<li><h4><strong>Binding Effect</strong></h4>
		<p>This Agreement shall be binding upon and shall inure to the benefit of Licensor and Licensee and each of their respective successors and permitted assigns.</p></li>
		
		<li><h4><strong>Assignment</strong></h4>
		<p>The rights granted by this Agreement are strictly personal to the parties, and may not be assigned without each other’s consent, which shall not be unreasonably withheld.</p></li>
		
		<li><h4><strong>Waiver</strong></h4>
		<p>No waiver of acquiescence in or consent to any breach of or default under this Agreement shall be deemed a waiver of acquiescence in or consent to any other breach or default occurring at any time, nor shall any waiver constitute a continuing waiver. No waiver shall be binding unless executed in writing by the party making the waiver.</p></li>
		
		<li><h4><strong>Severability</strong></h4>
		<p>If any provision is determined to be illegal, unenforceable or void, and if the remainder of this Agreement shall not be affected by such determination and is capable of substantial performance, then such void provision shall be deemed rescinded and each provision not so affected shall be enforced to the extent permitted by law.</p></li>
		
		<li><h4><strong>Governing Law</strong></h4>
		<p>This Agreement is governed by the laws of the District of Columbia, without regard to conflict of law principles.</p></li>
		
		<li><h4><strong>Counterparts</strong></h4>
		<p>This Agreement may be executed in several counterparts, each of which shall constitute an original, but all of which taken together shall constitute one and the same instrument.</p></li>
		
		<li><h4><strong>Headings</strong></h4>
		<p>The headings in this Agreement are for reference purposes only, do not constitute a part of this Agreement and shall not affect its meaning or interpretation.</p></li>
		
		<li><h4><strong>Deobligation and Modification</strong></h4>
		<p>Licensor shall have the right from time to time to review performance of the Licensee and unilaterally deobligate that portion of the RIF share which Licensor in its sole discretion feels will serve to benefit the objectives of Reading Is Fundamental, Inc. Licensor will notify Licensee of this action in writing and it shall become effective immediately upon receipt by Licensee. Licensor will be responsible for providing the RIF share for approved books ordered prior to the receipt of this deobligation notice.</p></li>
		
		</ol>

		<h4><strong>Privacy</strong></h4>
		<p>Licensee acknowledges that by agreeing to this RIF service, the program’s name, addresses of all location sites and number of participating children by site will be available on RIF’s online resources; which include a searchable map. To protect the privacy of RIF programs and it’s volunteers, the searchable map will include a ‘blind e-mail’ mechanism, which will allow volunteers and/or donors interested in supporting RIF to contact a local program without having access to specific e-mail addresses. Information included on the map will be limited to the program’s mailing address, the address of the sites it serves children and number of children served by site. RIF will not disclose individual names, e-mails, or telephone numbers online.</p>
		
		
		<h3><strong>General Guidelines</strong></h3>
		<ol>
		<li><p>With the support of my Proposing Organization’s Authorizing Official, I will take ownership of the RIF service, learn the fundamentals of effective service operation, maintain RIF records responsibly, and train a new RIF Coordinator should the need arise.</p></li>
		
		<li><p>I intend to spend all funds provided by RIF by the End Date of my organization’s Agreement with RIF meeting the terms of distribution outlined in the service agreement.</p></li>
		
		<li><p>I will submit all information required by RIF according to the following timeline:
		<ul>
		<li>Performance report – information concerning each book distribution will be entered onto the web-based performance report within 30 days of the distribution. Final performance report will be submitted within 30 days of the final book distribution.</li>
		
		<li>Renewal proposal – within 30 days of notice from RIF that my renewal proposal is due.</li>
		</ul></p></li>
		<li><p>I will use RIF’s Internet web-based automated systems to submit the information required by RIF, including distribution reports, book invoices and renewal proposal.</p></li>
		
		<li><p>I will not purchase books until I receive acknowledgement from RIF (generally via email) that my service is fully approved by RIF. I will purchase books and conduct book distributions only within my service’s Agreement contract, beginning with the start date and ending by the end date.</p></li>
		
		<li><p>I will appoint a minimum of three people to serve on the book selection committee. The committee will select new, high-quality, and affordable books that span a range of reading levels and interests. Activity books, and sticker books are considered unsuitable for RIF book distributions and cannot be purchased with RIF funding.</p></li>   
		</ol>
		
		<h4><strong>Read for Success</strong></h4>
		
		<strong>I agree to:</strong>
		<ol>
		<li><p>Order books from the RIF bookstore for your book distribution events. (Make sure you already are a registered member of the RIF Literacy Network and have your RIF ID readily available to log in).</p></li>

		<li><p>Participate in staff development modules.</p></li>

		<li><p>Conduct weekly classroom read-alouds using at least 10 titles of the teacher’s choice from the 35 titles in the STEAM collection, with the scaffolded materials appropriates per title.</p></li>

		<li><p>Hold one book event in your school or community at the end of the school year.
		
		<li><p>Distribute eight books per child to choose and take home, plus a RIF tote bag and summer journal
		
		<li><p>Incorporate<a href="/literacy-central"> Literacy Central’s</a> digital resources in your book distribution events or supplementary classroom activities.</p></li>

		<li><p>Incorporate Literacy Central’s <link to www.rif.org/literacy-central> digital resources in your book distribution events or supplementary classroom activities.</p></li>
		
		<li><p>Provide timely program data about your BFO events back to RIF National program tracking data.</p></li>
		
		<li><p>Purchase a 5% book cushion to be available at each book distribution. This required book cushion will ensure that each child has sufficient choice from a variety of titles.</p></li>
		
		<li><p>Give children free books at no cost to them or their families.</p></li>
		
		<li><p>Ensure that no books will go to adults, siblings, classroom collections or school libraries.</p></li>
		
		<li><p>Have children choose their books free of adult interference.</p></li>
		
		<li><p>Ensure that any children that are absent during a book distribution will still have the opportunity to personally select a book from among several titles at another time. Adults and/or other children will not choose a book for them.</p></li>
		</ol>
		',
			'#weight' => 41,
		);

		$form['i_agree'] = array(
			'#type' => 'checkbox',
			'#title' => t('Check here to indicate that you have read and agree to the terms of the RIF Books for Ownership Service Agreement'),
			'#weight' => 42,
		);

		$form['actions']['submit']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);

		$form['actions']['submit']['#prefix'] = '<div class="col-xs-12">';
		$form['actions']['submit']['#suffix'] = '</div>';

		// For now disable the licensee funds no matter what
		$form['table']['field_other_funds']['#disabled'] = TRUE;

		// If this form is being edited then disable the fields
		if($editing) {
			$form['table']['field_funds_licensors']['#disabled'] = TRUE;
			$form['table']['field_licensee_matching_funds']['#disabled'] = TRUE;
			$form['table']['field_additional_funds']['#disabled'] = TRUE;
			$form['table']['field_other_funds']['#disabled'] = TRUE;
			$form['i_agree']['#default_value'] = TRUE;
			$form['i_agree']['#disabled'] = TRUE;
			unset($form['actions']['submit']);
		}

	}

	function rif_registration_form_service_agreement_bd_node_form_alter(&$form, &$form_state, &$form_id) {
		$editing = !empty($form['nid']['#value']);

		global $user;
		$user = user_load($user->uid);
		$ln_id = 'literacy_network';
		$ln_role = user_role_load_by_name('Community Member');
		$has_ln_role = user_has_role($ln_role->rid);
		$profile[$ln_id] = profile2_load_by_user($user, $ln_id);
		$selected_type_names = [];
		foreach($profile[$ln_id]->field_community_user_type['und'] as $pos => $item) {
			$emw_term = entity_metadata_wrapper('taxonomy_term', $item['tid']);
			$selected_type_names[] = $emw_term->name->value();
		}
		//dsm($selected_type_names);
		/*dsm($user);
		dsm($profile[$ln_id]);
		dsm($form);*/

		// Setup Vars to be used throughout the form
		// ------------------------------------------
		// TODO - Use legacy ID if they have one
		if(!empty($user->field_state)) {
			$state_abbreviation = state_abbr($user->field_state['und'][0]['value']);
		}  else {
			$state_abbreviation = 'NA';
		}
		$rifID = $state_abbreviation.str_pad($user->uid, 9, '0', STR_PAD_LEFT);
		if(!$editing) {
			$saStartDate = date("F d, Y");
		} else {
			$saStartDate = date("F d, Y", $form['created']['#value']);

		}
		$saEndDate = 'October 1, 2018';

		$profileData = _get_users_profile_information($user);

		// Form Header
		// ------------------------------------------
		$form['header'] = array(
			'#markup' => '<h3>Book Discount Service Agreement</h3>',
			'#weight' => 1,
		);

		// Form Top Section of auto-filled data
		// ------------------------------------------

		$form['account_number'] = array(
			'#markup' => '<p><strong>RIF ID: </strong><br />'.$rifID. '</p>',
			'#weight' => 2,
		);
		$form['start_date'] = array(
			'#markup' => '
		<h4><strong>Agreement Start Date:</strong></h4>
		<p>'.$saStartDate.'</p>
		',
			'#weight' => 3,
		);
		//TODO variables needed for dates
		$form['end_date'] = array(
			'#markup' => '
		<h4><strong>Agreement End Date:</strong></h4>
		<p>'.$saEndDate.'</p>',
			'#weight' => 4,
		);

		$form['licensor'] = array(
			'#markup' => '<p>This Agreement is made between Reading Is Fundamental, Inc., a nonprofit organization whose address is 750 First Street, NE Suite 920 Washington, DC 20002 (herein, Licensor), and<br>'.$profileData['agreementInformation'].'</p>',
			'#weight' => 5,
		);

		$form['licensee'] = array(
			'#markup' => '
		<h4><strong>Agreement</strong></h4>
		
		<h4>Summary of Licensee Responsibilities</h4>
		
		<p>The Licensee agrees to operate a Books for Ownership service between '.$saStartDate.' and '.$saEndDate.' as specified. The service shall include book distributions to be conducted at '.$profileData['siteCount'].' site(s) serving a total of approximately '.$profileData['childrenServed'].' children.</p>
		
		<h4>The budget for Licensee’s service is as follows:</h4>',
			'#weight' => 7
		);

		// TABLE ... Shifting ...
		// ------------------------------------------
		/*$form['field_funds_licensors']['und'][0]['value']['#description'] = '';
		$form['field_funds_licensors']['und'][0]['value']['#title'] = '';*/
		$form['field_licensee_matching_funds']['und'][0]['value']['#description'] = '';
		$form['field_licensee_matching_funds']['und'][0]['value']['#title'] = '';
		$form['field_additional_funds']['und'][0]['value']['#description'] = '';
		$form['field_additional_funds']['und'][0]['value']['#title'] = '';
		$form['field_other_funds']['und'][0]['value']['#description'] = '';
		$form['field_other_funds']['und'][0]['value']['#title'] = '';

		$form['table'] = array(
			'#theme' => 'table',
			'#weight' => 8,
			'#tree' => FALSE,
			'text-field-1' => array(
				'textfield' => &$sname,
			),
		);
		// Add the rows to the tables
		/*$form['table']['#rows']['field_funds_licensors'] = array(
			array('data' => 'Funds from Licensor\'s'),
			array('data' => &$form['field_funds_licensors']),
		);*/
		$form['table']['#rows']['field_licensee_mathcing_funds'] = array(
			array('data' => 'Licensee Funds'),
			array('data' => &$form['field_licensee_matching_funds']),
		);
		$form['table']['#rows']['field_additional_funds'] = array(
			array('data' => 'Additional funds provided by Licensee'),
			array('data' => &$form['field_additional_funds']),
		);
		$form['table']['#rows']['field_other_funds'] = array(
			array('data' => 'Additional funds provided by Licensor'),
			array('data' => &$form['field_other_funds']),
		);
		// TODO: Have the total budget value created ajaxically with https://www.drupal.org/project/computed_field
		if($editing) {
			$total = 0;
			$total += $form['field_funds_licensors']['und'][0]['value']['#default_value'];
			$total += $form['field_licensee_matching_funds']['und'][0]['value']['#default_value'];
			$total += $form['field_additional_funds']['und'][0]['value']['#default_value'];
			$total += $form['field_other_funds']['und'][0]['value']['#default_value'];
			$form['table']['#rows'][] = array(
				array('data' => '<strong>Total Budget</strong>'),
				array('data' => '<strong>$  '.$total.'</strong>'),
			);
		}
		/*$form['table']['#rows'][] = array(
			array('data' => '<strong>Total Budget</strong>'),
			array('data' => '<strong>$0.00</strong>'),
		);*/

		// Add the fields to the table root so they won't dissipate.
		/*$form['table']['field_funds_licensors'] = &$form['field_funds_licensors'];*/
		$form['table']['field_licensee_matching_funds'] = &$form['field_licensee_matching_funds'];
		$form['table']['field_additional_funds'] = &$form['field_additional_funds'];
		$form['table']['field_other_funds'] = &$form['field_other_funds'];

		// Unset the old values as they are not stored safely in the table root
		unset($form['field_funds_licensors']);
		unset($form['field_licensee_matching_funds']);
		unset($form['field_additional_funds']);
		unset($form['field_other_funds']);

		// Provide a custom validation function
		$form['#validate'][] = 'validate_i_agree_forms';
		$form_state['redirect'] = array('literacy-network/grants/sa-bfo');
		$form['#redirect'] = array('literacy-network/grants/sa-bfo');

		// Form Bottom Section of auto-filled data
		// ------------------------------------------
		/*$form['temp_data_3'] = array(
			'#markup' => '<p>Auto-filled Form Data Bottom Half</p>',
			'#weight' => 40,
		);*/

		// Leagal Language
		$form['legal'] = array(
			'#markup' => '
		<p><strong>The Licensee will operate the service in accordance with Licensee’s proposal, the attached terms and conditions, and attached guidelines, 
		all of which are hereby incorporated and made part of this Agreement.</strong></p>
		
		<p>This Agreement shall become effective when it is electronically approved by the Licensee’s RIF Coordinator and the Licensee’s Authorizing Official. 
		The Agreement Start Date shall be the later date of electronic approval by either the Licensee’s RIF Coordinator 
		or Authorizing Official.</p>
		
		
		<h3><strong>Terms and Conditions</strong></h4>
		<ol> 
		
		<li><h4><strong>Nonprofit Organization</strong></h4>
		<p>Licensee hereby declares that it is either a public agency or a private nonprofit group or organization. For purposes of this Agreement, non-profit means a group or organization of which no part of the net earnings inure, or may lawfully inure, to the benefit of any private shareholder or individual.</p></li>
		
		<li><h4><strong>Scope of Work</strong></h4>
		<p>Licensee agrees to operate a Books for Ownership Program (Program) which has as its primary purpose the motivation of children to read. Licensee will perform the Program in accordance with Licensee’s proposal which is hereby incorporated and made part of this Agreement. When the terms and conditions in this Agreement and its attachments are in conflict with Licensee’s proposal, the terms of this Agreement shall take precedence.</p></li>
		
		<li><h4><strong>Guidelines</strong></h4>
		<p>Licensee agrees that Licensee will operate the Program according to guidelines promulgated by Licensor. Such guidelines may be revised from time to time by Licensor at its sole discretion.<p></li>
		
		<li><h4><strong>Term of Performance</strong></h4>
		<p>All program activities as outlined in the Licensee’s proposal must be conducted before the Termination Date. A Program performance report must be submitted no later than 30 days after the Licensee’s last book distribution.</p></li>
		
		<li><h4><strong>Recipient Eligibility</strong></h4>
		<p>The children served by Licensee’s Program must be eligible for enrollment in preschool, elementary, or secondary schools and all children in a classroom or group will be served equally regardless of race, creed, color, ethnic origin, religion, sex, economic background or level of academic achievement.</p></li>
		
		<li><h4><strong>Funds Provided by Licensee</strong></h4>
		<p>If the Licensee is required to provide Matching Funds, as indicated on the first page of the Agreement under Summary of Licensee Responsibilities, Licensee certifies that on the Agreement Start Date, it has on hand the total of funds to be provided by Licensee. Licensee will use funds to be provided by Licensee as shown on the first page of the Agreement solely for the purchase of books to be used in Licensee’s Program.</p></li>
		
		<li><h4><strong>Reports and Audits</strong></h4>
		<p>Licensor shall have the right to require periodic reports from Licensee. Such reports must be submitted within the time required. Licensor reserves the right to audit the financial records of Licensee as they pertain to this Agreement at any time.</p></li>
		
		<li><h4><strong>Termination</strong></h4>
		<p>Licensor may terminate this Agreement upon thirty (30) days written notice to Licensee without cause. Licensor may terminate this Agreement immediately upon material breach of the Agreement by Licensee (including without limitation any breach of section 3,6,7,9 or any other material performance related Section herein).</p></li>
		
		<li><h4><strong>Permission to Use Service Marks</strong></h4>
		<p>Reading Is Fundamental, Inc., organized for the express purpose of encouraging reading at an early age through the distribution of inexpensive books, is sole owner of the following registered service marks (the “Marks”).
		<ul>
				<li>Reading Is Fundamental</li>
				<li>RIF</li>
				<li>The Reading Is Fundamental logo is a modern formation of an open book t and the words “Reading Is Fundamental” underneath.</li>
		</ul>
		<h4>Reading Is Fundamental hereby grants Licensee the right to use any of the “Marks” listed above under the following terms and conditions.</h4>
		
		<p>A.        In connection with reading programs designed to motivate children to read (the “Services”), Licensee must use the Marks only in connection with a place name indicating the city, town or other geographic area or school or community center in which Licensee is providing the services, such as:
		<ul>
				  <li>Reading Is Fundamental of Any Town U.S.A.</li>
				  <li>The Any Town RIF Project.</li>
				  <li>The Any Town Chamber of Commerce RIF Project.</li>
		</ul>					  
		</p>
		<p>B.       Notwithstanding anything to the contrary in paragraph 8.A, Licensee may use RIF’s logo without any additional words or phrases.</p>
		
		<p>C.      To ensure Licensee’s use of the Marks and Names meets Licensor’s high quality standards, Licensee shall provide to Licensor for prior approval, which shall not be unreasonably withheld, at least one representative sample of all written materials using the Marks and Names, including but not limited to labels, signs, stationery, promotional materials, informational materials, advertising and other materials. If Licensor does not send written notice of its disapproval to Licensee within ten (10) days after Licensor’s 
		receipt of samples of any such materials, these materials shall be deemed automatically approved.</p>
		
		<p>D.       Licensee shall have the right to use the service marks during the term of the Agreement provided that it adheres to the goals and purposes of Reading Is Fundamental. If at any time Licensee deviates from these principles, Reading Is Fundamental shall have sole right, at its discretion, to withdraw permission for use of the Marks.</p>
		
		<p>E.       Licensee shall not permit any other organization to use the service marks and shall immediately inform Reading Is Fundamental if it finds that these service marks are being used improperly or without permission.</p>
		
		<p>F.       On termination of this Agreement for any reason, Licensee shall immediately discontinue the use of all service marks owned by Reading Is Fundamental, Inc.</p></li>
		
		<li><h4><strong>Notices</strong></h4>
		<p>Except as otherwise set forth herein, any approval, consent, notice, request or other communication required or permitted to be given by either party to the other under this Agreement shall be in writing and shall be deemed to have been given (a) when delivered by hand or by courier; (b) when three (3) days have elapsed after its transmittal by registered or certified 
		mail, postage prepaid, return receipt requested; or (c) when two days have elapsed after its transmittal by overnight courier to the address set forth above. All notices provided to RIF hereunder shall be sent to the attention of RIF’s Vice President of Program Operations.</p></li>
		
		<li><h4><strong>Entire Agreement</strong></h4>
		<p>This Agreement, including the Exhibits referenced herein, constitutes the entire agreement of the parties relating to the subject matter hereof and supersedes all prior oral or written understandings or agreements relating thereto.</p></li>
		
		<li><h4><strong>Amendments</strong></h4>
		<p>This Agreement may not be amended, modified or canceled except by a written instrument executed by both parties.</p></li>
		
		<li><h4><strong>Binding Effect</strong></h4>
		<p>This Agreement shall be binding upon and shall inure to the benefit of Licensor and Licensee and each of their respective successors and permitted assigns.</p></li>
		
		<li><h4><strong>Assignment</strong></h4>
		<p>The rights granted by this Agreement are strictly personal to the parties, and may not be assigned without each other’s consent, which shall not be unreasonably withheld.</p></li>
		
		<li><h4><strong>Waiver</strong></h4>
		<p>No waiver of acquiescence in or consent to any breach of or default under this Agreement shall be deemed a waiver of acquiescence in or consent to any other breach or default occurring at any time, nor shall any waiver constitute a continuing waiver. No waiver shall be binding unless executed in writing by the party making the waiver.</p></li>
		
		<li><h4><strong>Severability</strong></h4>
		<p>If any provision is determined to be illegal, unenforceable or void, and if the remainder of this Agreement shall not be affected by such determination and is capable of substantial performance, then such void provision shall be deemed rescinded and each provision not so affected shall be enforced to the extent permitted by law.</p></li>
		
		<li><h4><strong>Governing Law</strong></h4>
		<p>This Agreement is governed by the laws of the District of Columbia, without regard to conflict of law principles.</p></li>
		
		<li><h4><strong>Counterparts</strong></h4>
		<p>This Agreement may be executed in several counterparts, each of which shall constitute an original, but all of which taken together shall constitute one and the same instrument.</p></li>
		
		<li><h4><strong>Headings</strong></h4>
		<p>The headings in this Agreement are for reference purposes only, do not constitute a part of this Agreement and shall not affect its meaning or interpretation.</p></li>
		
		</ol>

		<h4><strong>Privacy</strong></h4>
		<p>Licensee acknowledges that by agreeing to this RIF service, the program’s name, addresses of all location sites and number of participating children by site will be available on RIF’s online resources; which include a searchable map. To protect the privacy of RIF programs and it’s volunteers, the searchable map will include a ‘blind e-mail’ mechanism, which will allow volunteers and/or donors interested in supporting RIF to contact a local program without having access to specific e-mail addresses. Information included on the map will be limited to the program’s mailing address, the address of the sites it serves children and number of children served by site. RIF will not disclose individual names, e-mails, or telephone numbers online.</p>
		
		
		<h3><strong>General Guidelines</strong></h3>
		<ol>
		<li><p>With the support of my Proposing Organization’s Authorizing Official, I will take ownership of the RIF service, learn the fundamentals of effective service operation, maintain RIF records responsibly, and train a new RIF Coordinator should the need arise.</p></li>
		
		<li><p>I intend to spend all funds provided by RIF by the End Date of my organization’s Agreement with RIF meeting the terms of distribution outlined in the service agreement.</p></li>
		
		<li><p>I will submit all information required by RIF according to the following timeline:
		<ul>
		<li>Performance report – information concerning each book distribution will be entered onto the web-based performance report within 30 days of the distribution. Final performance report will be submitted within 30 days of the final book distribution.</li>
		
		<li>Renewal proposal – within 30 days of notice from RIF that my renewal proposal is due.</li>
		</ul></p></li>
		<li><p>I will use RIF’s Internet web-based automated systems to submit the information required by RIF, including distribution reports, book invoices and renewal proposal.</p></li>
		
		<li><p>I will not purchase books until I receive acknowledgement from RIF (generally via email) that my service is fully approved by RIF. I will purchase books and conduct book distributions only within my service’s Agreement contract, beginning with the start date and ending by the end date.</p></li>
	  
		</ol>
		
		<h4><strong>Book Discount</strong></h4>
		
		<strong>I agree to:</strong>
		<ol>
		<li><p>Order books from the RIF bookstore for your book distribution events. (Make sure you already are a registered member of the RIF Literacy Network and have your RIF ID readily available to log in).</p></li>
	
		<li><p>Incorporate<a href="/literacy-central"> Literacy Central’s</a> digital resources in your book distribution events or supplementary classroom activities.</p></li>

		<li><p>Provide timely program data about your BFO events back to RIF National program tracking data.</p></li>

		<li><p>Not resell books for profit.</p></li>
		</ol>
		',
			'#weight' => 41,
		);

		$form['i_agree'] = array(
			'#type' => 'checkbox',
			'#title' => t('Check here to indicate that you have read and agree to the terms of the RIF Books for Ownership Service Agreement'),
			'#weight' => 42,
		);

		$form['actions']['submit']['#attributes'] = array(
			'class' => array(
				'btn btn-yellow-rif blue-border'
			),
			'id' => array(
				'edit-submit'
			),
		);
		$form['actions']['submit']['#prefix'] = '<div class="col-xs-12">';
		$form['actions']['submit']['#suffix'] = '</div>';

		// For now disable the licensee funds no matter what
		$form['table']['field_other_funds']['#disabled'] = TRUE;

		// If this form is being edited then disable the fields
		if($editing) {
			$form['table']['field_funds_licensors']['#disabled'] = TRUE;
			$form['table']['field_licensee_matching_funds']['#disabled'] = TRUE;
			$form['table']['field_additional_funds']['#disabled'] = TRUE;
			$form['table']['field_other_funds']['#disabled'] = TRUE;
			$form['i_agree']['#default_value'] = TRUE;
			$form['i_agree']['#disabled'] = TRUE;
			unset($form['actions']['submit']);
		}

	}

	function validate_i_agree_forms(&$form, &$form_state) {
		if(!$form_state['values']['i_agree']){
			form_set_error('i_agree', "Please check to indicate that you have read and agree to the terms in the Service Agreement");
		}
	}

	/* ****************************************
	 * 			Helper Functions
	 * **************************************** */
	function state_abbr($name, $get = 'abbr') {
		//make sure the state name has correct capitalization:
		if($get != 'name') {
			$name = strtolower($name);
			$name = str_replace('_',' ',$name);
			$name = ucwords($name);
		}else{
			$name = strtoupper($name);
		}
		$states = array(
			'Alabama'=>'AL',
			'Alaska'=>'AK',
			'Arizona'=>'AZ',
			'Arkansas'=>'AR',
			'California'=>'CA',
			'Colorado'=>'CO',
			'Connecticut'=>'CT',
			'Delaware'=>'DE',
			'Dist of Columbia'=>'DC',
			'Florida'=>'FL',
			'Georgia'=>'GA',
			'Hawaii'=>'HI',
			'Idaho'=>'ID',
			'Illinois'=>'IL',
			'Indiana'=>'IN',
			'Iowa'=>'IA',
			'Kansas'=>'KS',
			'Kentucky'=>'KY',
			'Louisiana'=>'LA',
			'Maine'=>'ME',
			'Maryland'=>'MD',
			'Massachusetts'=>'MA',
			'Michigan'=>'MI',
			'Minnesota'=>'MN',
			'Mississippi'=>'MS',
			'Missouri'=>'MO',
			'Montana'=>'MT',
			'Nebraska'=>'NE',
			'Nevada'=>'NV',
			'New Hampshire'=>'NH',
			'New Jersey'=>'NJ',
			'New Mexico'=>'NM',
			'New York'=>'NY',
			'North Carolina'=>'NC',
			'North Dakota'=>'ND',
			'Ohio'=>'OH',
			'Oklahoma'=>'OK',
			'Oregon'=>'OR',
			'Pennsylvania'=>'PA',
			'Rhode Island'=>'RI',
			'South Carolina'=>'SC',
			'South Dakota'=>'SD',
			'Tennessee'=>'TN',
			'Texas'=>'TX',
			'Utah'=>'UT',
			'Vermont'=>'VT',
			'Virginia'=>'VA',
			'Washington'=>'WA',
			'West Virginia'=>'WV',
			'Wisconsin'=>'WI',
			'Wyoming'=>'WY'
		);
		if($get == 'name') {
			// in this case $name is actually the abbreviation of the state name and you want the full name
			$states = array_flip($states);
		}
		if(!array_key_exists($name, $states)){
			return 'NA';
		}
		return $states[$name];
	}

	/**
	 * Get the address from a users profiles.
	 *
	 * @param string $destination_id
	 *   The machine-readable path of the backup destination.
	 *
	 * @return array|bool
	 *   Returns an associative array of information to use, or FALSE if no information was available.
	 */
	function _get_users_profile_information($user = NULL) {
		if($user == NULL) {
			global $user;
		}

		// Get Node ID of resource to pull from in the order of multi-site / site / partnership
		// TODO (Service Agreements) : provide better checking for the users status if they have more than one user type.
		$profile_node = NULL;
		$type = 'multi_site_profile';
		$query = new EntityFieldQuery;
		$result = $query
			->entityCondition('entity_type', 'node')
			->propertyCondition('status', 1)
			->propertyCondition('type', $type)
			->propertyCondition('uid', $user->uid)
			->execute();

		if($result) {
			$emw_profile_parent_node = entity_metadata_wrapper('node', array_values($result['node'])[0]->nid);
			//$emw_profile_node = $emw_profile_parent_node->field_core_site;
			$totalChildrenServed = $emw_profile_node->field_overall_number_of_children->value();
			foreach($emw_profile_parent_node->field_associated_sites->getIterator() as $pos => $item) {
				$totalChildrenServed += $item->field_overall_number_of_children->value();
			}
			$toReturn = array(
				'siteName' => $emw_profile_node->field_site_name->value(),
				'address1' => $emw_profile_node->field_address_line_1->value(),
				'address2' => $emw_profile_node->field_address_line_2->value(),
				'city' => $emw_profile_node->field_city->value(),
				'stateAbbr' => $emw_profile_node->field_state->value(),
				'zip' => $emw_profile_node->field_zip->value(),
				'phone' => $emw_profile_node->field_site_phone_number->value(),
				'siteCount' => 1 + sizeof($emw_profile_parent_node->field_associated_sites->value()),
				'childrenServed' => $totalChildrenServed,
			);
		} else {
			$type = 'site_profile';
			$query = new EntityFieldQuery;
			$result = $query
				->entityCondition('entity_type', 'node')
				->propertyCondition('status', 1)
				->propertyCondition('type', $type)
				->propertyCondition('uid', $user->uid)
				->execute();

			if($result) {
				$emw_profile_node = entity_metadata_wrapper('node', array_values($result['node'])[0]->nid);
				$toReturn = array(
					'siteName' => $emw_profile_node->field_site_name->value(),
					'address1' => $emw_profile_node->field_address_line_1->value(),
					'address2' => $emw_profile_node->field_address_line_2->value(),
					'city' => $emw_profile_node->field_city->value(),
					'stateAbbr' => $emw_profile_node->field_state->value(),
					'zip' => $emw_profile_node->field_zip->value(),
					'phone' => $emw_profile_node->field_site_phone_number->value(),
					'siteCount' => 1,
					'childrenServed' => $emw_profile_node->field_overall_number_of_children->value(),
				);
			} else {
				$type = 'partnership_profile';
				$query = new EntityFieldQuery;
				$result = $query
					->entityCondition('entity_type', 'node')
					->propertyCondition('status', 1)
					->propertyCondition('type', $type)
					->propertyCondition('uid', $user->uid)
					->execute();

				if($result) {
					$emw_profile_node = entity_metadata_wrapper('node', array_values($result['node'])[0]->nid);
					$toReturn = array(
						'siteName' => $emw_profile_node->field_organization_name->value(),
						'address1' => $emw_profile_node->field_address_line_1->value(),
						'address2' => $emw_profile_node->field_address_line_2->value(),
						'city' => $emw_profile_node->field_city->value(),
						'stateAbbr' => $emw_profile_node->field_state->value(),
						'zip' => $emw_profile_node->field_zip->value(),
						'phone' => $emw_profile_node->field_phone_number->value(),
						'siteCount' => 1,
						'childrenServed' => 0,
					);
				}
			}
		}

		//Clean up the state field
		$tempStateAbbr = state_abbr($toReturn['stateAbbr']);
		$toReturn['stateAbbr'] = $tempStateAbbr;

		// Define the compiled Info Block

		$agreementInformation = '<br />';
		$agreementInformation .= $toReturn['siteName'].'<br />';
		$agreementInformation .= $toReturn['address1'].'<br />';
		if(!empty($toReturn['address2'])) { $agreementInformation .= $toReturn['address2'].'<br />'; }
		$agreementInformation .= $toReturn['city'] . ', ' . $toReturn['stateAbbr'] . ' '.$toReturn['zip'].'<br />';
		$agreementInformation .= $toReturn['phone'].'<br />';

		$toReturn['agreementInformation'] = $agreementInformation;

		return $toReturn;

		return array(
			'siteName' => 'Test Site Name',
			'address1' => 'first line of address',
			'address2' => 'second line of address if there is one',
			'city' => 'temp city',
			'stateAbbr' => 'temp state',
			'zip' => 'temp zip',
			'phone' => 'temp Phone',
			'siteCount' => 25,
			'childrenServed' => 2500,
		);
	}

	function _generate_rif_ID($user = NULL) {
		if($user == NULL) {
			global $user;
		}
		if($user->uid == 0) {
			return FALSE;
		}
		if(!empty($user->field_state)) {
			$state_abbreviation = state_abbr($user->field_state['und'][0]['value']);
		}  else {
			$state_abbreviation = 'NA';
		}
		return $state_abbreviation.str_pad($user->uid, 9, '0', STR_PAD_LEFT);
	}

	function _unnest_array(&$parentArray, $childPointer) {
		foreach($parentArray[$childPointer] as $key => $item){
			$parentArray[$key] = $item;
			unset($parentArray[$childPointer][$key]);
		}
		unset($parentArray[$childPointer]);
	}
