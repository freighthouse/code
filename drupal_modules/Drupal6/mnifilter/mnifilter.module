<?php
// $Id$

/*!
* @file
* Module to provide appropriate filtering for mni site.
*
*/

/*
 * Implementation of hook_init()
 */
function mnifilter_init() {
	drupal_add_css(drupal_get_path('module', 'mnifilter').
		'/css/mnifilter.css','module','all',TRUE);
	
	if(user_access('show topic codes')) {
		drupal_add_css(drupal_get_path('module', 'mnifilter').
		'/css/mnifilter_showtopics.css','module','all',FALSE);
	}
}

/*
* Implementation of hook_perm().
*/
function mnifilter_perm() {
 return array('view mnifilter', 'administer mnifilter', 'show topic codes');
}

/*
* Implementation of hook_help().
*/
function mnifilter_help($path, $arg) {
 switch ($path) {
   case 'admin/help#mnifilter':
       $output = '<p>'. t("This filter is intended to be the default '.
       		'filter on imarketnews.com, it deals with subheads, '.
       		'linebreaks and topic lines.") .'</p>';
   return $output;
 }
}

/*!
* Implementation of hook_filter().
*/
function mnifilter_filter($op, $delta = 0, $format = -1, $text = '') {

 switch ($op) {
   case 'list':
     return array(
       0 => t('MNI Filter')
     );

   case 'description':
     return t('Removes subheads, topic lines and tries to deal with '.
     	'line breaks rationally.');

   case 'settings':
     // No settings interface for this filter
     break;

   case 'no cache':
     // It's OK to cache this filter's output
     return FALSE;

   case 'prepare':
     // No preparation yet
     return $text;

   case 'process':
     return _mnifilter_filter($text);

   default:
     return $text;
 }
}


/*!
* Implementation of hook_filter_tips().
*/

function mnifilter_filter_tips($delta, $format, $long = FALSE) {
 if ($long) {
   return t('This is a filter we can enable which should theme stories '.
   		'to our preferred imarketnews.com presentation.');
 }
 else {
   //return short version
   return t('This is a filter we can enable.');
 }
}

function _mnifilter_filter($text) {
 // All block level tags
 $block = '(?:table|thead|tfoot|caption|colgroup|tbody|tr|td|th|div|'.
 	'dl|dd|dt|ul|ol|li|pre|select|form|blockquote|address|p|h[1-6]|hr)';

 // Split at <pre>, <script>, <style> and </pre>, </script>, </style> tags.
 // We don't apply any processing to the contents of these tags to avoid messing
 // up code. We look for matched pairs and allow basic nesting. For example:
 // "processed <pre> ignored <script> ignored </script> ignored </pre> processed"

 $l = strlen($text);
 
 // NOTE: gsplit tag is used below to help reorganize these tags once
 // proper <p> and <span> tags have been applied.
 
  // Dash-lines
 $text = preg_replace(
 		'/^--([^\n]*)/', 
 		"<p><gsplit><span class=\"dashline\">$0<br/></span></gsplit></p>", 
 	$text);
 $text = preg_replace(
 		'/\\n--([^\n]*)/', 
 		"<p><gsplit><span class=\"dashline\">$0<br/></span></gsplit></p>", 
 	$text);
 
 // By-lines
 $text = preg_replace(
 		'/^[Bb]y ([^\n]*)\\n/', 
 		"<p><gsplit><span class=\"byline\">$0</span></gsplit></p>", 
	$text);
 $text = preg_replace(
 		'/\\n(\s)*?\\n([Bb]y ([^\n]*)\\n)/', 
 		"<p><gsplit><span class=\"byline\">$2</span></gsplit></p>", 
 	$text);
 
 // Topic-lines
 //$text2 = preg_replace(
 //		'/\\n*\[TOPICS:[^\n]*/', 
 //		"<p><span class=\"topicline\">$0</span></p>\n", 
 //	$text);
 $text2 = preg_replace(
 		'/\\n*(\[TOPICS:[^\n]*)/', 
 		"<p><span class=\"topicline\">$1</span></p>\n", 
 	$text);

 $chunks = preg_split('@(</?(?:pre|script|style|object)[^>]*>)@i', 
 	$text2, -1, PREG_SPLIT_DELIM_CAPTURE);
 	
 // Note: PHP ensures the array consists of alternating delimiters and literals
 // and begins and ends with a literal (inserting NULL as required).
 $ignore = FALSE;
 $ignoretag = '';
 $output = '';
 foreach ($chunks as $i => $chunk) {
   if ($i % 2) {
     // Opening or closing tag?
     $open = ($chunk[1] != '/');
     list($tag) = split('[ >]', substr($chunk, 2 - $open), 2);
     if (!$ignore) {
       if ($open) {
         $ignore = TRUE;
         $ignoretag = $tag;
       }
     }
     // Only allow a matching tag to close it.
     else if (!$open && $ignoretag == $tag) {
       $ignore = FALSE;
       $ignoretag = '';
     }
   }
   else if (!$ignore) {
   	 // just to make things a little easier, pad the end
     $chunk = preg_replace('|\n*$|', '', $chunk) ."\n\n";
     $chunk = preg_replace('|<br />\s*<br />|', "\n\n", $chunk);
     
     // Space things out a little
     $chunk = preg_replace('!(<'. $block .'[^>]*>)!', "\n$1", $chunk); 
     $chunk = preg_replace('!(</'. $block .'>)!', "$1\n\n", $chunk); 
     
     // take care of duplicates
     $chunk = preg_replace("/\n\n+/", "\n\n", $chunk); 
     
     // make paragraphs, including one at the end
     $chunk = preg_replace('/\n?(.+?)(?:\n\s*\n|\z)/s', "<p>$1</p>\n", $chunk);

     // under certain strange conditions it could 
     // create a P of entirely whitespace
     $chunk = preg_replace('|<p>\s*</p>\n|', '', $chunk); 
     
     // problem with nested lists
     $chunk = preg_replace("|<p>(<li.+?)</p>|", "$1", $chunk); 
     
     $chunk = preg_replace('|<p><blockquote([^>]*)>|i', 
     	"<blockquote$1><p>", $chunk);
     $chunk = str_replace('</blockquote></p>', '</p></blockquote>', $chunk);
     $chunk = preg_replace('!<p>\s*(</?'. $block .'[^>]*>)!', "$1", $chunk);
     $chunk = preg_replace('!(</?'. $block .'[^>]*>)\s*</p>!', "$1", $chunk);
     $chunk = preg_replace('/&([^#])(?![A-Za-z0-9]{1,8};)/', '&amp;$1', $chunk);
   }
   $output .= $chunk;
 }
 
 // Uses the <gsplit> tags to float all bylines to the top of the content
 $rs = '/\A<span class="byline"/';
 $o = preg_split('/<\/?gsplit>/',$output);
 $s = preg_grep($rs, $o);
 $o = preg_grep('/[^<p>][^<\/p>][^<\/p>\s*<p>]/',$o);
 $o = preg_grep($rs, $o, PREG_GREP_INVERT);
 
 $output = '<p class="mni-space">'.implode($s).'<br/>'.implode($o);
 
 return $output;
}

function mnifilter_preprocess(&$variables) //node
{
	//$variables['ultra'] = $variables['links'][0];
	//$variables['links']['byline'] = array(
			//'title' => 'By Lord Ultra',
			//'html' => TRUE,);
	//drupal_set_title("ULTRAAAAAAAAAA!");
}
