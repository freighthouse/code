###############################################################################
admin
###############################################################################


//------------------------------------------------------------------------------
//  Admin Forms for Editing Type embargos
//------------------------------------------------------------------------------
function mnembargo_admin_type_edit($type)
{
	return drupal_get_form('mnembargo_admin_type_edit_form', $type);
}

function mnembargo_admin_type_edit_form(&$form_state, $type)
{
	$form = array();

	$form['node available_variables'] = array(
		'#value' => "<label>Node embargo Available Variables</label><ul>"
				."<li>".t("\$old_node - Old node object, about to " .
						"be deleted.")."</li>"
				."<li>".t("\$orig_new_node - New node object in it's " .
						"original, generated form. This is the node's " .
						"current state in the database.")."</li>"
				."<li>".t("\$fin_new_node - New node object to be saved " .
						"at the end.")."</li>"
				."</ul>"
	);
	$form['sql available_variables'] = array(
		'#value' => "<label>Node embargo Available Variables</label><ul>"
				."<li>".t("\$new_node - New node object being loaded after " .
						"the SQL modification has been done. After your " .
						"code is run, it will be saved again.")."</li>"
				."</ul>"
	);
	$form['curr_type'] = array('#type' => 'value', '#value' => $type->type);

	$db_data = _mnembargo_admin_scripts_array($type->type);
	$all_types = node_get_types();
	foreach($all_types as $t){
		if($t->type != $type->type) {
			$fs_name = $type->type."_to_".$t->type;
			$form[$fs_name] = array(
				'#type' => 'fieldset',
				'#collapsible' => true,
				'#collapsed' => true,
				'#title' => t('embargo to '.$t->name),
			);

			$form[$fs_name][$t->type."_embargo"] = array(
				'#type' => 'textarea',
				'#title' => t('embargo Code'),
				'#default_value' => ($db_data[$t->type]['script'] ?
									$db_data[$t->type]['script'] : ""),
				'#description' => "Do not include &lt?php, ?&gt, return, " .
						"or print statements. See above for a list of " .
						"available variables."
			);
			$form[$fs_name][$t->type."_embargo_type"] = array(
				'#type' => 'radios',
				'#title' => t('embargo Type'),
				'#options' => array(t('Use Global Default'),
					t('Node embargo'), t('SQL embargo')),
				'#default_value' => ($db_data[$t->type]['evo_type'] ?
									$db_data[$t->type]['evo_type'] : 0),
				'#description' => "Method for evolving nodes during this " .
						"kind of transition."
			);
		}
	}
	/*$fs_name = $type->type."_to_death";
	$form[$fs_name] = array(
		'#type' => 'fieldset',
		'#collapsible' => true,
		'#collapsed' => true,
		'#title' => t('embargo to Death'),
	);

	$form[$fs_name]["mnembargo_death_embargo"] = array(
		'#type' => 'textarea',
		'#title' => t('embargo Code'),
		'#default_value' => ($db_data[MNembargo_DEATHTYPE] ?
							$db_data[MNembargo_DEATHTYPE] : ""),
		'#description' => "Do not include &lt?php, ?&gt, return, " .
				"or print statements. See above for a list of " .
				"available variables."
	);*/

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save')
	);

	return $form;
}

function _mnembargo_admin_scripts_array($start_type)
{
	$q = "SELECT * FROM {mnembargo_scripts} WHERE start_type = '%s'";
	$db_data = array();
	$results = db_query($q, $start_type);
	while($r = db_fetch_array($results))
		$db_data[$r['end_type']] = array('script' => $r['script'],
										'evo_type' => $r['evo_type']);
	return $db_data;
}

function _mnembargo_update_script_data($start_type, $end_type,
$db_data, $form_state)
{
	if($db_data[$end_type]['script'] || $db_data[$end_type]['evo_type']){
		$valS = $form_state['values'][$end_type."_embargo"];
		$valT = $form_state['values'][$end_type."_embargo_type"];
		if($valS == "" && $valT == 0) {

			// Remove from db
			$q = "DELETE FROM {mnembargo_scripts} WHERE " .
					"start_type = '%s' AND end_type ='%s'";
			db_query($q, $start_type, $end_type);
			if(!db_affected_rows()) {
				watchdog('mnembargo', "There was an error " .
					"updating embargo scripts. op:D s_type:%s " .
					"e_type:%s", array($start_type, $end_type),
					WATCHDOG_ERROR);
			}
		} else if($valS != $db_data[$type->type]['script'] ||
		$valT != $db_data[$type->type]['evo_type']) {

			// Update db
			$q = "UPDATE {mnembargo_scripts} " .
				"SET script = '%s', evo_type = %d " .
				"WHERE start_type = '%s' AND end_type = '%s'";
			db_query($q, $valS, $valT, $start_type, $end_type);
			if(!db_affected_rows()) {
				watchdog('mnembargo', "There was an error " .
					"updating embargo scripts. op:U s_type:%s " .
					"e_type:%s", array($start_type, $end_type),
					WATCHDOG_ERROR);
			}
		}
	} else if($form_state['values'][$end_type."_embargo"] != "" ||
	$form_state['values'][$end_type."_embargo_type"]){

		// Insert into db
		$q = "INSERT INTO {mnembargo_scripts} (start_type, " .
			"end_type, script, evo_type) VALUES ('%s', '%s', '%s', %d)";
		db_query($q, $start_type, $end_type,
			$form_state['values'][$end_type."_embargo"],
			$form_state['values'][$end_type."_embargo_type"]);
		if(!db_affected_rows()) {
			watchdog('mnembargo', "There was an error " .
				"updating embargo scripts. op:I s_type:%s " .
				"e_type:%s", array($start_type, $end_type),
				WATCHDOG_ERROR);
		}
	}
}

function mnembargo_admin_type_edit_form_submit($form, &$form_state)
{
	$curr_type = $form_state['values']['curr_type'];

	$db_data = _mnembargo_admin_scripts_array($curr_type);
	foreach(node_get_types() as $type) {
		if($type->type != $curr_type) {
			_mnembargo_update_script_data($curr_type, $type->type,
				$db_data, $form_state);
		}
	}
	//_mnembargo_update_script_data($curr_type, MNembargo_DEATHTYPE,
	//	$db_data, $form_state);

	drupal_set_message(t("embargo scripts have been updated."));
}

function mnembargo_admin_main_form(&$form_state)
{
	$form = array();

	

	return $form;
}

function mnembargo_admin_main_form_submit($form, &$form_state)
{
	variable_set('mnembargo_global_evotype',
		$form_state['values']['mnembargo_global_evotype']);
}
$form['explanation']['content'] = array(
		'#value' => "<p>Embargo is done either through the Core Node " .
				"module API calls (Node Embargo), or via a SQL " .
				"modification of the Node's data (SQL embargo).</p>" .
			"<p>The Node method is more clean, but results in data loss, " .
				"particularly with regards to comments, and other modules " .
				"who don't keep any data in the node object.</p>" .
			"<p>The SQL method will maintain data more readily, but may also " .
				"leave data in the database uncleaned up, which can result " .
				"in errors if modules are not built to handle this.</p>" .

			"<label>Node embargo Process</label><ul>"
				."<li>Load \$old_node</li>"
				."<li>Generate \$orig_new_node</li>"
				."<li>Build \$fin_new_node</li>"
				."<li>Run embargo Code</li>"
				."<li>Delete \$old_node</li>"
				."<li>Save \$fin_new_node</li>"
				."</ul>".

			"<label>SQL embargo Process</label><ul>"
				."<li>Update type in Node table</li>"
				."<li>Load \$new_node</li>"
				."<li>Run embargo Code</li>"
				."<li>Save \$new_node</li>"
				."</ul>"
	);



###############################################################################
module
###############################################################################
//define("MNEVOLUTION_DEATHTYPE", "mnevolution_death");

/**
 * Evolve using SQL Evolution.
 */
function _mnevolution_evo_sql($node, $new_type, $script)
{
	$mn_now = time();

	$old_type = $node->type;

	// Change type
	$q = "UPDATE {node} SET type = '%s' WHERE nid = %d";
	db_query($q, $new_type, $node->nid);

	// Load our node again and save it. Gives modules an opportunity to
	// cleanly handle any leftover data we caused.
	$n = node_load($node->nid, null, true);

	// Adjust all evo times which have passed
	foreach(array_keys($n->mnevolution) as $k) {
		if($n->mnevolution[$k] +
		$n->created < $mn_now)
			unset($n->mnevolution[$k]);
	}

	// Build code to run
	$evo_code = "<?php \$new_node = unserialize('".
			addcslashes(serialize($n), "'")."');\n".
			"\$old_type = unserialize('".
			addcslashes(serialize($old_type), "'")."');\n";
	$evo_code .= $script;
	$evo_code .= "\n\n \$exit = array(\$new_node);\n " .
			"print serialize(\$exit);\n ?>";

	// Run script and save results
	$exit_vars = unserialize(drupal_eval($evo_code));
	$n = $exit_vars[0];

	node_save($n);

	rules_invoke_event('mnevolution_event_sql_evolution', $n);
}

/**
 * Evolve using Node Evolution.
 */
function _mnevolution_evo_node($node, $new_type, $script)
{
	$mn_now = time();

	// Generate our new Temporary Node
	$orig_new_node = array(
		'type'    => $new_type,
		'status'  => 0,
		'title'   => 'temporary',
		'body'    => 'temporary',
		'taxonomy' => array()
	);
	$orig_new_node = node_submit($orig_new_node);
	node_save($orig_new_node);

	// Run Scripts
	// Build our new to be saved node
	$fin_new_node = node_load($node->nid);
	$fin_new_node->nid = $orig_new_node->nid;
	$fin_new_node->vid = $orig_new_node->vid;
	$fin_new_node->type = $orig_new_node->type;

	// Build evo code
	$evo_code = "<?php \$old_node = unserialize('".
			addcslashes(serialize($node), "'")."');\n"
		."\$orig_new_node = unserialize('".
			addcslashes(serialize($orig_new_node), "'")."');\n"
		."\$fin_new_node = unserialize('".
			addcslashes(serialize($fin_new_node), "'")."');\n";
	$evo_code .= $script;
	$evo_code .= "\n\n \$exit = array(\$old_node, \$orig_new_node, " .
			"\$fin_new_node);\n print serialize(\$exit);\n ?>";

	// Run evo code
	$exit_vars = unserialize(drupal_eval($evo_code));
	$old_node = $exit_vars[0];
	$orig_new_node = $exit_vars[1];
	$fin_new_node = $exit_vars[2];

	// Adjust all evo times which have passed
	foreach(array_keys($fin_new_node->mnevolution) as $k) {
		if($fin_new_node->mnevolution[$k] +
		$fin_new_node->created < $mn_now)
			$fin_new_node->mnevolution[$k] = -1;
	}

	rules_invoke_event('mnevolution_event_node_evolution', $old_node,
		$orig_new_node, $fin_new_node);

	// Delete our old node
	node_delete($old_node->nid);
	node_save($fin_new_node);
}


/*$mnembargo = $node->mnembargo;
	$results = db_query("SELECT * FROM {mnembargo} WHERE nid = " .
		$node->nid);

	if(db_affected_rows()) {
		if($mnembargo && count($mnembargo) > 0) {
			// Check each piece for updates
			$mnevo2 = $mnembargo;
			while($r = db_fetch_array($results)) {
				if($mnembargo[$r['end_type']] &&
				$mnembargo[$r['end_type']] > 0) {
					if($r['time_to_evo'] != $mnembargo[$r['end_type']]) {

						// Update records different from the current db
						db_query("UPDATE {mnembargo} SET time_to_evo = %d " .
								"WHERE nid = %d AND end_type ='%s'",
								$mnembargo[$r['end_type']], $node->nid,
								$r['end_type']);
						if(!db_affected_rows()) {
							watchdog('mnembargo', "There was an error " .
								"updating embargo information. op:U nid:%d " .
								"type:%s timeOfEvo:%d", array($node->nid,
								$r['end_type'], $mnembargo[$r['end_type']]),
								WATCHDOG_ERROR);
						}
					}
					unset($mnevo2[$r['end_type']]);
				} else {

					// Remove records not in our updating node
					db_query("DELETE FROM {mnembargo} WHERE nid = %d " .
						"AND end_type = '%s'", $node->nid, $r['end_type']);
					if(!db_affected_rows()) {
						watchdog('mnembargo', "There was an error " .
							"updating embargo information. op:D nid:%d " .
							"type:%s timeOfEvo:%d", array($node->nid,
							$r['end_type'], $mnembargo[$r['end_type']]),
							WATCHDOG_ERROR);
					}
				}
			}

			// Add any new records not found in db
			foreach(array_keys($mnevo2) as $new_type) {
				db_query("INSERT INTO {mnembargo} (nid, end_type, " .
						"time_to_evo) VALUES (%d, '%s', %d)", $node->nid,
						$new_type, $mnevo2[$new_type]);
				if(!db_affected_rows()) {
					watchdog('mnevolution', "There was an error " .
						"updating evolution information. op:I nid:%d " .
						"type:%s timeOfEvo:%d", array($node->nid,
						$new_type, $mnevo2[$new_type]), WATCHDOG_ERROR);
				}
			}
		} else {
			// No records in our updating node, purge db
			_mnevolution_node_remove($node->nid);
		}
	} else if($mnevolution && count($mnevolution) > 0) {
		// Nothing in database, but new evolution info
		_mnevolution_node_add($node);
	}*/
	
	
	// TODO: Build triggers in as well
// TODO: Build forms and make actions configurable. Won't work otherwise.

/*function mnihelper_action_info() {
	return array(
		'mnevolution_action_evolve_node_sql' => array(
			'description' => t('Evolve Node via SQL Modifications'),
			'type' => 'node',
			'configurable' => 'false',
			'triggers' => array('any')
		),
		'mnevolution_action_evolve_node_node' => array(
			'description' => t('Evolve Node via Node API'),
			'type' => 'node',
			'configurable' => 'false',
			'triggers' => array('any')
		)
	);
}*/

/*// Check if we want to evolve
		if(!($new_type = _mnevolution_cron_checks($row['nid'])))
			continue;

		$old_node = node_load($row['nid']);

		if($new_type != MNEVOLUTION_DEATHTYPE) {
			$q = "SELECT script, evo_type FROM {mnevolution_scripts} " .
				"WHERE start_type = '%s' AND end_type = '%s'";
			$r = db_fetch_array(db_query($q, $old_node->type, $new_type));
			$evo_type = ($r['evo_type'] ? $r['evo_type'] :
				variable_get('mnevolution_global_evotype', 0));

			rules_invoke_event('mnevolution_event_prior_to_evolution',
				$old_node, $new_type);
			if($evo_type)
				_mnevolution_evo_sql($old_node, $new_type, $r['script']);
			else
				_mnevolution_evo_node($old_node, $new_type, $r['script']);

		} else {
			rules_invoke_event('mnevolution_event_node_death', $old_node);

			// MAYBE TODO: Implement death code here
			node_delete($old_node->nid);
		}*/
###############################################################################






















<?php

// Takes a node object, and moves it from alacarte to subscription tier
function _mnevolution_alac_to_sub($node)
{
	$newNode = array(
                'type'      => 'subscription_article',
                'title'     => $node->title,
                'teaser'    => $node->teaser,
                'uid'       => $node->uid,
                'name'      => $node->name,
                'promote'   => $node->promote,
                'taxonomy'  => $node->taxonomy,
                'created'   => $node->created,
                'format'    => $node->format,
                'body'      => $node->field_full_body[0]['value'],
                'comment'   => 0,
                'language'  => $node->language
        );
	$newNode = node_submit($newNode);
	$newNode->created = $node->created;
	node_save($newNode);

	// If it worked, re-attach paths and other important data
	if($newNode->nid) {
		path_set_alias("node/".$newNode->nid, $node->path);

		$pn = node_load($n->field_product_nid[0]['value']);
		$pn->field_product_active[0]['value'] = 0;
		$pn->field_item_nid[0]['value'] = $newNode->nid;
		node_save($pn);

		$newNode->field_sub_time_to_sub[0]['value'] =
			$node->field_ala_time_to_sub[0]['value'];
		node_save($newNode);

		// Finally, if all went well, delete the old node
		node_delete($node->nid);
	}
}

// Takes a node object, and moves it from alacarte to free tier
function _mnevolution_alac_to_free($node)
{
	$newNode = array(
                'type'      => 'free_article',
                'title'     => $node->title,
                'teaser'    => $node->teaser,
                'uid'       => $node->uid,
                'name'      => $node->name,
                'promote'   => $node->promote,
                'taxonomy'  => $node->taxonomy,
                'created'   => $node->created,
                'format'    => $node->format,
                'body'      => $node->field_full_body[0]['value'],
                'comment'   => 0,
                'language'  => $node->language
        );
	$newNode = node_submit($newNode);
	$newNode->created = $node->created;
	node_save($newNode);

	// If it worked, re-attach paths and other important data
	if($newNode->nid) {
		path_set_alias("node/".$newNode->nid, $node->path);

		$pn = node_load($n->field_product_nid[0]['value']);
		$pn->field_product_active[0]['value'] = 0;
		$pn->field_item_nid[0]['value'] = $newNode->nid;
		node_save($pn);

		// Finally, if all went well, delete the old node
		node_delete($node->nid);
	}
}

// Takes a node object, and moves it from subscription to free tier
function _mnevolution_sub_to_free($node)
{
	$newNode = array(
                'type'      => 'free_article',
                'title'     => $node->title,
                'teaser'    => $node->teaser,
                'uid'       => $node->uid,
                'name'      => $node->name,
                'promote'   => $node->promote,
                'taxonomy'  => $node->taxonomy,
                'created'   => $node->created,
                'format'    => $node->format,
                'body'      => $node->body,
                'comment'   => 0,
                'language'  => $node->language
        );
	$newNode = node_submit($newNode);
	$newNode->created = $node->created;
	node_save($newNode);

	// If it worked, re-attach paths and other important data
	if($newNode->nid) {
		path_set_alias("node/".$newNode->nid, $node->path);

		// Finally, if all went well, delete the old node
		node_delete($node->nid);
	}
}

// Cron hook for mnevolution
function mnevolution_cron()
{
	global $user;
	$ubu = $user;
	$old_state = session_save_session();
	session_save_session(false);
	$user = user_load(1);

	$t = time();

	// Alacarte
	$q = "SELECT nid FROM {content_type_alacarte_article} " .
		"WHERE (field_ala_time_to_free_value != NULL AND ".
		"field_ala_time_to_free_value != -1) OR " .
		"(field_time_to_sub != NULL AND field_time_to_sub != -1)";
	$r = db_query($q);
	while($row = db_fetch_array($r)) {
		$n = node_load($row->nid);

		$tot_sub = $n['created'] + $n['field_time_to_sub'][0]['value'];
		$tot_free = $n['created'] + $n['field_ala_time_to_free'][0]['value'];

		if (($tot_free > $n['created'] && $tot_free < $t))
			_mnevolution_alac_to_free($n);
		else if (($tot_sub > $n['created'] && $tot_sub < $t))
			_mnevolution_alac_to_sub($n);
	}

	// Subscription
	$q = "SELECT nid FROM {content_type_subscription_article} " .
		"WHERE field_sub_time_to_free_value == NULL OR ".
		"field_sub_time_to_free_value == -1";
	$r = db_query($q);
	while($row = db_fetch_array($r)) {
		$n = node_load($row->nid);

		$tot_free = $n['created'] + $n['field_sub_time_to_free'][0]['value'];
		if (($tot_free > $n['created'] && $tot_free < $t))
			_mnevolution_sub_to_free($n);
	}

	$user = $ubu;
	session_save_session($old_state);
}


/*$results = db_query("SELECT * FROM {mnevolution} WHERE nid = " .
		$node->nid);
	if(db_affected_rows()) {
		$db_data = _mnevolution_load_node($node);

		// Check if any data has changed
		$data_changed = false;
		$s = "";

		while($r = db_fetch_array($results)) {
			if($db_data[''.$r['time_to_evo']]) {
				// It's still here, has it changed?
				if($db_data[''.$r['time_to_evo']] != $r['end_type']) {
					// Update it
					$q = "UPDATE {mnevolution} SET"
				}
			} else {
				// We removed it, delete from evo system
			}
		}

		// If we have items in db_data that aren't in r, we have to add them

		foreach(array_keys($r) as $k) {
			if($node->mnevolution[$k] != $r[$k]) {
				$s .= $k . " = " . ($node->mnevolution[$k] ?
					$node->mnevolution[$k] : -1) . ", ";
				$data_changed = true;
			}
		}

		// If so update
		if($data_changed) {
			$q = "UPDATE {mnevolution} SET " . substr($s, 0, -2) .
				" WHERE nid = " . $node->nid;
			db_query($q);
			if(!db_affected_rows()) {
				watchdog('mnevolution', "There was an error updating " .
						"evolution information for nid " . $node->nid, array(),
						WATCHDOG_ERROR);
			}
		}
	} else {
		_mnevolution_add_node($node);
	}*/











	/*$mn_now = time();

	$past_evo = false;
	$r = $row_data;
	foreach(array_keys($r) as $k) {
		if(!(strlen($k) >= 3 && (substr($k, 0, 3) == "tt_" || $k == "ttd")))
			unset($r[$k]);
		else if($k == $node->type)
			unset($r[$k]);
		else if($r[$k]+$node->created <= $mn_now)
			$past_evo = true;
	}

	if(!count($r) > 0)
		return array('null', -1);

	$tot = 0;
	if($past_evo)
		$tot = max($r);
	else
		$tot = min($r);
	$evo_type = array_keys($r, $tot);
	$evo_type = ($evo_type[0] != "ttd" ? $evo_type =
			substr($evo_type[0], 3) : "ttd");

	return array($evo_type, $tot);*/











	/**
 * Updates mnevolution table schema when node types are added or removed
 */
/*function mnevolution_node_type($op, $info)
{
	switch($op) {
		case "delete":
			$ret = array();
			db_drop_field(&$ret, "mnevolution", "tt_".$info->type);

			$q = "DELETE FROM {mnevolution_scripts} " .
					"WHERE curr_type = '$info->type'";
			db_query($q);

			menu_rebuild();
			break;
		case "insert":
			$ret = array();
			db_add_field(&$ret, "mnevolution", "tt_".$info->type,
				array('type' => 'int', 'unsigned' => FALSE,
				'not null' => TRUE, 'default' => -1, 'disp-width' => '10'));

			$code_default = "";
			$cols = "curr_type, ";
			$vals = "'".$info->type."', ";
			foreach(node_get_types() as $t) {
				$cols .= $t->type.", ";
				$vals .= "'".$code_default."', ";
			}
			db_query("INSERT INTO {mnevolution_scripts} " .
					"(".substr($cols, 0, -2).") VALUES " .
					"(".substr($vals, 0, -2).")");

			menu_rebuild();
			break;
	}
}*/













//**************************************************************************
	//  Old Schemas
	//**************************************************************************
	//--------------------------------------------------------------------------
	//  Code Lookup Table
	//--------------------------------------------------------------------------
	/*$types = node_get_types();
	foreach($types as $t) {
		$l_fields = array(
			'curr_type' => array('type' => 'varchar', 'length' => 32,
							'not null' => TRUE),
		);
		foreach($types as $t2) {
			$l_fields[$t2->type] = array('type' => 'text', 'size' => 'big',
				'not null' => true);
		}
	}
	$schema['mnevolution_scripts'] = array(
		'fields' => $l_fields,
		'primary key' => array('curr_type'),
		'indexes' => array('curr_type' => array('curr_type'))
	);*/

	//--------------------------------------------------------------------------
	//  Core Data Table
	//--------------------------------------------------------------------------
	// Basic fields
	/*$t_fields = array(
		'mnevoid'	=> array('type' => 'serial', 'not null' => TRUE),
		'nid'		=> array('type' => 'int', 'unsigned' => TRUE,
						'not null' => TRUE, 'default' => 0,
						'disp-width' => '10'),
		'ttd'		=> array('type' => 'int', 'unsigned' => FALSE,
						'not null' => TRUE, 'default' => -1,
						'disp-width' => '10')
	);

	// Type fields
	foreach($types as $t)
		$t_fields['tt_'.$t->type] = array('type' => 'int', 'unsigned' => FALSE,
									'not null' => TRUE, 'default' => -1,
									'disp-width' => '10');

	// Table itself
	$schema['mnevolution'] = array(
		'fields'		=> $t_fields,
		'primary key'	=> array('mnevoid'),
		'indexes' 		=> array(
      		'nid' 		=> array('nid')),
	);

	return $schema;*/













		/*$code_default = "";
	$types = node_get_types();
	foreach($types as $t) {
		$cols = "curr_type, ";
		$vals = "'".$t->type."', ";
		foreach($types as $t2) {
			$cols .= $t2->type.", ";
			$vals .= "'".$code_default."', ";
		}

		db_query("INSERT INTO {mnevolution_scripts} " .
				"(".substr($cols, 0, -2).") VALUES " .
				"(".substr($vals, 0, -2).")");
	}*/













	/*$vals = array();
	$cols = "";
	$ct = $form_state['values']['curr_type'];
	foreach(node_get_types() as $type) {
		if($type->type != $ct) {
			$fs_name = $ct . "_to_" . $type->type;
			$cols .= $type->type . " = '%s', ";
			$vals[] = $form_state['values'][$type->type."_evolution"];
		}
	}
	$vals[] = $ct;

	db_query("UPDATE {mnevolution_scripts} SET ".substr($cols, 0, -2)
		." WHERE curr_type = '%s'", $vals);
	if(db_affected_rows())
		drupal_set_message(t("Evolution scripts have been updated."));*/










		$q = db_query("SELECT m.*, n.title, n.created, n.type " .
			"FROM {mnevolution} m LEFT JOIN {node} n ON n.nid = m.nid");
	$types = node_get_types();

	$headers = array('Title', 'Type', 'New Type', 'Evolution Time');
	$data = array();

	while($row = db_fetch_array($q)) {
		$evo_data = _mnevolution_next_evolution($row, node_load($row['nid']));
		if($evo_data[1] == -1)
			continue;

		$data[] = array($row['title'], $types[$row['type']]->name,
			$types[$evo_data[0]]->name, date("r",
			$row['created']+$evo_data[1]));
	}

	if(count($data))
		return theme_table($headers, $data);

	return "<p>No upcoming evolutions to report.</p>";