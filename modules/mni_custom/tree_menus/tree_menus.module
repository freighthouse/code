<?php
/**
 * Implementation of hook_help().
 */
	function tree_menus_help($path, $arg)
	{
		$output = '';
		switch($path)
		{
			case 'admin/settings/tree_menus':
				$output = t('<p>This is a simple module that enables the site to have drop down menus for site navigation and admin navigation.</p><p>Remember to activate and configure the menus in !link</p>', array('!link' => l('admin/build/block', 'admin/build/block')));
				break;
		}
		return $output;
	}

/**
 * Implemention of hook_menu().
 */
	function tree_menus_menu()
	{
		$items['admin/settings/tree_menus'] = array(
			'title' => t('Tree Menus'),
			'description' => t('Configure Tree Menus'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array('tree_menus_admin_settings'),
    	'access arguments' => array('administer site configuration'),
			'type' => MENU_NORMAL_ITEM,
		);
		return $items;
	}

/**
 * Settings form as implemented by hook_menu
 */
	function tree_menus_admin_settings()
	{
		$form['tree_menus_number'] = array(
			'#type' => 'select',
			'#title' => t('Number of Tree Menus'),
			'#description' => t('The total number of independent tree menus (blocks) you want.'),
			'#default_value' => variable_get('tree_menus_number', '2'),
			'#options' => drupal_map_assoc(array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
		);
		return system_settings_form($form);
	}

/**
 * Implementation of hook_block().
 */
	function tree_menus_block($op = 'list', $delta = 0, $edit = array())
	{
		global $user;

		switch($op)
		{
			case 'list':
				for ($i = 1; $i <= variable_get('tree_menus_number', '2'); $i++)
				{
					$blocks[$i]['info'] = variable_get('tree_menus_name_' . $i, 'Tree Menu ' . $i) . ' (Tree Menu)';
				}
				return $blocks;
			break;

			case 'configure':
				$form['tree_menus_name_' . $delta] = array(
					'#type' => 'textfield',
					'#title' => t('Menu Name'),
					'#default_value' => variable_get('tree_menus_name_' . $delta, 'Tree Menu ' . $delta)
				);
				$form['tree_menus_menu_' . $delta] = array(
					'#type' => 'select',
					'#title' => t('Source Menu Tree'),
					'#description' => t('The menu tree from which to show a tree menu.'),
					'#default_value' => variable_get('tree_menus_menu_' . $delta, 'navigation:0'),
					'#options' => menu_parent_options(menu_get_menus(), 0)
				);
				$form['tree_menus_start_level_'. $delta] = array(
					'#type' => 'textfield',
					'#title' => t('Menu Start Level'),
					'#default_value' => variable_get('tree_menus_start_level_'. $delta, '1'),
				);
				$form['tree_menus_menuid_'. $delta] = array(
					'#type' => 'textfield',
					'#title' => t('Menu ID'),
					'#default_value' => variable_get('tree_menus_menuid_'. $delta, ''),
				);
				$form['tree_menus_menuclass_'. $delta] = array(
					'#type' => 'textfield',
					'#title' => t('Menu Class'),
					'#default_value' => variable_get('tree_menus_menuclass_'. $delta, ''),
				);
				return $form;
			break;

			case 'save':
				variable_set('tree_menus_name_' . $delta, $edit['tree_menus_name_' . $delta]);
				variable_set('tree_menus_menu_' . $delta, $edit['tree_menus_menu_' . $delta]);
				variable_set('tree_menus_start_level_'. $delta, $edit['tree_menus_start_level_'.$delta]);
				variable_set('tree_menus_menuid_'. $delta, $edit['tree_menus_menuid_'.$delta]);
				variable_set('tree_menus_menuclass_'. $delta, $edit['tree_menus_menuclass_'.$delta]);
			break;

			case 'view':
				list($menu_name, $mlid) = explode(':', variable_get('tree_menus_menu_' . $delta, 'navigation:0'));
				$active_menu = menu_get_active_menu_name();
				menu_set_active_menu_name($menu_name);
				$start_level = variable_get('tree_menus_start_level_' . $delta, '1');
				$menuid = variable_get('tree_menus_menuid_' . $delta, '');
				$menuclass = variable_get('tree_menus_menuclass_' . $delta, '');
				
				if($start_level > 1)
				{
					$trail = menu_get_active_trail();
					if(!$trail)
					{
						return null;
					}
					else
					{
						for($i = $start_level; $i > 1; $i--)
						{
							if(isset($trail[$i - 1]))
							{
								$mlid = $trail[$i - 1]['mlid'];
								break;
							}
						}
					}
				}
				$output = theme('tree_menu', $delta, $menu_name, $mlid, $menuid, $menuclass, $start_level);
 				if($output)
 				{
					$block['content'] = $output['content'];
					if(strtolower($output['subject']) == strtolower(t('Navigation')) && $user->uid)
					{
						$block['subject'] = check_plain($user->name);
					}
					elseif($output['subject'] != $menu_name)
					{
						$block['subject'] = check_plain($output['subject']);
					}
					else
					{
						$block['subject'] = '';
					}
 				}
 				else
 				{
					$block['content'] = false;
 				}
 				menu_set_active_menu_name($active_menu);
				return $block;
			break;
		}
		return null;
	}

/**
 * Private functions below
 */
	function build_tree_menu_tree($menu_name, $mlid, $start_level)
	{
		$menu = menu_tree_all_data($menu_name);

		// Create the specific menu if we have a pid.
		if(!empty($mlid))
		{
			// Load the parent menu item.
			$item = menu_link_load($mlid);
			$title = $item['title'];
			// Narrow down the full menu to the specific sub-tree we need.
			for($p = 1; $p < 10; $p++)
			{
				$sub_mlid = $item["p$p"];
				if($sub_mlid)
				{
					$subitem = menu_link_load($sub_mlid);
					// Menu sets these keys in _menu_tree_check_access().
					$menu = $menu[(50000 + $subitem['weight']) . ' ' . $subitem['title'] . ' ' . $subitem['mlid']]['below'];
				}
			}
		}
		else
		{
			$title = $menu_name;
		}

		$output['content'] = '';
		$output['subject'] = $title;

		if($menu)
		{
			$active = false;
			$output['content'] .= tree_menu_tree($menu, $active, $start_level);
			//$output['content'] .= tree_menu_tree($menu, $active, $menuid, $menuclass, $start_level);
		}
		return $output;
	}

	function tree_menu_tree($menu, &$expanded, $start_level)
	{
		static $level = 1;
		$output = '';
		$expanded = false;
		$p_expanded = false;
		$index = 0;
		$hidden_count = 0;
		$item_count = count($menu);
		$separator = ceil($item_count/2);

		foreach($menu as $menu_item)
		{
			if($menu_item['link']['hidden'] == 0)
			{
				unset($class);
				$class = array();
				$active = false;
				$class[] = "item-$level-". ($index + 1);
				if(!$index) $class[] = "first";
				if($index == (count($menu) - $hidden_count - 1)) $class[] = "last";
				if($level == 1) $expanded = false;
				if($menu_item['link']['href'] == $_GET['q'] || ($menu_item['link']['href'] == '<front>' && $_GET['q'] == 'node'))
				{
					$class[] = "active";
					$active = true;
					$expanded = true;
				}
				if((!empty($menu_item['link']['has_children'])) && (!empty($menu_item['below'])))
				{
					$class[] = "submenu";
					if($active) $class[] = "active";
					$level++;
					$children = tree_menu_tree($menu_item['below'], $p_expanded, $start_level);
					if($p_expanded)
					{
						$expanded = $p_expanded;
						$class[] = "active";
					}
					$class = implode(" ", $class);
					if($class) $class = ' class="' . $class . '"';
					if($start_level == 1 || $start_level == 2){
						if($start_level == 2 && $index == $separator) $output .= '</ul><ul>';
						$output .= "<li$class>" . theme('tree_menu_link', $menu_item, $level, $expanded) . "</li>\n";
					} else {
						$output .= "<li$class>" . theme('tree_menu_link', $menu_item, $level - 1, $expanded);
						$output .= theme('tree_sub_menu', $children, $level);
						$output .= "</li>\n";
					}
					$level--;
				}
				else
				{
					if($start_level == 2 && $index == $separator) $output .= '</ul><ul>';
					$class = implode(" ", $class);
					if($class) $class = ' class="' . $class . '"';
					$output .= "<li$class>" . theme('tree_menu_link', $menu_item, $level, $expanded) . "</li>\n";
				}
				$index++;
			}
			else
			{
				$hidden_count++;
			}
		}

		return $output;
	}

/**
 * Implmentation of hook_theme().
 */
	function tree_menus_theme()
	{
		return array(
			'tree_menu' => array(
				'arguments' => array('delta' => null, 'menu_name' => null, 'pid' => null, 'menuid' => '', 'menuclass' => ''),
			),
			'tree_sub_menu' => array(
				'arguments' => array('content' => null, 'level' => null),
			),
			'tree_menu_link' => array(
				'arguments' => array('menu_item' => null, 'level' => null),
			)
		);
	}

/**
 * Theming functions
 */
	function theme_tree_menu($delta, $menu_name, $pid, $menuid, $menuclass, $start_level)
	{
		$output = array();
		if(!isset($pid)) return false;
		$menu_tree = build_tree_menu_tree($menu_name, $pid, $start_level);
		
		if ($menuclass) $menuclass .= ' ';
		if ($menuid) $menuid = ' id="'.$menuid.'"';
		
		if($menu_tree)
		{
			if($menu_tree['content'])
			{
				$output['content'] = "\n";
				$output['content'] .= '<ul'.$menuid.' class="'.$menuclass.'tree-menu menu-' . $delta . '">' . "\n";
				$output['content'] .= $menu_tree['content'] . "</ul>\n";
				$output['subject'] .= $menu_tree['subject'];
			}
		}
		return $output;
	}

	function theme_tree_sub_menu($content, $level)
	{
		$output = '<ul class="level-' . $level . '">';
		$output .= $content;
		$output .= "</ul>\n";
		return $output;
	}

	function theme_tree_menu_link($menu_item, $level, $expanded = false)
	{
		return l($menu_item['link']['title'], $menu_item['link']['href']);
	}

?>